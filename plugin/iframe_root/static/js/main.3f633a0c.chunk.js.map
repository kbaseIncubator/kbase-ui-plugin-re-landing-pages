{"version":3,"sources":["lib/RelationEngineAPIClient.ts","types/index.ts","types/taxonomy.ts","types/ontology.ts","redux/actions.ts","redux/reducers.ts","redux/store.ts","lib/DB.ts","landingPages/taxonomy/lib/TaxonAPIClient.ts","landingPages/taxonomy/lib/model.ts","landingPages/taxonomy/main/TaxonDB.ts","landingPages/taxonomy/SourceInfo.tsx","landingPages/taxonomy/TaxonItem.tsx","landingPages/taxonomy/taxonChildren/TaxonChildrenDB.ts","landingPages/taxonomy/TaxonList.tsx","components/ErrorView.tsx","landingPages/taxonomy/taxonChildren/TaxonChildren.tsx","landingPages/taxonomy/taxonChildren/data.tsx","landingPages/taxonomy/taxonChildren/index.ts","landingPages/taxonomy/lineage/LineageDB.ts","landingPages/taxonomy/lineage/Lineage.tsx","landingPages/taxonomy/lineage/data.tsx","landingPages/taxonomy/lineage/index.ts","landingPages/taxonomy/LineageNavigator.tsx","landingPages/taxonomy/TaxonSummary.tsx","landingPages/taxonomy/taxonInfo/TaxonDetailNCBI.tsx","landingPages/taxonomy/taxonInfo/TaxonDetail.tsx","landingPages/taxonomy/lib/props.ts","components/Wikipedia.tsx","landingPages/taxonomy/lib/Wikipedia.ts","components/Loading.tsx","landingPages/taxonomy/taxonInfo/TaxonDescription.tsx","landingPages/taxonomy/taxonInfo/linkedData/LinkedDataDB.ts","landingPages/taxonomy/taxonInfo/linkedData/LinkedData.tsx","landingPages/taxonomy/taxonInfo/linkedData/data.tsx","landingPages/taxonomy/taxonInfo/linkedData/index.ts","landingPages/taxonomy/taxonInfo/TaxonInfo.tsx","landingPages/taxonomy/main/Taxonomy.tsx","landingPages/taxonomy/main/data.tsx","landingPages/taxonomy/main/index.ts","landingPages/taxonomy/index.ts","landingPages/ontology/OntologyItem.tsx","landingPages/ontology/Children/Term.tsx","landingPages/ontology/Children/index.tsx","landingPages/ontology/Parents/Term.tsx","landingPages/ontology/Parents/index.tsx","landingPages/ontology/Nav/index.tsx","landingPages/ontology/TermLink.tsx","landingPages/ontology/Detail/LinkedObjects/LinkedObjectsDB.ts","landingPages/ontology/Detail/LinkedObjects/view.tsx","landingPages/ontology/Detail/LinkedObjects/data.tsx","landingPages/ontology/Detail/LinkedObjects/index.ts","landingPages/ontology/Detail/index.tsx","landingPages/ontology/Main/index.tsx","landingPages/ontology/index.ts","components/dispatcher/Dispatcher.tsx","components/dispatcher/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["RelationEngineAPIClient","relationEngineID","classRe","taxonomyRe","ontologyRe","Promise","resolve","reject","m","exec","collection","rest","length","Error","timestamp","namespace","id","timestampString","parseInt","Date","now","created","expired","getTime","more","DynamicServiceClient","module","ObjectClass","LoadingStatus","RelationEngineCollection","TaxonomyNamespace","OntologyNamespace","OntologySource","OntologyRelation","GOSynonymScope","AppActions","relationEngineCollectionToString","TAXONOMY","ONTOLOGY","taxonomyNamespaceToString","NCBI","GTDB","stringToTaxonomyNamespace","stringToOntologyNamespace","GO","ontologyNamespaceToString","navigateSuccess","navigation","type","NAVIGATE_SUCCESS","navigate","dispatch","getState","a","NAVIGATE_START","console","log","userAuthorization","auth","url","app","config","services","ServiceWizard","reClient","token","getNodeInfo","nodeInfo","ViewType","ref","error","message","NAVIGATE_ERROR","state","action","trigger","RelationEngineNodeType","ViewStatus","reducer","baseState","baseReducer","makeInitialStoreState","makeBaseStoreState","NONE","DBStatus","DB","props","db","stopped","onUpdate","this","data","initialData","updateFun","forceComponentUpdate","TaxonomyAPIClient","ns","ts","params","callFunc","result","offset","limit","searchTerm","search_text","taxon_ns","taxon_id","TaxonomyModel","taxonomyClient","TaxonAPIClient","taxonRef","getLineage","taxons","results","map","taxonResult","isBiological","scientific_name","name","rank","ncbiID","NCBI_taxon_id","geneticCode","gencode","aliases","category","options","getChildren","taxa","total_count","getTaxon","taxon","getAssociatedWorkspaceObjects","linkedAt","edge","updated_at","objectID","ws_obj","object_id","workspaceID","workspace_id","version","objectName","createdAt","epoch","workspaceUpdatedAt","TaxonDB","set","status","LOADING","client","LOADED","targetTaxon","selectedTaxon","ERROR","code","source","SourceInfo","className","src","style","height","alt","width","href","target","rel","React","Component","TaxonItem","hovering","selectTaxonRef","hash","String","join","window","parent","location","ev","setState","Fragment","onClick","clickNavigateToTaxon","bind","clickTaxon","isActive","renderActive","renderOver","renderNormal","classNames","push","tooltipTitle","borderBottom","title","placement","key","onMouseEnter","onMouseLeave","renderItem","TaxonChildrenDB","serviceWizardURL","page","pageSize","RELOADING","totalCount","total","TaxonList","navigateToTaxonRef","index","selectedTaxonRef","selectTaxon","navigateToTaxon","description","image","PRESENTED_IMAGE_SIMPLE","renderNoItems","renderItemsPlain","ErrorView","color","renderMessage","TaxonChildren","fetchChildren","Intl","NumberFormat","useGrouping","format","currentItem","lastItem","size","renderTitleLoaded","renderTitleReLoading","term","disabled","marginBottom","Search","placeholder","onSearch","doSearch","totalItems","maxItems","tip","renderTaxaLoaded","renderTaxaNone","renderTaxaLoading","renderTaxaReLoading","renderTaxaError","showLessItems","hideOnSinglePage","defaultPageSize","current","onChange","changePage","renderPaginationNone","renderPaginationLoading","renderPaginationError","renderPaginationLoaded","renderPaginationReLoading","renderTitle","renderSearch","renderPagination","renderTaxa","renderChildren","Data","forceUpdate","get","renderError","renderSuccess","connect","DataComponent","LineageDB","lineage","Lineage","renderLoading","renderLoaded","LineageNavigator","count","selectedRef","renderLineage","renderTargetTaxon","TaxonSummary","nameStyle","fontStyle","geneticCodesMap","geneticCodes","Array","ensureGeneticCodes","reduce","label","Map","TaxonDetailNCBI","stringSorter","b","fixedA","replace","fixedB","localeCompare","dataSource","pagination","scroll","y","rowKey","bordered","Column","dataIndex","defaultSortOrder","sorter","renderAliases","renderTaxonDetail","TaxonDetail","getProp","obj","propPath","defaultValue","split","TypeError","temp","i","undefined","AsyncComponentLoadingState","NotFound","WIKIPEDIA_API_URL","Wikipedia","proposedTerm","chars","validChar","filter","char","lookupTerm","scrubTerm","getWikipediaInfo","then","imageUrl","pageUrl","introText","pageId","matchingTerms","exactMatch","getPage","wikiResponse","all","getImage","parse","pageid","getPageInfo","pageInfo","terms","fetchPage","apiUrl","URL","query","searchParams","fetch","toString","method","headers","accept","json","pop","ex","catch","err","apiURL","Loading","wikipediaClient","canceled","WikipediaClient","wikipediaInfo","content","marked","overflow","dangerouslySetInnerHTML","__html","fontSize","textAlign","display","flexDirection","flex","renderMatch","alignSelf","marginLeft","renderWikipediaLogoCredit","paddingRight","marginRight","overflowY","renderArticle","renderImage","findTerm","updateInfo","renderWikipediaInfo","renderNone","TaxonDescription","renderTaxonDescription","notBiological","LinkedDataDB","getLinkedObjects","linkedObjects","LinkedData","linkedObject","render","workspaceId","headerStyle","tooltip","DateTimeFormat","renderLinkedObjects","fetchLinkedObjects","prevProps","TaxonInfo","defaultActiveKey","animated","TabPane","tab","forceRender","Taxonomy","setTitle","span","navigateToTaxonREf","renderTaxonInfo","currentlyNavigatedTaxonRef","getSelectedTaxon","margin","getTargetTaxon","previousProps","sendTitle","ownProps","relationEngineId","OntologyItem","selectTermRef","clickNavigateToTerm","clickTerm","OntologyList","termRef","navigateToTermRef","selectedTermRef","selectTerm","navigateToTerm","Nav","goID","children","relation","IS_A","PART_OF","parents","TermLink","newWindow","renderGOLink","LinkedObjectsDB","object","scientificName","feature","LinkedObjects","renderTable","Detail","synonyms","s","definition","comment","renderSynonyms","exact","narrow","broad","tabs","component","renderDetail","OntologyView","isObsolete","related","renderLayout","Main","Dispatcher","rootState","RootState","HOSTED","DEVELOP","renderNavigationNone","renderNavigationSome","path","addEventListener","newURL","parseHash","renderRootState","renderNavigation","renderUnauthorized","root","store","createStore","compose","applyMiddleware","thunk","App","storeUnsubscribe","last","view","subscribe","runtime","Object","keys","some","required","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f633a0c.chunk.js","sourcesContent":["import { RelationEngineID } from '../redux/store';\nimport { DynamicServiceClient } from '@kbase/ui-lib';\n\n// A collection is a top level division of the re data model\nexport type Collection = 'taxonomy' | 'ontology';\n\n// export type TaxonSource = 'ncbi' | 'gtdb';\n// export type OntologySource = 'go';\n\nexport interface GetNodeInfoResultBase {\n    collection: Collection;\n    // source: string;\n    created: number;\n    expired: number;\n    timestamp: number;\n}\n\nexport interface GetNodeInfoResultTaxon extends GetNodeInfoResultBase {\n    collection: 'taxonomy';\n    // source: TaxonSource;\n    namespace: string;\n    id: string;\n}\n\nexport interface GetNodeInfoResultOntology extends GetNodeInfoResultBase {\n    collection: 'ontology';\n    // source: OntologySource;\n    namespace: string;\n    id: string;\n}\n\nexport type GetNodeInfoResult = GetNodeInfoResultTaxon | GetNodeInfoResultOntology;\n\n// export interface GetNodeInfoResult<T, S> {\n//     type: NodeType;\n//     created: number;\n//     source: TaxonSource | OntologySource;\n//     version: string;\n// }\n\nexport default class RelationEngineAPIClient extends DynamicServiceClient {\n    static module: string = 'relation_engine_api';\n    async getNodeInfo(relationEngineID: RelationEngineID): Promise<[GetNodeInfoResult]> {\n        const classRe = /^(.*?)\\/(.*)$/;\n        const taxonomyRe = /^([^/]+)\\/([^/]+)(?:\\/([^/]+))?$/;\n        const ontologyRe = /^([^/]+)\\/([^/]+)(?:\\/([^/]+))?$/;\n        return new Promise<[GetNodeInfoResult]>((resolve, reject) => {\n            let m = classRe.exec(relationEngineID);\n            if (!m) {\n                reject(new Error('Invalid relation engine ID ' + relationEngineID));\n                return;\n            }\n            const [, collection, rest] = m;\n            // const [collection] = relationEngineID.split('/');\n            switch (collection) {\n                case 'taxonomy': (() => {\n                    m = taxonomyRe.exec(rest);\n                    if (!m) {\n                        reject(new Error('Taxonomy ref is '));\n                        return;\n                    }\n                    if (m.length !== 4) {\n                        reject(new Error('Invalid relation engine id \"' + relationEngineID + '\"'));\n                    }\n                    const [, namespace, id, timestampString] = m;\n                    let timestamp: number;\n                    if (!timestampString) {\n                        timestamp = Date.now();\n                    } else {\n                        timestamp = parseInt(timestampString, 10);\n                    }\n\n                    switch (namespace) {\n                        case 'ncbi_taxonomy':\n                            resolve([\n                                {\n                                    collection: 'taxonomy',\n                                    namespace: namespace,\n                                    id: id,\n                                    timestamp,\n                                    created: Date.now(),\n                                    expired: new Date(2055, 5, 5).getTime()\n                                }\n                            ]);\n                            return;\n                        default:\n                            reject(new Error('Unrecognized taxonomy namespace \"' + namespace + '\"'));\n                            return;\n                    }\n                })();\n                    break;\n                case 'ontology':\n                    m = ontologyRe.exec(rest);\n                    if (!m) {\n                        reject(new Error('Taxonomy ref is '));\n                        return;\n                    }\n                    const [, namespace, id, ...more] = m;\n                    let timestamp: number;\n                    if (more.length) {\n                        timestamp = parseInt(more[0]);\n                    } else {\n                        timestamp = Date.now();\n                    }\n                    switch (namespace) {\n                        case 'go_ontology':\n                            resolve([\n                                {\n                                    collection: 'ontology',\n                                    namespace,\n                                    id,\n                                    timestamp,\n                                    created: Date.now(),\n                                    expired: new Date(2055, 5, 5).getTime()\n                                }\n                            ]);\n                            return;\n                        default:\n                            reject(new Error('Ontology namespace not found \"' + namespace + '\"'));\n                            return;\n                    }\n                default:\n                    reject(new Error(`Collection ${collection} does not resolve to a type`));\n            }\n        });\n    }\n}\n","// import { OntologySource } from './ontology';\n// import { TaxonomySource } from './taxonomy';\n\ntype JSONValue = string | number | boolean | null | JSONObject | JSONArray;\n\ninterface JSONArray extends Array<JSONValue> { };\n\ninterface JSONObject {\n    [x: string]: JSONValue\n}\n\nexport interface UIError {\n    code: string;\n    source: string;\n    message: string;\n    data?: JSONValue;\n}\n\nexport class UIException extends Error {\n    code: string;\n    source: string;\n    message: string;\n    data?: JSONValue;\n    constructor({ message, code, source, data }: { message: string, code: string, source: string, data?: JSONValue }) {\n        super(message);\n        this.code = code;\n        this.source = source;\n        this.message = message;\n        this.data = data;\n    }\n}\n\n// export type NodeSource = TaxonomySource | OntologySource;\n\nexport enum ObjectClass {\n    TAXONOMY,\n    ONTOLOGY\n}\n\nexport enum LoadingStatus {\n    NONE,\n    LOADING,\n    LOADED,\n    ERROR\n}\n\nexport interface NoneState {\n    status: LoadingStatus.NONE;\n}\n\nexport interface LoadingState {\n    status: LoadingStatus.LOADING;\n}\n\nexport interface ErrorState {\n    status: LoadingStatus.ERROR;\n    message: string;\n}\n\nexport interface LoadedState {\n    status: LoadingStatus.LOADED;\n}\n\nexport enum RelationEngineCollection {\n    TAXONOMY,\n    ONTOLOGY\n}\n\nexport function relationEngineCollectionToString(collection: RelationEngineCollection): string {\n    switch (collection) {\n        case RelationEngineCollection.TAXONOMY:\n            return 'taxonomy';\n        case RelationEngineCollection.ONTOLOGY:\n            return 'ontology';\n    }\n}\n\nexport function stringToRelationEngineCollection(collection: string): RelationEngineCollection {\n    switch (collection) {\n        case 'taxonomy':\n            return RelationEngineCollection.TAXONOMY;\n        case 'ontology':\n            return RelationEngineCollection.ONTOLOGY;\n        default:\n            throw new Error('Unrecognized relation engine collection name \"' + collection + '\"');\n\n    }\n}\n\n// export enum RelationEngineNamespace {\n// }\n\nexport type RelationEngineNamespace = any;\n\nexport type RelationEngineID = string;\n\nexport type RelationEngineTimestamp = number;\n\n\nexport interface RelationEngineReference {\n    collection: RelationEngineCollection,\n    namespace: RelationEngineNamespace,\n    id: RelationEngineID;\n    timestamp: RelationEngineTimestamp;\n}","import { RelationEngineReference, RelationEngineCollection } from \".\";\n\nexport enum TaxonomyNamespace {\n    NCBI,\n    GTDB\n}\n\nexport function taxonomyNamespaceToString(namespace: TaxonomyNamespace) {\n    switch (namespace) {\n        case TaxonomyNamespace.NCBI:\n            return 'ncbi_taxonomy';\n        case TaxonomyNamespace.GTDB:\n            return 'gtdb';\n    }\n}\n\nexport function stringToTaxonomyNamespace(namespace: string) {\n    switch (namespace) {\n        case 'ncbi_taxonomy':\n            return TaxonomyNamespace.NCBI;\n        case 'gtdb':\n            return TaxonomyNamespace.GTDB;\n        default:\n            throw new Error('Unrecognized namespace \"' + namespace + '\"');\n    }\n}\n\nexport interface TaxonReferenceBase extends RelationEngineReference {\n    collection: RelationEngineCollection.TAXONOMY,\n    namespace: TaxonomyNamespace;\n}\n\nexport interface TaxonReferenceNCBI extends TaxonReferenceBase {\n    namespace: TaxonomyNamespace.NCBI;\n}\n\nexport interface TaxonReferenceGTDB extends TaxonReferenceBase {\n    namespace: TaxonomyNamespace.GTDB;\n}\n\nexport type TaxonReference = TaxonReferenceNCBI | TaxonReferenceGTDB;\n\n\nexport interface TaxonAlias {\n    category: string;\n    name: string;\n}\n\nexport interface TaxonBase {\n    ref: TaxonReference,\n    name: string;\n    rank: string;\n    isBiological: boolean;\n}\n\n\nexport interface NCBITaxon extends TaxonBase {\n    ref: TaxonReferenceNCBI;\n    ncbiID: number;\n    geneticCode: number;\n    aliases: Array<TaxonAlias>;\n}\n\nexport interface GTDBTaxon extends TaxonBase {\n    ref: TaxonReferenceGTDB;\n}\n\nexport type Taxon = NCBITaxon | GTDBTaxon;\n\n\n","import { RelationEngineReference, RelationEngineCollection } from \".\";\n\n// Ontology Term Reference\n\nexport enum OntologyNamespace {\n    GO\n}\n\nexport function stringToOntologyNamespace(namespace: string): OntologyNamespace {\n    switch (namespace) {\n        case 'go_ontology':\n            return OntologyNamespace.GO;\n        default:\n            throw new Error('Ontology namespace not supported: ' + namespace);\n    }\n}\n\nexport function ontologyNamespaceToString(namespace: OntologyNamespace): string {\n    switch (namespace) {\n        case OntologyNamespace.GO:\n            return 'go_ontology';\n    }\n}\n\n\nexport interface OntologyReferenceBase extends RelationEngineReference {\n    collection: RelationEngineCollection.ONTOLOGY,\n    namespace: OntologyNamespace;\n}\n\nexport interface OntologyReferenceGO extends OntologyReferenceBase {\n    namespace: OntologyNamespace.GO;\n}\n\nexport type OntologyReference = OntologyReferenceGO\n\n\n// export type OntologyID = string;\n\nexport enum OntologySource {\n    GO\n}\nexport enum OntologyRelation {\n    IS_A = 'OntologyRelation$is_a',\n    PART_OF = 'OntologyRelation$part_of'\n}\n\n// Brief term - for list displays\n\nexport interface OntologyTermBriefBase {\n    // type: OntologySource;\n    ref: OntologyReference;\n    // id: OntologyID;\n    name: string;\n    // relation: OntologyRelation\n}\n\nexport interface GOOntologyTermBrief extends OntologyTermBriefBase {\n    // type: OntologySource.GO\n    ref: OntologyReferenceGO\n    goID: string;\n}\n\nexport type OntologyTermBrief = GOOntologyTermBrief;\n\nexport type OntologyRelatedTermBrief = {\n    relation: OntologyRelation,\n    term: OntologyTermBrief\n}\n\nexport interface OntologyTermRelatedBrief extends OntologyTermBrief {\n    relation: OntologyRelation\n}\n\n// Term - the full term info for detail\n\nexport interface OntologyTermBase {\n    ref: OntologyReference;\n    // type: OntologySource;\n    // id: OntologyID;\n    name: string;\n    relation: OntologyRelation;\n    namespace: string;\n    comment: string | null;\n    definition: string;\n    isObsolete: boolean;\n}\n\nexport enum GOSynonymScope {\n    EXACT,\n    NARROW,\n    BROAD,\n    RELATED\n}\n\nexport type Synonym = string;\n\n// export interface GOSynonym {\n//     name: string;\n//     scope: GOSynonymScope;\n// }\n\nexport interface GOSynonyms {\n    exact: Array<Synonym>;\n    narrow: Array<Synonym>;\n    broad: Array<Synonym>;\n    related: Array<Synonym>;\n}\n\nexport interface GOOntologyTerm extends OntologyTermBase {\n    type: OntologySource.GO;\n    synonyms: GOSynonyms;\n    goID: string;\n}\n\nexport type OntologyTerm = GOOntologyTerm;\n\nexport interface OntologyTermRelated extends OntologyTerm {\n    related: OntologyRelation\n}\n\nexport interface OntologyRelatedTerm {\n    relation: OntologyRelation,\n    term: OntologyTerm\n}\n\n/* Linked Objects */\n\nexport interface WorkspaceType {\n    module: string;\n    name: string;\n}\nexport type WorkspaceID = number;\nexport type ObjectID = number;\nexport type ObjectVersion = number;\nexport interface WorkspaceObjectReference {\n    workspaceID: WorkspaceID;\n    id: ObjectID;\n    version: ObjectVersion;\n}\n\nexport interface LinkedObject {\n    object: WorkspaceObjectReference;\n    type: WorkspaceType,\n    scientificName: string;\n    feature: string;\n}","import { Action } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { StoreState, RelationEngineID, NavigationSome, ViewType } from './store';\nimport RelationEngineAPIClient from '../lib/RelationEngineAPIClient';\nimport { RelationEngineCollection } from '../types';\nimport { stringToTaxonomyNamespace } from '../types/taxonomy';\nimport { stringToOntologyNamespace } from '../types/ontology';\n// import * as uiLib from '@kbase/ui-lib';\n\nexport enum AppActions {\n    NAVIGATE = 'kbase-ui-plugin-landing-pages/navigate',\n    NAVIGATE_START = 'kbase-ui-plugin-landing-pages/navigate/start',\n    NAVIGATE_SUCCESS = 'kbase-ui-plugin-landing-pages/navigate/success',\n    NAVIGATE_ERROR = 'kbase-ui-plugin-landing-pages/navigate/error'\n}\n\nexport interface Navigate extends Action<AppActions.NAVIGATE> {\n    type: AppActions.NAVIGATE;\n    relationEngineID: RelationEngineID;\n}\n\nexport interface NavigateStart extends Action<AppActions.NAVIGATE_START> {\n    type: AppActions.NAVIGATE_START;\n}\n\nexport interface NavigateSuccess extends Action<AppActions.NAVIGATE_SUCCESS> {\n    type: AppActions.NAVIGATE_SUCCESS;\n    navigation: NavigationSome;\n    // relationEngineID: RelationEngineID;\n    // relationEngineNodeType: RelationEngineNodeType;\n    // viewType: ViewType;\n    // view: LandingPageView;\n}\n\nexport interface NavigateError extends Action<AppActions.NAVIGATE_ERROR> {\n    type: AppActions.NAVIGATE_ERROR;\n    message: string;\n}\n\nexport function navigateStart(): NavigateStart {\n    return {\n        type: AppActions.NAVIGATE_START\n    };\n}\n\nexport function navigateError(message: string): NavigateError {\n    return {\n        type: AppActions.NAVIGATE_ERROR,\n        message\n    }\n}\n\nexport function navigateSuccess(\n    navigation: NavigationSome\n    // viewType: ViewType,\n    // relationEngineID: RelationEngineID\n    // relationEngineNodeType: RelationEngineNodeType,\n\n    // view: LandingPageView\n): NavigateSuccess {\n    return {\n        type: AppActions.NAVIGATE_SUCCESS,\n        navigation\n        // relationEngineID,\n        // relationEngineNodeType,\n        // viewType\n        // view\n    };\n}\n\nexport function navigate(relationEngineID: RelationEngineID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(navigateStart());\n\n        console.log('navigating...', relationEngineID);\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        ServiceWizard: { url }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            return;\n        }\n\n        const reClient = new RelationEngineAPIClient({\n            url,\n            token: userAuthorization.token\n        });\n\n        try {\n            const [nodeInfo] = await reClient.getNodeInfo(relationEngineID);\n            switch (nodeInfo.collection) {\n                case 'taxonomy':\n                    // TODO: add source info here, or let the taxonomy landing page do\n                    // it by itself? I think it is better to do it after the first dispatch\n                    // here, because then the landing page can fold it into its type system,\n                    // rather than requiring the top level to do that. E.g. source->enum.\n                    dispatch(navigateSuccess({\n                        type: ViewType.TAXONOMY,\n                        ref: {\n                            collection: RelationEngineCollection.TAXONOMY,\n                            namespace: stringToTaxonomyNamespace(nodeInfo.namespace),\n                            id: nodeInfo.id,\n                            timestamp: nodeInfo.timestamp\n                        }\n                    }));\n                    // const x = {\n                    //     type: ViewType.TAXONOMY,\n                    //     ref: {\n                    //         collection: RelationEngineCollection.TAXONOMY,\n                    //         namespace: stringToTaxonomyNamespace(nodeInfo.namespace),\n                    //         id: nodeInfo.id,\n                    //         timestamp: nodeInfo.timestamp\n                    //     }\n                    // };\n                    break;\n                case 'ontology':\n                    dispatch(navigateSuccess({\n                        type: ViewType.ONTOLOGY,\n                        ref: {\n                            collection: RelationEngineCollection.ONTOLOGY,\n                            namespace: stringToOntologyNamespace(nodeInfo.namespace),\n                            id: nodeInfo.id,\n                            timestamp: nodeInfo.timestamp\n                        }\n                    }));\n                    break;\n            }\n        } catch (ex) {\n            console.error('ERROR', ex);\n            dispatch(navigateError(ex.message));\n        }\n\n    };\n}\n","import { Action, Reducer } from 'redux';\nimport { baseReducer, BaseStoreState } from '@kbase/ui-components';\nimport { StoreState } from './store';\nimport { AppActions, NavigateSuccess } from './actions';\n\nfunction navigateSuccess(state: StoreState, action: NavigateSuccess): StoreState {\n    return {\n        ...state,\n        // view: {\n        //     status: ViewStatus.LOADED,\n        //     relationEngineID: action.relationEngineID,\n        //     relationEngineNodeType: action.relationEngineNodeType,\n        //     viewType: action.viewType,\n        //     currentView: action.view\n        // }\n        navigation: action.navigation,\n        trigger: Date.now()\n    };\n}\n\n// function navigateStart(state: StoreState, action: NavigateStart): StoreState {\n//     return {\n//         ...state,\n//         view: {\n//             status: ViewStatus.LOADING\n//         }\n//     };\n// }\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    const baseState = baseReducer(state as BaseStoreState, action);\n    if (baseState) {\n        return baseState as StoreState;\n    }\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        // case AppActions.NAVIGATE_START:\n        //     return navigateStart(state, action as NavigateStart);\n        case AppActions.NAVIGATE_SUCCESS:\n            return navigateSuccess(state, action as NavigateSuccess);\n    }\n    return state;\n};\n\nexport default reducer;\n","import { BaseStoreState, makeBaseStoreState } from '@kbase/ui-components';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducers';\n\nimport { TaxonomyStoreState } from '../landingPages/taxonomy/redux/store';\nimport { TaxonReference } from '../types/taxonomy';\nimport { OntologyReference } from '../types/ontology';\n\nexport enum ViewType {\n    NONE,\n    TAXONOMY,\n    ONTOLOGY\n}\n\nexport type RelationEngineID = string;\nexport enum RelationEngineNodeType {\n    TAXON,\n    ONTOLOGY_TERM\n}\n\nexport enum ViewStatus {\n    NONE,\n    LOADING,\n    LOADED,\n    ERROR\n}\n\nexport interface RelationEngineViewBase {\n    status: ViewStatus;\n}\n\nexport interface RelationEngineViewNone {\n    status: ViewStatus.NONE;\n}\n\nexport interface RelationEngineViewLoading {\n    status: ViewStatus.LOADING;\n}\n\nexport interface RelationEngineViewLoaded {\n    status: ViewStatus.LOADED;\n    relationEngineID: RelationEngineID;\n    relationEngineNodeType: RelationEngineNodeType;\n    viewType: ViewType;\n    currentView: LandingPageView;\n}\n\nexport interface RelationEngineViewError {\n    status: ViewStatus.ERROR;\n    message: string;\n}\n\nexport type RelationEngineView =\n    | RelationEngineViewNone\n    | RelationEngineViewLoading\n    | RelationEngineViewLoaded\n    | RelationEngineViewError;\n\nexport interface LandingPageStoreState { }\n\n// VIEW STATE\n\nexport interface ViewStateNone<T> {\n    status: ViewStatus.NONE;\n}\n\nexport interface ViewStateLoading<T> {\n    status: ViewStatus.LOADING;\n    type: T;\n}\n\nexport interface ViewStateError<T> {\n    status: ViewStatus.ERROR;\n    error: string;\n    type: T;\n}\n\nexport interface ViewStateLoaded<T, S> {\n    status: ViewStatus.LOADED;\n    type: T;\n    state: S;\n}\nexport type ViewState<T, S> = ViewStateNone<T> | ViewStateLoading<T> | ViewStateLoaded<T, S> | ViewStateError<T>;\n\nexport type TaxonomyView = ViewState<ViewType.TAXONOMY, TaxonomyStoreState>;\n\nexport interface NavigationBase {\n    type: ViewType;\n    relationEngineID: RelationEngineID;\n}\n\nexport interface NavigationNone {\n    type: ViewType.NONE;\n}\n\nexport interface NavigationTaxonomy {\n    type: ViewType.TAXONOMY;\n    ref: TaxonReference\n    // namespace: string;\n    // id: string;\n    // timestamp?: number\n    // relationEngineID: RelationEngineID;\n}\n\nexport interface NavigationOntology {\n    type: ViewType.ONTOLOGY;\n    ref: OntologyReference\n    // namespace: string;\n    // id: string;\n    // timestamp?: number\n    // relationEngineID: RelationEngineID;\n}\n\nexport type NavigationSome = NavigationTaxonomy | NavigationOntology;\nexport type Navigation = NavigationNone | NavigationSome;\n\n// export interface ViewState<T, S> {\n//     type: T;\n//     state: S;\n// }\n\nexport type LandingPageView = TaxonomyView;\n\n// STORE STATE type definition\nexport interface StoreState extends BaseStoreState {\n    // viewer: TaxonView | null;\n    // view: RelationEngineView;\n    navigation: Navigation;\n    trigger: number;\n}\n\n// Store Construction\nexport function makeInitialStoreState(): StoreState {\n    const baseStoreState = makeBaseStoreState();\n    return {\n        ...baseStoreState,\n        // viewer: null,\n        navigation: {\n            type: ViewType.NONE\n        },\n        trigger: 0\n    };\n}\n\nexport function createReduxStore() {\n    return createStore(reducer, makeInitialStoreState(), compose(applyMiddleware(thunk)));\n}\n","import { UIError } from \"../types\";\n\nexport interface DBProps<T> {\n    onUpdate: () => void;\n    initialData: T;\n}\n\nexport interface TheDB<T> {\n    data: T;\n}\n\nexport enum DBStatus {\n    NONE,\n    LOADING,\n    LOADED,\n    RELOADING,\n    ERROR\n}\n\nexport interface DBStateNone {\n    status: DBStatus.NONE;\n}\n\nexport interface DBStateLoading {\n    status: DBStatus.LOADING;\n}\n\nexport interface DBStateReLoading {\n    status: DBStatus.RELOADING;\n}\n\nexport interface DBStateLoaded {\n    status: DBStatus.LOADED;\n}\n\nexport interface DBStateError {\n    status: DBStatus.ERROR;\n    error: UIError;\n}\n\nexport default class DB<T> {\n    db: TheDB<T>;\n    stopped: boolean;\n    onUpdate: () => void;\n    constructor(props: DBProps<T>) {\n        this.onUpdate = props.onUpdate;\n        this.db = {\n            data: props.initialData\n        };\n        this.stopped = false;\n    }\n\n    forceComponentUpdate() {\n        if (this.stopped) {\n            return;\n        }\n        this.onUpdate();\n    }\n\n    set(updateFun: (state: T) => T) {\n        this.db.data = updateFun(this.db.data);\n        this.forceComponentUpdate();\n    }\n\n    get(): T {\n        return this.db.data;\n    }\n\n    stop() {\n        this.stopped = true;\n    }\n}\n","import { DynamicServiceClient, DynamicServiceClientParams } from '@kbase/ui-lib';\n\ninterface TaxonomyAPIParams extends DynamicServiceClientParams { }\n\ntype TaxonID = string;\n\ninterface GetAncestorsParams {\n    id: TaxonID;\n}\n\ninterface GetDescendentsParams {\n    id: TaxonID;\n}\n\n// interface GetTaxonResultSuccess {\n//     count: true;\n//     taxon: Taxon;\n// }\n\n// interface GetTaxonResultNotFound {\n//     found: false;\n// }\n\n// type GetTaxonResult = GetTaxonResultSuccess | GetTaxonResultNotFound;\n\ninterface TaxonAlias {\n    canonical: Array<string>;\n    category: string;\n    name: string;\n}\n\ninterface TaxonResult {\n    NCBI_taxon_id: number;\n    _id: string;\n    _key: string;\n    _rev: string;\n    id: string;\n    ns: string;\n    ts: number;\n    aliases: Array<TaxonAlias>;\n    canonical_scientific_name: Array<string>;\n    gencode: string;\n    rank: string;\n    scientific_name: string;\n}\n\nexport interface GetTaxonParams {\n    ns: string;\n    id: TaxonID;\n    ts: number\n}\n\ninterface GetTaxonResult {\n    count: number;\n    cursor_id: number | null;\n    has_more: false;\n    stats: {\n        executionTime: number;\n        filtered: number;\n        httpRequests: number;\n        scannedFull: number;\n        scannedIndex: number;\n        writesExecuted: number;\n        writesIgnored: number;\n    };\n    results: Array<TaxonResult>;\n    ts: number;\n}\n\ninterface GetLineageResult {\n    stats: {\n        executionTime: number;\n        filtered: number;\n        httpRequests: number;\n        scannedFull: number;\n        scannedIndex: number;\n        writesExecuted: number;\n        writesIgnored: number;\n    };\n    results: Array<TaxonResult>;\n    ts: number;\n}\n\ninterface GetChildrenResult {\n    stats: {\n        executionTime: number;\n        filtered: number;\n        httpRequests: number;\n        scannedFull: number;\n        scannedIndex: number;\n        writesExecuted: number;\n        writesIgnored: number;\n    };\n    results: Array<TaxonResult>;\n    total_count: number;\n    ts: number;\n}\nexport interface Stats {\n    executionTime: number;\n    filtered: number;\n    httpRequests: number;\n    scannedFull: number;\n    scannedIndex: number;\n    writesExecuted: number;\n    writesIgnored: number;\n}\nexport interface GetAssociatedWorkspaceObjectsResultResult {\n    edge: {\n        _id: string;\n        assigned_by: string;\n        updated_at: number;\n    };\n    ws_obj: {\n        _id: string;\n        deleted: boolean;\n        epoch: number;\n        hash: string;\n        is_public: boolean;\n        name: string;\n        object_id: number;\n        size: number;\n        updated_at: number;\n        version: number;\n        workspace_id: number;\n    };\n}\n\nexport interface GetAssociatedWorkspaceObjectsResult {\n    results: Array<GetAssociatedWorkspaceObjectsResultResult>;\n    total_results: number;\n    stats: Stats;\n    ts: number;\n}\n\nexport interface GetLineageParams {\n    ns: string;\n    id: TaxonID;\n    ts: number;\n}\n\nexport interface GetChildrenParams {\n    ns: string;\n    id: TaxonID;\n    ts: number;\n    offset: number;\n    limit: number;\n    search_text: string;\n}\n\nexport interface GetAssociatedWorkspaceObjectsParams {\n    taxon_ns: string;\n    taxon_id: TaxonID;\n    ts: number;\n    limit: number;\n    offset: number;\n}\n\nexport default class TaxonomyAPIClient extends DynamicServiceClient {\n    static module: string = 'taxonomy_re_api';\n\n    async getLineage({ ns, id, ts }: { ns: string, id: TaxonID, ts: number }): Promise<GetLineageResult> {\n        const params: GetLineageParams = {\n            ns, id, ts\n        };\n        const [result] = await this.callFunc<[GetLineageParams], [GetLineageResult]>('get_lineage', [\n            params\n        ]);\n        return result;\n    }\n\n    async getChildren({\n        ns,\n        id,\n        ts,\n        offset,\n        limit,\n        searchTerm\n    }: {\n        ns: string,\n        id: TaxonID,\n        ts: number,\n        offset: number,\n        limit: number,\n        searchTerm: string\n    }): Promise<GetChildrenResult> {\n        const [result] = await this.callFunc<[GetChildrenParams], [GetChildrenResult]>('get_children', [\n            {\n                ns, id, ts,\n                offset,\n                limit,\n                search_text: searchTerm\n            }\n        ]);\n        return result;\n    }\n\n    async getTaxon({ ns, id, ts }: { ns: string, id: TaxonID, ts: number }): Promise<GetTaxonResult> {\n        const params: GetTaxonParams = {\n            ns, id, ts\n        }\n        const [result] = await this.callFunc<[GetTaxonParams], [GetTaxonResult]>('get_taxon', [\n            params\n        ]);\n        return result;\n    }\n\n    async getAssociatedWorkspaceObjects({\n        taxon_ns,\n        taxon_id,\n        ts,\n        offset,\n        limit\n    }: {\n        taxon_ns: string,\n        taxon_id: TaxonID,\n        ts: number,\n        offset: number,\n        limit: number\n    }): Promise<GetAssociatedWorkspaceObjectsResult> {\n        const params: GetAssociatedWorkspaceObjectsParams = {\n            taxon_ns, taxon_id, ts, limit, offset\n        }\n        const [result] = await this.callFunc<[GetAssociatedWorkspaceObjectsParams], [GetAssociatedWorkspaceObjectsResult]>('get_associated_ws_objects', [\n            params\n        ]);\n        return result;\n    }\n}\n","import { TaxonReference, Taxon, TaxonomyNamespace, NCBITaxon, taxonomyNamespaceToString } from '../../../types/taxonomy';\nimport TaxonAPIClient from './TaxonAPIClient';\nimport { RelationEngineCollection } from '../../../types';\n\n// const INITIAL_BATCH_SIZE = 100;\n// const BATCH_SIZE = 1000;\n// const TOTAL_LIMIT = 10000;\n// const PARALLELISM = 2;\n\nexport interface GetChildrenOptions {\n    offset: number;\n    limit: number;\n    searchTerm: string;\n}\n\nexport interface LinkedObject {\n    linkedAt: number;\n    workspaceID: number;\n    objectID: number;\n    version: number;\n    objectName: string;\n    workspaceUpdatedAt: number;\n    createdAt: number;\n}\n\nexport interface GetLinkedObjectsOptions {\n    offset: number;\n    limit: number;\n}\n\nexport class TaxonomyModel {\n    taxonomyClient: TaxonAPIClient;\n    constructor({ token, url }: { token: string; url: string }) {\n        this.taxonomyClient = new TaxonAPIClient({ token, url });\n    }\n\n    async getLineage(taxonRef: TaxonReference): Promise<Array<Taxon>> {\n        const {\n            namespace, id, timestamp\n        } = taxonRef;\n        const result = await this.taxonomyClient.getLineage({\n            ns: taxonomyNamespaceToString(namespace),\n            id,\n            ts: timestamp\n        });\n        // TODO: should be conditional based on the source of the taxonomy??\n        const taxons: Array<NCBITaxon> = result.results.map((taxonResult) => {\n            let isBiological: boolean;\n            if (taxonResult.scientific_name === 'root' || taxonResult.scientific_name === 'cellular organisms') {\n                isBiological = false;\n            } else {\n                isBiological = true;\n            }\n            return {\n                ref: {\n                    collection: RelationEngineCollection.TAXONOMY,\n                    namespace: TaxonomyNamespace.NCBI,\n                    id: taxonResult.id,\n                    timestamp: result.ts\n                },\n                name: taxonResult.scientific_name,\n                rank: taxonResult.rank,\n                ncbiID: taxonResult.NCBI_taxon_id,\n                geneticCode: parseInt(taxonResult.gencode),\n                aliases: taxonResult.aliases.map(({ name, category }) => {\n                    return {\n                        name,\n                        category\n                    };\n                }),\n                isBiological\n            };\n        });\n        return taxons;\n    }\n\n    async getChildren(taxonRef: TaxonReference, options: GetChildrenOptions): Promise<[Array<Taxon>, number]> {\n        const {\n            namespace, id, timestamp\n        } = taxonRef;\n\n        const result = await this.taxonomyClient.getChildren({\n            ns: taxonomyNamespaceToString(namespace),\n            id,\n            ts: timestamp,\n            offset: options.offset,\n            limit: options.limit,\n            searchTerm: options.searchTerm\n        });\n\n        const taxa: Array<NCBITaxon> = result.results.map((taxonResult) => {\n            let isBiological: boolean;\n            if (taxonResult.scientific_name === 'root' || taxonResult.scientific_name === 'cellular organisms') {\n                isBiological = false;\n            } else {\n                isBiological = true;\n            }\n            return {\n                ref: {\n                    collection: RelationEngineCollection.TAXONOMY,\n                    namespace: TaxonomyNamespace.NCBI,\n                    id: taxonResult.id,\n                    timestamp: result.ts\n                },\n                name: taxonResult.scientific_name,\n                rank: taxonResult.rank,\n                ncbiID: taxonResult.NCBI_taxon_id,\n                geneticCode: parseInt(taxonResult.gencode),\n                aliases: taxonResult.aliases.map(({ name, category }) => {\n                    return {\n                        name,\n                        category\n                    };\n                }),\n                isBiological\n            };\n        });\n        return [taxa, result.total_count];\n    }\n\n    // async getChildrenx(taxonID: TaxonID, options: GetChildrenOptions): Promise<[Array<Taxon>, number, number]> {\n    //     // Loop over results until done!\n    //     // Get the first batch. In the majority of cases, this will be it.\n\n    //     const getBatch = async (batch: number, batchSize: number): Promise<[Array<Taxon>, number]> => {\n    //         const offset = batch * batchSize;\n    //         const result = await this.taxonomyClient.getChildren({\n    //             taxonID,\n    //             offset,\n    //             limit: batchSize\n    //         });\n\n    //         const taxa = result.results.map((taxonResult) => {\n    //             let isBiological: boolean;\n    //             if (taxonResult.scientific_name === 'root' || taxonResult.scientific_name === 'cellular organisms') {\n    //                 isBiological = false;\n    //             } else {\n    //                 isBiological = true;\n    //             }\n    //             return {\n    //                 type: TaxonomySource.NCBI,\n    //                 id: taxonResult._id,\n    //                 name: taxonResult.scientific_name,\n    //                 rank: taxonResult.rank,\n    //                 ncbiID: taxonResult.NCBI_taxon_id,\n    //                 geneticCode: parseInt(taxonResult.gencode),\n    //                 aliases: taxonResult.aliases.map(({ name, category }) => {\n    //                     return {\n    //                         name,\n    //                         category\n    //                     };\n    //                 }),\n    //                 isBiological\n    //             };\n    //         });\n    //         return [taxa, result.total_count];\n    //     };\n\n    //     const [taxa, totalCount] = await getBatch(0, INITIAL_BATCH_SIZE);\n\n    //     if (totalCount <= taxa.length) {\n    //         return [taxa, totalCount, totalCount];\n    //     }\n\n    //     // Here we cap the total results requested to TOTAL_LIMIT\n    //     let totalLimit = Math.min(totalCount, TOTAL_LIMIT);\n\n    //     // How many batches do we need to fetch?\n    //     const totalBatchCount = Math.ceil((totalLimit - INITIAL_BATCH_SIZE) / BATCH_SIZE);\n\n    //     // In order to avoid overwhelming the service, we need to limit the\n    //     // # of concurrent requests.\n    //     const iterations = Math.ceil(totalBatchCount / PARALLELISM);\n\n    //     console.log('BATCHES', totalBatchCount, iterations);\n\n    //     let result = taxa;\n\n    //     console.log('taxa', taxa);\n\n    //     for (let iter = 0; iter < iterations; iter += 1) {\n    //         const pendingBatches: Array<Promise<[Array<Taxon>, number]>> = [];\n\n    //         const batchCount = Math.min(PARALLELISM, totalBatchCount - iter * PARALLELISM);\n\n    //         console.log(`iter ${iter}`);\n\n    //         for (let batch = 0; batch < batchCount; batch += 1) {\n    //             const offset = iter * PARALLELISM + batch;\n    //             const batchSize = Math.min(BATCH_SIZE, totalLimit - offset * BATCH_SIZE);\n    //             console.log('BATCH SIZE', batchSize, iter, batch, totalLimit - offset * BATCH_SIZE);\n    //             pendingBatches.push(getBatch(offset, batchSize));\n    //             // const [nextResult] = await getBatch(i);\n    //             // console.log('adding another batch', nextResult);\n    //             // result = result.concat(nextResult);\n    //         }\n\n    //         const batches = await Promise.all(pendingBatches);\n\n    //         result = result.concat.apply(\n    //             result,\n    //             batches.map(([taxa, count]) => {\n    //                 return taxa;\n    //             })\n    //         );\n    //     }\n\n    //     return [result, totalCount, totalLimit];\n    // }\n\n    async getTaxon(taxonRef: TaxonReference): Promise<Taxon> {\n        const {\n            namespace, id, timestamp\n        } = taxonRef;\n\n        const result = await this.taxonomyClient.getTaxon({\n            ns: taxonomyNamespaceToString(namespace),\n            id,\n            ts: timestamp\n        });\n\n        // if (!result.count) {\n        //     throw new Error(`Taxon not found`);\n        // }\n        const taxonResult = result.results[0];\n        let isBiological: boolean;\n        if (taxonResult.scientific_name === 'root' || taxonResult.scientific_name === 'cellular organisms') {\n            isBiological = false;\n        } else {\n            isBiological = true;\n        }\n\n        // TODO: here and above, we need to determine the namespace enum value by \n        // comparing the string coming in...\n        const taxon: Taxon = {\n            ref: {\n                collection: RelationEngineCollection.TAXONOMY,\n                namespace: TaxonomyNamespace.NCBI,\n                id: taxonResult.id,\n                timestamp: result.ts\n            },\n            name: taxonResult.scientific_name,\n            rank: taxonResult.rank,\n            ncbiID: taxonResult.NCBI_taxon_id,\n            geneticCode: parseInt(taxonResult.gencode),\n            aliases: taxonResult.aliases.map(({ name, category }) => {\n                return {\n                    name,\n                    category\n                };\n            }),\n            isBiological\n        };\n        return taxon;\n    }\n\n    async getLinkedObjects(taxonRef: TaxonReference, options: GetLinkedObjectsOptions): Promise<Array<LinkedObject>> {\n        const params = {\n            taxon_ns: taxonomyNamespaceToString(taxonRef.namespace),\n            taxon_id: taxonRef.id,\n            ts: taxonRef.timestamp,\n            offset: options.offset,\n            limit: options.limit\n        };\n        const result = await this.taxonomyClient.getAssociatedWorkspaceObjects(params);\n\n        return result.results.map((result) => {\n            return {\n                linkedAt: result.edge.updated_at,\n                objectID: result.ws_obj.object_id,\n                workspaceID: result.ws_obj.workspace_id,\n                version: result.ws_obj.version,\n                objectName: result.ws_obj.name,\n                createdAt: result.ws_obj.epoch,\n                workspaceUpdatedAt: result.ws_obj.updated_at\n            }\n        })\n    }\n}\n\n","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../../../lib/DB';\nimport { AppConfig } from '@kbase/ui-components';\nimport { Taxon, TaxonReference } from '../../../types/taxonomy';\nimport { TaxonomyModel } from '../lib/model';\n\nexport type TaxonDBStateNone = DBStateNone;\nexport type TaxonDBStateLoading = DBStateLoading;\nexport type TaxonDBStateError = DBStateError;\n\nexport interface TaxonDBStateLoaded extends DBStateLoaded {\n    targetTaxon: Taxon;\n    selectedTaxon: Taxon;\n}\n\nexport type TaxonDBState = TaxonDBStateNone | TaxonDBStateLoading | TaxonDBStateLoaded | TaxonDBStateError;\n\nexport interface TaxonDBProps extends DBProps<TaxonDBState> {\n    token: string;\n    config: AppConfig;\n}\n\n// TODO: make props part of generic\nexport default class TaxonDB extends DB<TaxonDBState> {\n    props: TaxonDBProps;\n    constructor(props: TaxonDBProps) {\n        super(props);\n        this.props = props;\n    }\n    async getTargetTaxon(taxonRef: TaxonReference) {\n        try {\n            this.set((state: TaxonDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADING\n                };\n            });\n\n            const client = new TaxonomyModel({\n                token: this.props.token,\n                url: this.props.config.services.ServiceWizard.url\n            });\n\n            const taxon = await client.getTaxon(taxonRef);\n            this.set((state: TaxonDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    targetTaxon: taxon,\n                    selectedTaxon: taxon\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: TaxonDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    error: {\n                        code: 'not-found',\n                        source: 'TaxonDB.getTargetTaxon',\n                        message: ex.message,\n                    }\n                };\n            });\n        }\n    }\n\n    async getSelectedTaxon(taxonRef: TaxonReference) {\n        try {\n            // this.set((state: TaxonDBState) => {\n            //     return {\n            //         ...state,\n            //         status: DBStatus.LOADING\n            //     };\n            // });\n\n            const client = new TaxonomyModel({\n                token: this.props.token,\n                url: this.props.config.services.ServiceWizard.url\n            });\n\n            const taxon = await client.getTaxon(taxonRef);\n            this.set((state: TaxonDBState) => {\n                return {\n                    ...state,\n                    selectedTaxon: taxon\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: TaxonDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    error: {\n                        code: 'not-found',\n                        source: 'TaxonDB.getSelectedTaxon',\n                        message: ex.message,\n                    }\n                };\n            });\n        }\n    }\n}\n","import React from 'react';\nimport './SourceInfo.css';\n\nexport interface SourceInfoProps {}\n\ninterface SourceInfoState {}\n\nexport class SourceInfo extends React.Component<SourceInfoProps, SourceInfoState> {\n    render() {\n        return (\n            <div className=\"Row\">\n                <div className=\"Col-auto\">\n                    <img src=\"images/ncbi-logo.jpg\" style={{ height: '64px' }} alt=\"NCBI Logo\" />\n                </div>\n                <div className=\"Col\">\n                    <div className=\"InfoTable\">\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                                Source\n                            </div>\n                            <div className=\"InfoTable-dataCol\">\n                                <a\n                                    href=\"https://www.ncbi.nlm.nih.gov/guide/taxonomy/\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    NCBI\n                                </a>\n                            </div>\n                        </div>\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                                Version\n                            </div>\n                            <div className=\"InfoTable-dataCol\">SOME VERSION</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Taxon, TaxonReference, taxonomyNamespaceToString } from '../../types/taxonomy';\nimport { Tooltip, Icon } from 'antd';\nimport './TaxonItem.css';\nimport { relationEngineCollectionToString } from '../../types';\n\nexport interface Props {\n    taxon: Taxon;\n    isActive: boolean;\n    selectTaxonRef: (ref: TaxonReference) => void;\n    navigateToTaxonRef: (ref: TaxonReference) => void;\n}\n\ninterface State {\n    hovering: boolean;\n}\n\nexport default class TaxonItem extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            hovering: false\n        };\n    }\n    clickTaxon() {\n        this.props.selectTaxonRef(this.props.taxon.ref);\n    }\n    clickNavigateToTaxon() {\n        // const fixedID = this.props.taxon.id.replace('/', ':');\n        const hash = [\n            'review',\n            relationEngineCollectionToString(this.props.taxon.ref.collection),\n            taxonomyNamespaceToString(this.props.taxon.ref.namespace),\n            this.props.taxon.ref.id,\n            String(this.props.taxon.ref.timestamp)\n        ].join('/');\n        // const hash = `review/${fixedID}`;\n        // TODO: use the integration api?\n        if (window.parent) {\n            window.parent.location.hash = hash;\n        } else {\n            window.location.hash = hash;\n        }\n        // window.history.pushState({}, 'my title', `/#review/${this.props.taxon.id}`);\n        // this.props.navigateToTaxonID(this.props.taxon.id);\n    }\n\n    onMouseEnter(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: true });\n    }\n\n    onMouseLeave(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: false });\n    }\n\n    renderOver() {\n        return (\n            <React.Fragment>\n                <div className=\"TaxonItem-name\" onClick={this.clickNavigateToTaxon.bind(this)}>\n                    {this.props.taxon.name}\n                </div>\n                <div className=\"TaxonItem-inspector\" onClick={this.clickTaxon.bind(this)}>\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderActive() {\n        return (\n            <React.Fragment>\n                <div className=\"TaxonItem-name\" onClick={this.clickNavigateToTaxon.bind(this)}>\n                    {this.props.taxon.name}\n                </div>\n                <div className=\"TaxonItem-inspector\">\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderNormal() {\n        return (\n            <React.Fragment>\n                <div className=\"TaxonItem-name\">{this.props.taxon.name}</div>\n            </React.Fragment>\n        );\n    }\n\n    renderItem() {\n        if (this.props.isActive) {\n            return this.renderActive();\n        }\n        if (this.state.hovering) {\n            return this.renderOver();\n        } else {\n            return this.renderNormal();\n        }\n    }\n\n    render() {\n        const taxon = this.props.taxon;\n        const classNames = ['TaxonItem'];\n        if (this.props.isActive) {\n            classNames.push('TaxonItem-active');\n        }\n\n        const tooltipTitle = (\n            <div>\n                <div style={{ borderBottom: '1px solid silver' }}>{taxon.name}</div>\n                <div>{taxon.rank}</div>\n            </div>\n        );\n\n        return (\n            <Tooltip title={tooltipTitle} placement=\"right\">\n                <div\n                    className={classNames.join(' ')}\n                    key={this.props.taxon.ref.id}\n                    onMouseEnter={this.onMouseEnter.bind(this)}\n                    onMouseLeave={this.onMouseLeave.bind(this)}\n                >\n                    {this.renderItem()}\n                </div>\n            </Tooltip>\n        );\n    }\n}\n","import DB, {\n    DBProps,\n    DBStatus,\n    DBStateNone,\n    DBStateLoading,\n    DBStateLoaded,\n    DBStateError,\n    DBStateReLoading\n} from '../../../lib/DB';\nimport { AppConfig } from '@kbase/ui-components';\nimport { Taxon, TaxonReference } from '../../../types/taxonomy';\nimport { TaxonomyModel } from '../lib/model';\n\nexport type TaxonDBStateNone = DBStateNone;\nexport type TaxonDBStateLoading = DBStateLoading;\nexport type TaxonDBStateError = DBStateError;\n\nexport interface TaxonDBStateLoaded extends DBStateLoaded {\n    taxa: Array<Taxon>;\n    total: number;\n    page: number;\n    pageSize: number;\n}\n\nexport interface TaxonDBStateReLoading extends DBStateReLoading {\n    taxa: Array<Taxon>;\n    total: number;\n    page: number;\n    pageSize: number;\n}\n\nexport type TaxonDBState =\n    | TaxonDBStateNone\n    | TaxonDBStateLoading\n    | TaxonDBStateLoaded\n    | TaxonDBStateReLoading\n    | TaxonDBStateError;\n\nexport interface TaxonDBProps extends DBProps<TaxonDBState> {\n    token: string;\n    config: AppConfig;\n}\n\nexport default class TaxonChildrenDB extends DB<TaxonDBState> {\n    token: string;\n    serviceWizardURL: string;\n    constructor(props: TaxonDBProps) {\n        super(props);\n        this.token = props.token;\n        this.serviceWizardURL = props.config.services.ServiceWizard.url;\n    }\n    // Remember, pages are 1 based; offset is 0 based.\n    // async fetchTaxa(taxonID: TaxonID, page: number, pageSize: number) {\n    //     try {\n    //         this.set((state: TaxonDBState) => {\n    //             return {\n    //                 ...state,\n    //                 status: DBStatus.LOADING\n    //             };\n    //         });\n\n    //         const client = new TaxonomyModel({\n    //             token: this.token,\n    //             url: this.serviceWizardURL\n    //         });\n\n    //         const offset = (page - 1) * pageSize;\n    //         const limit = pageSize;\n\n    //         const [taxa, totalCount] = await client.getChildren(taxonID, {\n    //             offset,\n    //             limit\n    //         });\n    //         this.set((state: TaxonDBState) => {\n    //             return {\n    //                 ...state,\n    //                 status: DBStatus.LOADED,\n    //                 taxa,\n    //                 total: totalCount,\n    //                 page,\n    //                 pageSize\n    //             };\n    //         });\n    //     } catch (ex) {\n    //         console.error('ERROR', ex);\n    //         this.set((state: TaxonDBState) => {\n    //             return {\n    //                 status: DBStatus.ERROR,\n    //                 message: ex.message\n    //             };\n    //         });\n    //     }\n    // }\n\n    async fetchChildren({\n        taxonRef,\n        page,\n        pageSize,\n        searchTerm\n    }: {\n        taxonRef: TaxonReference;\n        page: number;\n        pageSize: number;\n        searchTerm: string;\n    }) {\n        try {\n            this.set((state: TaxonDBState) => {\n                if (state.status === DBStatus.LOADED) {\n                    return {\n                        ...state,\n                        status: DBStatus.RELOADING\n                    };\n                } else {\n                    return {\n                        ...state,\n                        status: DBStatus.LOADING\n                    };\n                }\n            });\n\n            const client = new TaxonomyModel({\n                token: this.token,\n                url: this.serviceWizardURL\n            });\n\n            const offset = (page - 1) * pageSize;\n            const limit = pageSize;\n\n            const [taxa, totalCount] = await client.getChildren(taxonRef, {\n                offset,\n                limit,\n                searchTerm\n            });\n            this.set((state: TaxonDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    taxa,\n                    total: totalCount,\n                    page,\n                    pageSize\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: TaxonDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    error: {\n                        code: 'not-found',\n                        source: 'TaxonChildrenDB.fetchChildren',\n                        message: ex.message,\n                    }\n                };\n            });\n        }\n    }\n}\n","import React from 'react';\nimport { Taxon, TaxonReference } from '../../types/taxonomy';\nimport './TaxonList.css';\nimport TaxonItem from './TaxonItem';\nimport { Empty } from 'antd';\n\nexport interface Props {\n    taxa: Array<Taxon>;\n    maxItems: number;\n    totalItems: number;\n    selectedTaxonRef: TaxonReference | null;\n    selectTaxonRef: (ref: TaxonReference) => void;\n    navigateToTaxonRef: (ref: TaxonReference) => void;\n}\n\ninterface State { }\n\nexport default class TaxonList extends React.Component<Props, State> {\n    selectTaxon(ref: TaxonReference) {\n        this.props.selectTaxonRef(ref);\n    }\n    navigateToTaxon(ref: TaxonReference) {\n        this.props.navigateToTaxonRef(ref);\n    }\n    renderItemsPlain() {\n        return this.props.taxa.map((taxon, index) => {\n            const isActive = this.props.selectedTaxonRef !== null &&\n                this.props.selectedTaxonRef.id === taxon.ref.id;\n            return (\n                <TaxonItem\n                    taxon={taxon}\n                    isActive={isActive}\n                    selectTaxonRef={this.selectTaxon.bind(this)}\n                    key={String(index)}\n                    navigateToTaxonRef={this.navigateToTaxon.bind(this)}\n                />\n            );\n        });\n    }\n    renderNoItems() {\n        return <Empty description=\"No Children\" image={Empty.PRESENTED_IMAGE_SIMPLE} />;\n    }\n    render() {\n        if (this.props.taxa.length === 0) {\n            return this.renderNoItems();\n        }\n        return this.renderItemsPlain();\n    }\n}\n","import React from 'react';\nimport { UIError } from \"../types\";\nimport { Alert, Icon } from 'antd';\n\nexport interface ErrorViewProps {\n    error: UIError\n}\n\ninterface ErrorViewState {\n\n}\n\nexport default class ErrorView extends React.Component<ErrorViewProps, ErrorViewState> {\n    renderMessage() {\n        return (\n            // <Icon type=\"exclamation-circle\" />\n            <span>\n                <Icon type=\"exclamation-circle\" style={{ color: 'red' }} />\n                {' '}\n                {this.props.error.message}\n            </span>\n        )\n    }\n    render() {\n        return (\n            <Alert type=\"error\" message={this.renderMessage()}></Alert>\n        )\n    }\n}","import React from 'react';\nimport { Pagination, Icon, Input, Spin } from 'antd';\nimport TaxonList from '../TaxonList';\nimport { TaxonReference } from '../../../types/taxonomy';\nimport { TaxonDBState, TaxonDBStateError, TaxonDBStateLoaded, TaxonDBStateReLoading } from './TaxonChildrenDB';\nimport { DBStatus } from '../../../lib/DB';\nimport './index.css';\nimport ErrorView from '../../../components/ErrorView';\n\nconst DEFAULT_PAGE_SIZE = 10;\n\nexport interface Props {\n    db: TaxonDBState;\n    taxonRef: TaxonReference;\n    selectedTaxonRef: TaxonReference | null;\n    // taxa: Array<Taxon>;\n    // total: number;\n    selectTaxonRef: (taxonRef: TaxonReference) => void;\n    navigateToTaxonRef: (taxonRef: TaxonReference) => void;\n    fetchChildren: (taxonRef: TaxonReference, page: number, pageSize: number, searchTerm: string) => void;\n}\n\nexport interface State { }\n\nexport default class TaxonChildren extends React.Component<Props, State> {\n    searchTerm: string;\n    page: number;\n    pageSize: number | null;\n    constructor(props: Props) {\n        super(props);\n        this.searchTerm = '';\n        this.page = 1;\n        this.pageSize = null;\n    }\n    componentDidMount() {\n        this.props.fetchChildren(this.props.taxonRef, 1, DEFAULT_PAGE_SIZE, '');\n    }\n    renderTaxaNone() {\n        return <div>None</div>;\n    }\n    renderTaxaLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderTitleLoaded(db: TaxonDBStateLoaded | TaxonDBStateReLoading) {\n        if (db.total === 0) {\n            return <div className=\"Col-auto TaxonChildren-box-title\">No Children</div>;\n        }\n\n        const totalCount = Intl.NumberFormat('en-US', {\n            useGrouping: true\n        }).format(db.total);\n        const currentItem = (db.page - 1) * db.pageSize + 1;\n        const lastItem = currentItem + db.taxa.length - 1;\n\n        return (\n            <div className=\"Col-auto TaxonChildren-box-title\">\n                Children ({currentItem}-{lastItem} of {totalCount})\n            </div>\n        );\n    }\n\n    renderTitleReLoading(db: TaxonDBStateReLoading) {\n        return <Spin size=\"small\">{this.renderTitleLoaded(db)}</Spin>;\n    }\n\n    renderTitle() {\n        const db = this.props.db;\n        switch (db.status) {\n            case DBStatus.NONE:\n            case DBStatus.LOADING:\n                return <div>Loading...</div>;\n            case DBStatus.ERROR:\n                return <ErrorView error={db.error} />\n            case DBStatus.LOADED:\n                return this.renderTitleLoaded(db);\n            case DBStatus.RELOADING:\n                return this.renderTitleReLoading(db);\n        }\n    }\n    doSearch(term: string) {\n        this.searchTerm = term;\n        this.props.fetchChildren(this.props.taxonRef, 1, this.pageSize || DEFAULT_PAGE_SIZE, term);\n    }\n    renderSearch() {\n        const disabled =\n            this.props.db.status !== DBStatus.LOADED ||\n            (this.props.db.total <= this.props.db.pageSize && !this.searchTerm);\n        return (\n            <div style={{ marginBottom: '4px' }}>\n                <Input.Search placeholder=\"Search Children\" onSearch={this.doSearch.bind(this)} disabled={disabled} />\n            </div>\n        );\n    }\n    renderTaxaLoaded(db: TaxonDBStateLoaded | TaxonDBStateReLoading) {\n        return (\n            <React.Fragment>\n                <TaxonList\n                    taxa={db.taxa}\n                    selectedTaxonRef={this.props.selectedTaxonRef}\n                    selectTaxonRef={this.props.selectTaxonRef}\n                    navigateToTaxonRef={this.props.navigateToTaxonRef}\n                    totalItems={db.total}\n                    maxItems={DEFAULT_PAGE_SIZE}\n                />\n            </React.Fragment>\n        );\n    }\n    renderTaxaReLoading(db: TaxonDBStateReLoading) {\n        return <Spin tip=\"Loading\">{this.renderTaxaLoaded(db)}</Spin>;\n    }\n    renderTaxaError(db: TaxonDBStateError) {\n        return <ErrorView error={db.error} />\n    }\n    renderTaxa() {\n        switch (this.props.db.status) {\n            case DBStatus.NONE:\n                return this.renderTaxaNone();\n            case DBStatus.LOADING:\n                return this.renderTaxaLoading();\n            case DBStatus.LOADED:\n                return this.renderTaxaLoaded(this.props.db);\n            case DBStatus.RELOADING:\n                return this.renderTaxaReLoading(this.props.db);\n            case DBStatus.ERROR:\n                return this.renderTaxaError(this.props.db);\n        }\n    }\n    changePage(page: number, pageSize: number | undefined) {\n        this.page = page;\n        this.pageSize = pageSize || DEFAULT_PAGE_SIZE;\n        this.props.fetchChildren(this.props.taxonRef, this.page, this.pageSize, this.searchTerm);\n    }\n    renderPaginationNone() {\n        return <Pagination size=\"small\" showLessItems={true} hideOnSinglePage={false} />;\n    }\n    renderPaginationLoading() {\n        return <Pagination size=\"small\" showLessItems={true} hideOnSinglePage={false} />;\n    }\n    renderPaginationError() {\n        return <Pagination size=\"small\" showLessItems={true} hideOnSinglePage={false} />;\n    }\n    renderPaginationLoaded(db: TaxonDBStateLoaded) {\n        return (\n            <Pagination\n                size=\"small\"\n                defaultPageSize={db.pageSize}\n                // defaultCurrent={1}\n                showLessItems={true}\n                current={db.page}\n                hideOnSinglePage={false}\n                total={db.total}\n                onChange={this.changePage.bind(this)}\n            />\n        );\n    }\n    renderPaginationReLoading(db: TaxonDBStateReLoading) {\n        return (\n            <Pagination\n                size=\"small\"\n                defaultPageSize={db.pageSize}\n                // defaultCurrent={1}\n                showLessItems={true}\n                current={db.page}\n                hideOnSinglePage={false}\n                total={db.total}\n                disabled={true}\n            />\n        );\n    }\n    renderPagination() {\n        const db = this.props.db;\n        switch (db.status) {\n            case DBStatus.NONE:\n                return this.renderPaginationNone();\n            case DBStatus.LOADING:\n                return this.renderPaginationLoading();\n            case DBStatus.ERROR:\n                return this.renderPaginationError();\n            case DBStatus.LOADED:\n                return this.renderPaginationLoaded(db);\n            case DBStatus.RELOADING:\n                return this.renderPaginationReLoading(db);\n        }\n    }\n    renderChildren() {\n        return (\n            <div>\n                {this.renderTitle()}\n                {this.renderSearch()}\n                {this.renderPagination()}\n                {this.renderTaxa()}\n            </div>\n        );\n    }\n\n    render() {\n        return this.renderChildren();\n    }\n}\n","import React from 'react';\nimport TaxonDB, { TaxonDBState, TaxonDBStateError } from './TaxonChildrenDB';\nimport { DBStatus } from '../../../lib/DB';\n\nimport { AppConfig } from '@kbase/ui-components';\nimport TaxonChildren from './TaxonChildren';\nimport { TaxonReference } from '../../../types/taxonomy';\nimport { Alert } from 'antd';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    taxonRef: TaxonReference;\n    selectedTaxonRef: TaxonReference | null;\n    selectTaxonRef: (taxonRef: TaxonReference) => void;\n    navigateToTaxonRef: (taxonRef: TaxonReference) => void;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: TaxonDB;\n    constructor(props: Props) {\n        super(props);\n        this.db = new TaxonDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n    }\n\n    componentDidMount() {\n        // this.db.stop();\n    }\n\n    fetchChildren(taxonRef: TaxonReference, page: number, pageSize: number, searchTerm: string) {\n        return this.db.fetchChildren({ taxonRef, page, pageSize, searchTerm });\n    }\n\n    renderSuccess(db: TaxonDBState) {\n        return <TaxonChildren\n            db={db}\n            taxonRef={this.props.taxonRef}\n            selectedTaxonRef={this.props.selectedTaxonRef}\n            selectTaxonRef={this.props.selectTaxonRef}\n            navigateToTaxonRef={this.props.navigateToTaxonRef}\n            fetchChildren={this.fetchChildren.bind(this)}\n        />\n    }\n\n    renderError(db: TaxonDBStateError) {\n        return <Alert type=\"error\" message={db.error.message} />\n    }\n\n    renderTest() {\n        return \"test\";\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case (DBStatus.ERROR):\n                return this.renderError(db);\n            default:\n                // return this.renderTest()\n                return this.renderSuccess(db);\n        }\n    }\n}\n","import { AppConfig } from '@kbase/ui-components';\nimport { StoreState } from '../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps { }\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../../../lib/DB';\nimport { AppConfig } from '@kbase/ui-components';\nimport { Taxon, TaxonReference } from '../../../types/taxonomy';\nimport { TaxonomyModel } from '../lib/model';\n\nexport type LineageDBStateNone = DBStateNone;\nexport type LineageDBStateLoading = DBStateLoading;\nexport type LineageDBStateError = DBStateError;\n\nexport interface LineageDBStateLoaded extends DBStateLoaded {\n    lineage: Array<Taxon>;\n}\n\nexport type LineageDBState = LineageDBStateNone | LineageDBStateLoading | LineageDBStateLoaded | LineageDBStateError;\n\nexport interface LineageDBProps extends DBProps<LineageDBState> {\n    token: string;\n    config: AppConfig;\n}\n\n// TODO: make props part of generic\nexport default class LineageDB extends DB<LineageDBState> {\n    props: LineageDBProps;\n    constructor(props: LineageDBProps) {\n        super(props);\n        this.props = props;\n    }\n    async getLineage(taxonRef: TaxonReference) {\n        try {\n            this.set((state: LineageDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADING\n                };\n            });\n\n            const client = new TaxonomyModel({\n                token: this.props.token,\n                url: this.props.config.services.ServiceWizard.url\n            });\n            const lineage = await client.getLineage(taxonRef);\n            this.set((state: LineageDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    lineage\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: LineageDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    error: {\n                        code: 'not-found',\n                        source: 'LineageDB.getLineage',\n                        message: ex.message,\n                    }\n                };\n            });\n        }\n    }\n}\n","import React from 'react';\nimport { Taxon, TaxonReference } from '../../../types/taxonomy';\nimport TaxonList from '../TaxonList';\n\nexport interface Props {\n    lineage: Array<Taxon>;\n    selectedTaxonRef: TaxonReference;\n    selectTaxonRef: (ref: TaxonReference) => void;\n    navigateToTaxonRef: (ref: TaxonReference) => void;\n}\n\ninterface State { }\n\nexport default class Lineage extends React.Component<Props, State> {\n    render() {\n        return (\n            <TaxonList\n                taxa={this.props.lineage}\n                selectedTaxonRef={this.props.selectedTaxonRef}\n                selectTaxonRef={this.props.selectTaxonRef}\n                navigateToTaxonRef={this.props.navigateToTaxonRef}\n                totalItems={this.props.lineage.length}\n                maxItems={10}\n            />\n        );\n    }\n}\n","import React from 'react';\nimport LineageDB, { LineageDBStateLoaded } from './LineageDB';\nimport { DBStatus, DBStateError } from '../../../lib/DB';\n\nimport { AppConfig } from '@kbase/ui-components';\nimport Lineage from './Lineage';\nimport { TaxonReference } from '../../../types/taxonomy';\nimport { Icon } from 'antd';\nimport ErrorView from '../../../components/ErrorView';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    taxonRef: TaxonReference;\n    selectedTaxonRef: TaxonReference;\n    selectTaxonRef: (taxonRef: TaxonReference) => void;\n    navigateToTaxonRef: (taxonRef: TaxonReference) => void;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: LineageDB;\n    constructor(props: Props) {\n        super(props);\n        this.db = new LineageDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n    }\n\n    componentDidMount() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                this.db.getLineage(this.props.taxonRef);\n        }\n    }\n\n    componentWillUnmount() {\n        // this.db.stop();\n    }\n\n    renderLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderError(db: DBStateError) {\n        return <ErrorView error={db.error} />\n    }\n\n    renderLoaded(db: LineageDBStateLoaded) {\n        return (\n            <Lineage\n                lineage={db.lineage}\n                selectedTaxonRef={this.props.selectedTaxonRef}\n                selectTaxonRef={this.props.selectTaxonRef}\n                navigateToTaxonRef={this.props.navigateToTaxonRef}\n            />\n        );\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                // this.db.getLineage(this.props.taxonRef);\n                return this.renderLoading();\n            case DBStatus.LOADING:\n                return this.renderLoading();\n            case DBStatus.ERROR:\n                return this.renderError(db);\n            case DBStatus.LOADED:\n                return this.renderLoaded(db);\n        }\n    }\n}\n","import { AppConfig } from '@kbase/ui-components';\nimport { StoreState } from '../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps { }\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import React from 'react';\nimport { Taxon, TaxonReference } from '../../types/taxonomy';\nimport './LineageNavigator.css';\nimport TaxonItem from './TaxonItem';\nimport TaxonChildren from './taxonChildren';\nimport Lineage from './lineage';\n\nexport interface LineageProps {\n    selectedTaxon: Taxon;\n    targetTaxon: Taxon;\n    selectTaxonRef: (ref: TaxonReference) => void;\n    navigateToTaxonRef: (ref: TaxonReference) => void;\n}\n\ninterface LineageState { }\n\nexport default class LineageNavigator extends React.Component<LineageProps, LineageState> {\n    onClick(ref: TaxonReference) {\n        this.props.selectTaxonRef(ref);\n        // alert('navigate to ' + taxonId);\n    }\n\n    // menuSelected(param: SelectParam) {\n    //     this.props.selectTaxonRef(param.key);\n    //     // alert('navigate to ' + param.key);\n    // }\n\n    clickTaxon(taxon: Taxon) {\n        this.props.selectTaxonRef(taxon.ref);\n    }\n\n    renderLineage() {\n        return (\n            <Lineage\n                taxonRef={this.props.targetTaxon.ref}\n                selectedTaxonRef={this.props.selectedTaxon.ref}\n                selectTaxonRef={this.props.selectTaxonRef}\n                navigateToTaxonRef={this.props.navigateToTaxonRef}\n            />\n        );\n        // return 'disabled';\n    }\n\n    renderChildrenCount(count: number) {\n        if (count === 0) {\n            return <div className=\"\">No children</div>;\n        }\n        if (count === 1) {\n            return <div>One child</div>;\n        }\n        return (\n            <div>\n                {Intl.NumberFormat('en-US', {\n                    useGrouping: true\n                }).format(count)}{' '}\n                children\n            </div>\n        );\n    }\n\n    renderChildren() {\n        let selectedRef: TaxonReference | null;\n        if (this.props.selectedTaxon) {\n            selectedRef = this.props.selectedTaxon.ref;\n        } else {\n            selectedRef = null;\n        }\n\n        return (\n            <TaxonChildren\n                taxonRef={this.props.targetTaxon.ref}\n                selectedTaxonRef={selectedRef}\n                selectTaxonRef={this.props.selectTaxonRef}\n                navigateToTaxonRef={this.props.navigateToTaxonRef}\n            />\n        );\n    }\n\n    // renderChildrenxscrolling() {\n    //     let selectedId;\n    //     if (this.props.selectedTaxon) {\n    //         selectedId = this.props.selectedTaxon.id;\n    //     } else {\n    //         selectedId = null;\n    //     }\n\n    //     return (\n    //         <div className=\"scrolling\">\n    //             <TaxonList\n    //                 taxa={this.props.offspring}\n    //                 selectedTaxonID={selectedId}\n    //                 selectTaxonID={this.props.selectTaxonID}\n    //                 navigateToTaxonID={this.props.navigateToTaxonID}\n    //                 totalItems={this.props.totalOffspring}\n    //                 maxItems={10}\n    //             />\n    //         </div>\n    //     );\n    // }\n\n    renderTargetTaxon() {\n        const isActive =\n            this.props.selectedTaxon &&\n            this.props.selectedTaxon.ref.id === this.props.targetTaxon.ref.id &&\n            this.props.selectedTaxon.ref.timestamp === this.props.targetTaxon.ref.timestamp;\n\n        return (\n            <TaxonItem\n                taxon={this.props.targetTaxon}\n                isActive={isActive}\n                selectTaxonRef={this.props.selectTaxonRef}\n                navigateToTaxonRef={this.props.navigateToTaxonRef}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"Col scrollable\">\n                <div className=\"Col-auto Lineage-box\">\n                    <div className=\"Lineage-box-title\">Lineage</div>\n                    {this.renderLineage()}\n                </div>\n                <div className=\"Col-auto Lineage-box Lineage-target-taxon\">{this.renderTargetTaxon()}</div>\n                <div className=\"Col-auto scrollable Lineage-box\">{this.renderChildren()}</div>\n            </div>\n        );\n    }\n}\n","import React, { CSSProperties } from 'react';\nimport { Taxon } from '../../types/taxonomy';\n\nexport interface Props {\n    taxon: Taxon;\n}\n\nexport interface State { }\n\nexport default class TaxonSummary extends React.Component<Props, State> {\n    render() {\n        let nameStyle: CSSProperties = {};\n        if (this.props.taxon.rank === 'species') {\n            nameStyle = { fontStyle: 'italic' };\n        }\n        return (\n            <div className=\"InfoTable\">\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                        Name\n                    </div>\n                    <div className=\"InfoTable-dataCol\" style={nameStyle}>\n                        {this.props.taxon.name}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                        Rank\n                    </div>\n                    <div className=\"InfoTable-dataCol\">{this.props.taxon.rank}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { NCBITaxon, TaxonAlias } from '../../../types/taxonomy';\nimport { Table } from 'antd';\nimport geneticCodes from '../data/geneticCodes.json';\n\n// as Array<[number, string]>\n\ntype GeneticCodes = Array<[number, string]>;\n\nfunction ensureGeneticCodes(geneticCodes: any): GeneticCodes {\n    if (!(geneticCodes instanceof Array)) {\n        throw new Error('Invalid genetic codes file!');\n    }\n\n    return geneticCodes.map(([id, name]) => {\n        if (typeof id !== 'number') {\n            throw new Error('Invalid genetic code id in file');\n        }\n        if (typeof name !== 'string') {\n            throw new Error('Invalid genetic code label in file');\n        }\n        return [id, name];\n    });\n}\n\nconst gc = ensureGeneticCodes(geneticCodes);\n\nconst geneticCodesMap: Map<number, string> = gc.reduce((geneticCodesMap, [id, label]) => {\n    geneticCodesMap.set(id, label);\n    return geneticCodesMap;\n}, new Map<number, string>());\n\nexport interface TaxonDetailProps {\n    taxon: NCBITaxon;\n}\n\ninterface TaxonDetailState { }\n\nexport default class TaxonDetailNCBI extends React.Component<TaxonDetailProps, TaxonDetailState> {\n    renderAliases() {\n        const aliasNameSorter = (a: TaxonAlias, b: TaxonAlias) => {\n            return stringSorter(a.name, b.name);\n        };\n\n        const aliasCategorySorter = (a: TaxonAlias, b: TaxonAlias) => {\n            return stringSorter(a.category, b.category);\n        };\n\n        const stringSorter = (a: string, b: string) => {\n            const fixedA = a.replace(/^[\"']/, '');\n            const fixedB = b.replace(/^[\"']/, '');\n            return fixedA.localeCompare(fixedB);\n        };\n        return (\n            <Table\n                dataSource={this.props.taxon.aliases}\n                className=\"KBaseAntdOverride-remove-table-border\"\n                size=\"small\"\n                // pagination={{ position: 'top' }}\n                pagination={false}\n                scroll={{ y: '25em' }}\n                rowKey=\"name\"\n                bordered={false}\n            >\n                <Table.Column\n                    title=\"Name\"\n                    dataIndex=\"name\"\n                    key=\"name\"\n                    defaultSortOrder=\"ascend\"\n                    sorter={aliasNameSorter}\n                />\n                <Table.Column\n                    title=\"Category\"\n                    dataIndex=\"category\"\n                    key=\"category\"\n                    width=\"20em\"\n                    sorter={aliasCategorySorter}\n                />\n            </Table>\n        );\n    }\n\n    renderTaxonDetail() {\n        const width = '8em';\n        let nameStyle: React.CSSProperties = {};\n        if (this.props.taxon.rank === 'species') {\n            nameStyle.fontStyle = 'italic';\n        }\n        return (\n            <div className=\"InfoTable\">\n                <div className=\"InfoTable-row\" key=\"name\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        Name\n                    </div>\n                    <div className=\"InfoTable-dataCol\" style={nameStyle}>\n                        {this.props.taxon.name}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\" key=\"rank\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        Rank\n                    </div>\n                    <div className=\"InfoTable-dataCol\">{this.props.taxon.rank}</div>\n                </div>\n                <div className=\"InfoTable-row\" key=\"ncbiid\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        NCBI ID\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        <a\n                            href={`https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=info&id=${\n                                this.props.taxon.ncbiID\n                                }`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            {this.props.taxon.ncbiID}\n                        </a>\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\" key=\"genetic-code\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        Genetic Code\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.props.taxon.geneticCode} -{' '}\n                        {geneticCodesMap.get(this.props.taxon.geneticCode) || 'Unknown'}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\" key=\"aliases\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        Aliases\n                    </div>\n                    <div className=\"InfoTable-dataCol\">{this.renderAliases()}</div>\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return <div>{this.renderTaxonDetail()}</div>;\n    }\n}\n","import React from 'react';\nimport { Taxon, TaxonomyNamespace, NCBITaxon } from '../../../types/taxonomy';\nimport TaxonDetailNCBI from './TaxonDetailNCBI';\nimport { Alert } from 'antd';\n\nexport interface TaxonDetailProps {\n    taxon: Taxon;\n}\n\ninterface TaxonDetailState { }\n\nexport default class TaxonDetail extends React.Component<TaxonDetailProps, TaxonDetailState> {\n    render() {\n        const taxon = this.props.taxon;\n        switch (taxon.ref.namespace) {\n            case TaxonomyNamespace.NCBI:\n                // TODO: why does this not prove to TS that we have a NCBITaxon?\n                return <TaxonDetailNCBI taxon={taxon as NCBITaxon} />;\n            default:\n                return <Alert type=\"error\" message=\"This taxon type is not supported\" />;\n        }\n    }\n}\n","export function getProp<T>(obj: object, propPath: string | Array<string>, defaultValue: any): T {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length; i += 1) {\n        if (temp === undefined || typeof temp !== 'object' || temp === null) {\n            return defaultValue;\n        }\n        temp = temp[propPath[i]];\n    }\n    if (temp === undefined) {\n        return defaultValue;\n    }\n    return temp;\n}\n\nexport function hasProp(obj: object, propPath: string | Array<string>): boolean {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length; i += 1) {\n        if (temp === undefined || typeof temp !== 'object' || temp === null) {\n            return false;\n        }\n        temp = temp[propPath[i]];\n    }\n    if (temp === undefined) {\n        return false;\n    }\n    return true;\n}\n\nexport function setProp(obj: object, propPath: string | Array<string>, value: any) {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    if (propPath.length === 0) {\n        return;\n    }\n    // pop off the last property for setting at the end.\n    const propKey = propPath[propPath.length - 1];\n    let key;\n    // Walk the path, creating empty objects if need be.\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length - 1; i += 1) {\n        key = propPath[i];\n        if (temp[key] === undefined) {\n            temp[key] = {};\n        }\n        obj = temp[key];\n    }\n    // Finally set the property.\n    temp[propKey] = value;\n    return value;\n}\n\nexport function incrProp(obj: object, propPath: string | Array<string>, increment: number): number | undefined {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    if (propPath.length === 0) {\n        return;\n    }\n    increment = increment === undefined ? 1 : increment;\n    const propKey = propPath[propPath.length - 1];\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length - 1; i += 1) {\n        const key = propPath[i];\n        if (temp[key] === undefined) {\n            temp[key] = {};\n        }\n        temp = temp[key];\n    }\n    if (temp[propKey] === undefined) {\n        temp[propKey] = increment;\n    } else {\n        if (typeof temp[propKey] === 'number') {\n            temp[propKey] += increment;\n        } else {\n            throw new Error('Can only increment a number');\n        }\n    }\n    return temp[propKey];\n}\n\nexport function deleteProp(obj: object, propPath: string | Array<string>) {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    if (propPath.length === 0) {\n        return false;\n    }\n    const propKey = propPath[propPath.length - 1];\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length - 1; i += 1) {\n        const key = propPath[i];\n        if (temp[key] === undefined) {\n            // for idempotency, and utility, do not throw error if\n            // the key doesn't exist.\n            return false;\n        }\n        obj = temp[key];\n    }\n    if (temp[propKey] === undefined) {\n        return false;\n    }\n    delete temp[propKey];\n    return true;\n}\n\n// class Props {\n//     constructor(config = {}) {\n//         this.obj = config.data || {};\n//     }\n\n//     getItem(props, defaultValue) {\n//         return getProp(this.obj, props, defaultValue);\n//     }\n\n//     hasItem(propPath) {\n//         return hasProp(this.obj, propPath);\n\n//     }\n\n//     setItem(path, value) {\n//         return setProp(this.obj, path, value);\n//     }\n\n//     incrItem(path, increment) {\n//         return incrProp(this.obj, path, increment);\n//     }\n\n//     deleteItem(path) {\n//         return deleteProp(this.obj, path);\n//     }\n\n//     getRaw() {\n//         return this.obj;\n//     }\n// }\n\n// return Object.freeze({ Props, getProp, hasProp, setProp, incrProp, deleteProp });\n","import React from 'react';\n\nimport WikipediaClient, { WikipediaInfo } from '../landingPages/taxonomy/lib/Wikipedia';\nimport marked from 'marked';\nimport { Icon, Alert, Tooltip } from 'antd';\nimport Loading from './Loading';\nimport './Wikipedia.css';\n\nexport interface WikipediaProps {\n    term: string;\n}\n\nenum AsyncComponentLoadingState {\n    NONE,\n    LOADING,\n    LOADED,\n    ERROR\n}\n\ninterface StateNone {\n    state: AsyncComponentLoadingState.NONE;\n}\n\ninterface StateLoading {\n    state: AsyncComponentLoadingState.LOADING;\n}\n\ninterface StateLoaded {\n    state: AsyncComponentLoadingState.LOADED;\n    wikipediaInfo: WikipediaInfo;\n}\n\ninterface StateError {\n    state: AsyncComponentLoadingState.ERROR;\n    error: string;\n}\n\ntype WikipediaState = StateNone | StateLoading | StateLoaded | StateError;\n\nexport default class Wikipedia extends React.Component<WikipediaProps, WikipediaState> {\n    wikipediaClient: WikipediaClient;\n    canceled: boolean;\n    constructor(props: WikipediaProps) {\n        super(props);\n        this.wikipediaClient = new WikipediaClient();\n        this.canceled = false;\n        this.state = {\n            state: AsyncComponentLoadingState.NONE\n        };\n    }\n\n    componentWillUnmount() {\n        this.canceled = true;\n        // this.state = {\n        //     state: AsyncComponentLoadingState.CANCELED\n        // };\n    }\n\n    renderArticle(wikipediaInfo: WikipediaInfo) {\n        const content = marked(wikipediaInfo.introText);\n        return <div style={{ overflow: 'auto' }} dangerouslySetInnerHTML={{ __html: content }} />;\n    }\n\n    renderImage(wikipediaInfo: WikipediaInfo) {\n        if (!wikipediaInfo.imageUrl) {\n            return (\n                <div className=\"Wikipedia-empty-image\">\n                    <div className=\"-content\">Image not found</div>\n                </div>\n            );\n        }\n        return (\n            <div>\n                <img src={wikipediaInfo.imageUrl} style={{ width: '100%' }} alt={`${this.props.term}`} />\n            </div>\n        );\n    }\n\n    renderMatch(wikipediaInfo: WikipediaInfo) {\n        if (wikipediaInfo.exactMatch) {\n            const message = (\n                <React.Fragment>\n                    <Icon type=\"check\" style={{ color: 'green' }} /> Exact match on \"\n                    {wikipediaInfo.matchingTerms.join(' ')}\"\n                </React.Fragment>\n            );\n            return <Alert type=\"success\" message={message} />;\n        } else {\n            const message = (\n                <React.Fragment>\n                    <Icon type=\"warning\" style={{ color: 'orange' }} /> Inexact match on: \"\n                    {wikipediaInfo.matchingTerms.join(' ')}\"\n                </React.Fragment>\n            );\n            return <Alert type=\"warning\" message={message} />;\n        }\n    }\n\n    renderWikipediaLogoCredit() {\n        return (\n            <div>\n                <div style={{ borderBottom: '1px solid gray' }}>Link to the original Wikipedia entry</div>\n                <div style={{ fontSize: '80%' }}>\n                    <p style={{ textAlign: 'center' }}>\n                        credit:\n                        <a\n                            href=\"https://creativecommons.org/licenses/by-sa/3.0/\"\n                            title=\"Creative Commons Attribution-ShareAlike 3.0\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            CC BY-SA 3.0\n                        </a>\n                        <a\n                            href=\"https://en.wikipedia.org/w/index.php?curid=33285413\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Link\n                        </a>\n                    </p>\n                </div>\n            </div>\n        );\n    }\n\n    renderWikipediaInfo(wikipediaInfo: WikipediaInfo) {\n        return (\n            <div className=\"Row scrollable\">\n                <div className=\"Col Col-grow-2 scrollable\">\n                    <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '10px' }}>\n                        <div style={{ flex: '1 1 0px' }}>{this.renderMatch(wikipediaInfo)}</div>\n                        <div style={{ flex: '0 0 auto', alignSelf: 'center', marginLeft: '10px' }}>\n                            <div style={{ height: '32px', textAlign: 'center' }}>\n                                <Tooltip title={this.renderWikipediaLogoCredit()}>\n                                    <a href={wikipediaInfo.pageUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                                        <img\n                                            src=\"images/wikipedia-logo.svg\"\n                                            style={{ height: '100%' }}\n                                            alt=\"Wikipedia Logo\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                            </div>\n                            <div />\n                        </div>\n                    </div>\n                    <div\n                        className=\"scrollable\"\n                        style={{ flex: '2 1 0px', paddingRight: '4px', marginRight: '4px', overflowY: 'auto' }}\n                    >\n                        {this.renderArticle(wikipediaInfo)}\n                    </div>\n                </div>\n\n                <div className=\"Col Col-grow-1\" style={{ flex: '1 1 0px', marginLeft: '10px' }}>\n                    {this.renderImage(wikipediaInfo)}\n                </div>\n            </div>\n        );\n    }\n\n    updateInfo() {\n        const wikipediaClient = new WikipediaClient();\n        const { term } = this.props;\n        this.setState({\n            state: AsyncComponentLoadingState.LOADING\n        });\n        wikipediaClient\n            .findTerm(term)\n            .then((wikipediaInfo) => {\n                if (this.canceled) {\n                    return;\n                }\n                this.setState({\n                    state: AsyncComponentLoadingState.LOADED,\n                    wikipediaInfo\n                });\n            })\n            .catch((err) => {\n                if (this.canceled) {\n                    return;\n                }\n                return this.setState({\n                    state: AsyncComponentLoadingState.ERROR,\n                    error: err.message\n                });\n            });\n    }\n\n    componentDidMount() {\n        this.updateInfo();\n    }\n\n    componentDidUpdate(props: WikipediaProps, state: WikipediaState) {\n        if (props.term !== this.props.term) {\n            this.updateInfo();\n        }\n    }\n\n    renderNone() {\n        return <div />;\n    }\n\n    renderLoading() {\n        return <Loading message=\"Searching Wikipedia...\" />;\n    }\n\n    renderLoaded(state: StateLoaded) {\n        return this.renderWikipediaInfo(state.wikipediaInfo);\n    }\n\n    renderError(state: StateError) {\n        return <Alert type=\"error\" message={state.error} />;\n    }\n\n    render() {\n        if (this.canceled) {\n            return;\n        }\n        switch (this.state.state) {\n            case AsyncComponentLoadingState.NONE:\n                return this.renderNone();\n            case AsyncComponentLoadingState.LOADING:\n                return this.renderLoading();\n            case AsyncComponentLoadingState.LOADED:\n                return this.renderLoaded(this.state);\n            case AsyncComponentLoadingState.ERROR:\n                return this.renderError(this.state);\n        }\n    }\n}\n","import * as props from './props';\n\nexport interface WikipediaInfo {\n    imageUrl: string;\n    pageUrl: string;\n    introText: string;\n    title: string;\n    pageId: number;\n    exactMatch: boolean;\n    matchingTerms: Array<string>;\n}\n\ninterface WikipediaParse {\n    headhtml: Map<string, string>;\n    pageid: number;\n    redirects: Array<string>;\n    text: Map<string, string>;\n    title: string;\n}\n\nclass NotFound extends Error {\n    constructor(message: string) {\n        super(message);\n\n        this.name = 'NotFound';\n    }\n}\n\nconst WIKIPEDIA_API_URL = 'https://en.wikipedia.org/w/api.php';\nconst IMAGE_SIZE = 500;\n\nexport default class Wikipedia {\n    scrubTerm(proposedTerm: string): string {\n        // convervatively, remove all non-alpha characters\n        const chars = proposedTerm.split('');\n        const validChar = /[\\w \\s]/;\n        const newChars = chars.filter((char) => {\n            if (validChar.exec(char)) {\n                return true;\n            }\n            return false;\n        });\n        return newChars.join('');\n    }\n\n    async findTerm(term: string): Promise<WikipediaInfo> {\n        if (!term) {\n            throw new Error('Empty term passed');\n        }\n        const lookupTerm = this.scrubTerm(term);\n        return this.getWikipediaInfo(lookupTerm).then(\n            ({ imageUrl, pageUrl, introText, title, pageId, matchingTerms, exactMatch }) => {\n                // this.imageUrl(imageUrl);\n                // this.pageUrl(url);\n                const fixedIntroText = introText\n                    .replace(/====/g, '####')\n                    .replace(/===/g, '###')\n                    .replace(/==/g, '##')\n                    .replace(/\\n/g, '  \\n');\n\n                return { imageUrl, pageUrl, introText: fixedIntroText, title, pageId, matchingTerms, exactMatch };\n            }\n        );\n    }\n\n    async getWikipediaInfo(term: string): Promise<WikipediaInfo> {\n        return this.getPage(term).then(\n            ({\n                wikiResponse,\n                matchingTerms,\n                exactMatch\n            }: {\n                wikiResponse: any;\n                matchingTerms: Array<string>;\n                exactMatch: boolean;\n            }) => {\n                // this.imageCaption(wikiResponse.parse.title);\n                return Promise.all([\n                    this.getImage({ size: IMAGE_SIZE, pageId: wikiResponse.parse.pageid }),\n                    this.getPageInfo({ pageId: wikiResponse.parse.pageid })\n                ]).then(([imageUrl, pageInfo]) => {\n                    return {\n                        imageUrl: imageUrl,\n                        pageUrl: pageInfo.url,\n                        introText: pageInfo.introText,\n                        title: wikiResponse.parse.title,\n                        pageId: wikiResponse.parse.pageid,\n                        matchingTerms,\n                        exactMatch\n                    };\n                });\n            }\n        );\n    }\n\n    // see: https://www.mediawiki.org/wiki/API:Main_page\n    // https://en.wikipedia.org/w/api.php?action=help&modules=parse\n    async getPage(term: string): Promise<{ wikiResponse: any; matchingTerms: Array<string>; exactMatch: boolean }> {\n        const terms = term.split(/\\s+/);\n        let matchingTerms: Array<string>;\n        let exactMatch = true;\n        return new Promise((resolve, reject) => {\n            const fetchPage = (terms: Array<string>) => {\n                if (terms.length === 0) {\n                    reject(new NotFound('No Wikipedia page found matching \"' + term + '\"'));\n                    // resolve(null);\n                }\n                // const http = new HttpClient.HttpClient();\n                // const header = new HttpClient.HttpHeader({\n                //     accept: 'application/json'\n                // });\n                const apiUrl = new URL(WIKIPEDIA_API_URL);\n                const query = apiUrl.searchParams;\n                query.set('action', 'parse');\n                query.set('format', 'json');\n                query.set('prop', 'text|headhtml');\n                query.set('section', '0');\n                query.set('redirects', '');\n                query.set('page', terms.join(' '));\n                const headers = {\n                    accept: 'application/json'\n                };\n                // must set this to enable cors\n                query.set('origin', '*');\n                fetch(apiUrl.toString(), {\n                    method: 'GET',\n                    headers\n                })\n                    .then((result) => {\n                        switch (result.status) {\n                            case 200:\n                                try {\n                                    return result.json().then((wikiResponse) => {\n                                        if (wikiResponse.error) {\n                                            if (wikiResponse.error.code === 'missingtitle') {\n                                                terms.pop();\n                                                exactMatch = false;\n                                                fetchPage(terms);\n                                                return null;\n                                            } else {\n                                                console.error('wikipedia api error', wikiResponse);\n                                                reject(new Error('Wikipedia api error: ' + wikiResponse.error.code));\n                                            }\n                                        } else {\n                                            matchingTerms = terms;\n                                            resolve({\n                                                wikiResponse,\n                                                matchingTerms,\n                                                exactMatch\n                                            });\n                                        }\n                                    });\n                                } catch (ex) {\n                                    reject(new Error('Error parsing wikipedia response: ' + ex.message));\n                                }\n                                break;\n                            default:\n                                const message = 'Unexpected response from wikipedia api: ' + result.status;\n                                console.error(message, result);\n                                reject(new Error(message));\n                        }\n                    })\n                    .catch((err) => {\n                        reject(err);\n                    });\n            };\n            fetchPage(terms);\n        });\n    }\n\n    async getPageInfo({ pageId }: { pageId: string }): Promise<any> {\n        const apiURL = new URL(WIKIPEDIA_API_URL);\n        const query = apiURL.searchParams;\n        query.set('action', 'query');\n        query.set('pageids', pageId);\n        query.set('prop', 'info|extracts');\n        query.set('explaintext', 'true');\n        query.set('inprop', 'url');\n        query.set('origin', '*');\n        query.set('format', 'json');\n\n        // const http = new HttpClient.HttpClient();\n        return fetch(apiURL.toString(), {\n            method: 'GET'\n        }).then((result) => {\n            switch (result.status) {\n                case 200:\n                    try {\n                        return result.json().then((wikiResponse) => {\n                            return {\n                                url: props.getProp<string>(\n                                    wikiResponse,\n                                    ['query', 'pages', String(pageId), 'fullurl'],\n                                    null\n                                ),\n                                introText: props.getProp<string>(\n                                    wikiResponse,\n                                    ['query', 'pages', String(pageId), 'extract'],\n                                    null\n                                )\n                            };\n                        });\n                    } catch (ex) {\n                        console.error('error getting page info', ex.message);\n                        throw ex;\n                    }\n                default:\n                    var message = 'Unexpected response from wikipedia api: ' + result.status;\n                    console.error(message, result);\n                    throw new Error(message);\n            }\n        });\n    }\n\n    async getImage({ size, pageId }: { size: number; pageId: number }): Promise<string> {\n        const apiURL = new URL(WIKIPEDIA_API_URL);\n        const query = apiURL.searchParams;\n        query.set('action', 'query');\n        query.set('format', 'json');\n        query.set('prop', 'pageimages');\n        query.set('pithumbsize', String(size));\n        query.set('pageids', String(pageId));\n        query.set('origin', '*');\n        const headers = {\n            accept: 'application/json'\n        };\n\n        return fetch(apiURL.toString(), {\n            method: 'GET',\n            headers\n        })\n            .then((result) => {\n                switch (result.status) {\n                    case 200:\n                        try {\n                            return result.json().then((wikiResponse) => {\n                                return props.getProp<string>(\n                                    wikiResponse,\n                                    ['query', 'pages', String(pageId), 'thumbnail', 'source'],\n                                    null\n                                );\n                            });\n                        } catch (ex) {\n                            throw new Error('Error parsing wikipedia response: ' + ex.message);\n                        }\n                    default:\n                        var message = 'Unexpected response from wikipedia api: ' + result.status;\n                        console.error(message, result);\n                        throw new Error(message);\n                }\n            })\n            .catch((err) => {\n                const message = 'Error getting image from wikipedia: ' + err.message;\n                console.error(message, err);\n                throw new Error('Error getting image from wikipedia: ' + err.message);\n            });\n    }\n}\n","import React from 'react';\nimport { Spin } from 'antd';\nimport './Loading.css';\n\nexport interface Props {\n    message: string;\n}\n\ninterface State {}\n\nexport default class Loading extends React.Component<Props, State> {\n    render() {\n        return (\n            <div className=\"Loading-box\">\n                <Spin size=\"large\" />\n                <br />\n                {this.props.message}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Taxon } from '../../../types/taxonomy';\nimport Wikipedia from '../../../components/Wikipedia';\n\nexport interface TaxonDescriptionProps {\n    taxon: Taxon;\n}\n\ninterface TaxonDescriptionState { }\n\nexport default class TaxonDescription extends React.Component<TaxonDescriptionProps, TaxonDescriptionState> {\n    renderTaxonDescription() {\n        return <Wikipedia term={this.props.taxon.name} />;\n    }\n\n    /**\n     * Intercept nodes which don't have a widely known biological association with\n     * the node name (\"scientific name\"), and for which a wikipedia lookup would not\n     * be very useful.\n     */\n    notBiological() {\n        switch (this.props.taxon.name) {\n            case 'root':\n                return (\n                    <div>\n                        <p>This taxon is the topmost node in the NCBI Taxonomy tree.</p>\n                    </div>\n                );\n            case 'cellular organisms':\n                return (\n                    <div>\n                        <p>This taxon represents all cellular organisms.</p>\n                    </div>\n                );\n            default:\n                return (\n                    <div>\n                        <p>Unknown non-biological taxon.</p>\n                    </div>\n                );\n        }\n    }\n\n    render() {\n        if (this.props.taxon.isBiological) {\n            return <div className=\"Col scrollable\">{this.renderTaxonDescription()}</div>;\n        }\n        return this.notBiological();\n    }\n}\n","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../../../../lib/DB';\nimport { AppConfig } from '@kbase/ui-components';\nimport { TaxonomyModel, LinkedObject } from '../../lib/model';\nimport { TaxonReference } from '../../../../types/taxonomy';\n\nexport type LinkedDataDBStateNone = DBStateNone;\nexport type LinkedDataDBStateLoading = DBStateLoading;\nexport type LinkedDataDBStateError = DBStateError;\n\nexport interface LinkedDataDBStateLoaded extends DBStateLoaded {\n    linkedObjects: Array<LinkedObject>;\n    page: number;\n    pageSize: number;\n}\n\nexport type LinkedDataDBState =\n    | LinkedDataDBStateNone\n    | LinkedDataDBStateLoading\n    | LinkedDataDBStateLoaded\n    | LinkedDataDBStateError;\n\nexport interface LinkedDataDBProps extends DBProps<LinkedDataDBState> {\n    token: string;\n    config: AppConfig;\n}\n\nexport default class LinkedDataDB extends DB<LinkedDataDBState> {\n    token: string;\n    serviceWizardURL: string;\n    constructor(props: LinkedDataDBProps) {\n        super(props);\n        this.token = props.token;\n        this.serviceWizardURL = props.config.services.ServiceWizard.url;\n    }\n\n    async fetchLinkedObjects({ taxonRef, page, pageSize }: { taxonRef: TaxonReference; page: number; pageSize: number }) {\n        try {\n            this.set((state: LinkedDataDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADING\n                };\n            });\n\n            const client = new TaxonomyModel({\n                token: this.token,\n                url: this.serviceWizardURL\n            });\n\n            const offset = (page - 1) * pageSize;\n            const limit = pageSize;\n\n            const linkedObjects = await client.getLinkedObjects(taxonRef, {\n                offset,\n                limit\n            });\n            this.set((state: LinkedDataDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    linkedObjects,\n                    page,\n                    pageSize\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: LinkedDataDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    error: {\n                        code: 'not-found',\n                        source: 'LinkedDataDB.fetchLinkedObjects',\n                        message: ex.message,\n                    }\n                };\n            });\n        }\n    }\n}\n","import React from 'react';\nimport { LinkedObject } from '../../lib/model';\nimport { Table, Tooltip } from 'antd';\nimport Column from 'antd/lib/table/Column';\n\nexport interface Props {\n    linkedObjects: Array<LinkedObject>;\n}\n\ninterface State { }\n\nexport default class LinkedData extends React.Component<Props, State> {\n    renderLinkedObjects() {\n        return <Table\n            dataSource={this.props.linkedObjects}\n            size=\"small\"\n            className=\"KBaseAntdOverride-remove-table-border ScrollingFlexTable\"\n            // pagination={false}\n            // scroll={{ y: '100%' }}\n            bordered={false}\n            rowKey={(linkedObject: LinkedObject) => {\n                return [linkedObject.workspaceID, linkedObject.objectID, linkedObject.version].join('/');\n            }}\n        // rowKey=\"objectName\"\n        >\n            <Column\n                title=\"Type\"\n                // dataIndex=\"workspaceID\"\n                width=\"15%\"\n                render={(workspaceId: number) => {\n                    return <a href=\"https://ci.kbase.us/#spec/type/KBaseGenomes.Genome\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        Genome\n                    </a>\n                }}\n            />\n            <Column\n                title=\"Object\"\n                dataIndex=\"objectName\"\n                width=\"35%\"\n                sorter={(a: LinkedObject, b: LinkedObject) => {\n                    return a.objectName.localeCompare(b.objectName);\n                }}\n                render={(objectName: string, linkedObject: LinkedObject) => {\n                    const url = [\n                        '',\n                        '#dataview',\n                        linkedObject.workspaceID,\n                        linkedObject.objectID,\n                        linkedObject.version\n                    ].join('/');\n                    const headerStyle = {\n                        fontStyle: 'italic',\n                        marginRight: '3px'\n                    }\n                    const tooltip = (\n                        <div>\n                            <div>\n                                <span style={headerStyle}>\n                                    Ref\n                                </span>\n                                <span>\n                                    {linkedObject.workspaceID}/{linkedObject.objectID}/{linkedObject.version}\n                                </span>\n                            </div>\n                            <div>\n                                <span style={headerStyle}>\n                                    Workspace ID\n                                </span>\n                                <span>\n                                    {linkedObject.workspaceID}\n                                </span>\n                            </div>\n                            <div>\n                                <span style={headerStyle}>\n                                    Object ID\n                                </span>\n                                <span>\n                                    {linkedObject.objectID}\n                                </span>\n                            </div>\n                            <div>\n                                <span style={headerStyle}>\n                                    Version\n                                </span>\n                                <span>\n                                    {linkedObject.version}\n                                </span>\n                            </div>\n                        </div>\n                    )\n                    return (\n                        <Tooltip title={tooltip}>\n                            <a href={url}>\n                                {objectName}\n                            </a>\n                        </Tooltip>\n                    )\n                }}\n            />\n            <Column\n                title=\"Narrative\"\n                // dataIndex=\"workspaceID\"\n                width=\"35%\"\n                render={(workspaceID: number) => {\n                    return <a href={`https://ci.kbase.us/narrative/${workspaceID}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                        Narrative or refdata ws title\n                    </a>\n                }}\n            />\n            <Column\n                title=\"Object Created\"\n                dataIndex=\"createdAt\"\n                width=\"15%\"\n                sorter={(a: LinkedObject, b: LinkedObject) => {\n                    return a.createdAt - b.createdAt;\n                }}\n                render={(createdAt: number) => {\n                    return Intl.DateTimeFormat('en-US').format(createdAt);\n                }}\n            />\n        </Table>\n    }\n    render() {\n        return this.renderLinkedObjects();\n    }\n}\n","import React from 'react';\nimport LinkedDataDB, { LinkedDataDBStateError, LinkedDataDBStateLoaded } from './LinkedDataDB';\nimport { DBStatus } from '../../../../lib/DB';\n\nimport { AppConfig } from '@kbase/ui-components';\nimport LinkedData from './LinkedData';\nimport { TaxonReference } from '../../../../types/taxonomy';\nimport { Icon } from 'antd';\nimport ErrorView from '../../../../components/ErrorView';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    taxonRef: TaxonReference;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: LinkedDataDB;\n    constructor(props: Props) {\n        super(props);\n        this.db = new LinkedDataDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n    }\n\n    fetchLinkedData(taxonRef: TaxonReference, page: number, pageSize: number) {\n        return this.db.fetchLinkedObjects({ taxonRef, page, pageSize });\n    }\n\n    renderNone() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderError(db: LinkedDataDBStateError) {\n        return (\n            <ErrorView error={db.error} />\n        )\n    }\n\n    renderLoaded(db: LinkedDataDBStateLoaded) {\n        return <LinkedData linkedObjects={db.linkedObjects} />;\n    }\n\n    componentDidMount() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                this.db.fetchLinkedObjects({ taxonRef: this.props.taxonRef, page: 1, pageSize: 1000 });\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.taxonRef.id !== this.props.taxonRef.id ||\n            prevProps.taxonRef.namespace !== this.props.taxonRef.namespace ||\n            prevProps.taxonRef.timestamp !== this.props.taxonRef.timestamp) {\n\n            this.db.fetchLinkedObjects({ taxonRef: this.props.taxonRef, page: 1, pageSize: 1000 });\n        }\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                // this.db.fetchLinkedObjects({ taxonRef: this.props.taxonRef, page: 1, pageSize: 1000 });\n                return this.renderNone();\n            case DBStatus.LOADING:\n                return this.renderLoading();\n            case DBStatus.ERROR:\n                return this.renderError(db);\n            case DBStatus.LOADED:\n                return this.renderLoaded(db);\n        }\n    }\n}\n","import { AppConfig } from '@kbase/ui-components';\nimport { StoreState } from '../../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps { }\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import React from 'react';\nimport { Tabs } from 'antd';\nimport TaxonDetail from './TaxonDetail';\nimport TaxonDescription from './TaxonDescription';\nimport LinkedData from './linkedData';\nimport { Taxon } from '../../../types/taxonomy';\n\nexport interface TaxonInfoProps {\n    taxon: Taxon;\n}\n\ninterface TaxonInfoState { }\n\nexport default class TaxonInfo extends React.Component<TaxonInfoProps, TaxonInfoState> {\n    render() {\n        return (\n            <Tabs defaultActiveKey=\"detail\" animated={false} className=\"FullHeight-tabs\">\n                <Tabs.TabPane tab=\"Detail\" key=\"detail\" forceRender={false}>\n                    <TaxonDetail taxon={this.props.taxon} />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Description\" key=\"description\" forceRender={false}>\n                    <TaxonDescription taxon={this.props.taxon} />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Linked Data\" key=\"linkedData\" forceRender={false}>\n                    <LinkedData taxonRef={this.props.taxon.ref} />\n                </Tabs.TabPane>\n            </Tabs>\n        );\n    }\n}\n","import React from 'react';\n\nimport { SourceInfo } from '../SourceInfo';\nimport LineageNavigator from '../LineageNavigator';\nimport TaxonSummary from '../TaxonSummary';\nimport { Taxon, TaxonReference } from '../../../types/taxonomy';\nimport { Row, Col } from 'antd';\nimport TaxonInfo from '../taxonInfo/TaxonInfo';\nimport './Taxonomy.css';\n\nexport interface TaxonomyProps {\n    // lineage: Array<Taxon>;\n    selectedTaxon: Taxon;\n    targetTaxon: Taxon;\n    selectTaxonRef: (taxonRef: TaxonReference) => void;\n    navigateToTaxonREf: (taxonRef: TaxonReference) => void;\n    setTitle: (title: string) => void;\n}\n\ninterface TaxonomyState { }\n\nexport default class Taxonomy extends React.Component<TaxonomyProps, TaxonomyState> {\n    renderTaxonInfo() {\n        if (!this.props.selectedTaxon) {\n            return <div>No taxon selected</div>;\n        }\n        return <TaxonInfo taxon={this.props.selectedTaxon} />;\n        // return 'disabled';\n    }\n\n    componentDidMount() {\n        this.props.setTitle('Taxonomy Landing Page for \"' + this.props.targetTaxon.name + '\"');\n    }\n\n    render() {\n        return (\n            <div className=\"Col scrollable Taxonomy\">\n                <div className=\"Col-auto Taxonomy-summary-section\">\n                    <Row>\n                        <Col span={12}>\n                            <TaxonSummary taxon={this.props.targetTaxon} />\n                        </Col>\n                        <Col span={12}>\n                            <SourceInfo />\n                        </Col>\n                    </Row>\n                </div>\n                <div className=\"Row scrollable\">\n                    <div className=\"Col scrollable\" style={{ flex: '0 0 20em' }}>\n                        <LineageNavigator\n                            selectedTaxon={this.props.selectedTaxon}\n                            // lineage={this.props.lineage}\n                            selectTaxonRef={this.props.selectTaxonRef}\n                            targetTaxon={this.props.targetTaxon}\n                            navigateToTaxonRef={this.props.navigateToTaxonREf}\n                        />\n                    </div>\n\n                    <div className=\"Col scrollable\" style={{ marginLeft: '10px' }}>\n                        {this.renderTaxonInfo()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderx() {\n        return (\n            <div className=\"Col scrollable Taxonomy\">\n                <div className=\"Col-auto Taxonomy-summary-section\">\n                    <Row>\n                        <Col span={12}>\n                            summary\n                        </Col>\n                        <Col span={12}>\n                            source info\n                        </Col>\n                    </Row>\n                </div>\n                <div className=\"Row scrollable\">\n                    omitted\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport TaxonDB, { TaxonDBStateLoaded } from './TaxonDB';\nimport { DBStatus, DBStateError } from '../../../lib/DB';\nimport { AppConfig } from '@kbase/ui-components';\nimport Taxonomy from './Taxonomy';\nimport { TaxonReference } from '../../../types/taxonomy';\nimport { Icon } from 'antd';\nimport ErrorView from '../../../components/ErrorView';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    taxonRef: TaxonReference;\n    // taxonID: TaxonID;\n    navigate: (taxonRef: TaxonReference) => void;\n    setTitle: (title: string) => void;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: TaxonDB;\n    currentlyNavigatedTaxonRef: TaxonReference | null;\n    constructor(props: Props) {\n        super(props);\n        this.db = new TaxonDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n        this.currentlyNavigatedTaxonRef = null;\n    }\n\n    selectTaxon(taxonRef: TaxonReference) {\n        return this.db.getSelectedTaxon(taxonRef);\n    }\n\n    navigateToTaxon(taxonRef: TaxonReference) {\n        return this.props.navigate(taxonRef);\n    }\n\n    renderLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderError(db: DBStateError) {\n        // NB this is rendered raw in the container, which is a flex row.\n        return (\n            <div className=\"Col\">\n                <div style={{ width: '50%', margin: '20px auto 0 auto' }}>\n                    <ErrorView error={db.error} />\n                </div>\n            </div>\n        );\n    }\n\n    renderLoaded(db: TaxonDBStateLoaded) {\n        return (\n            <Taxonomy\n                targetTaxon={db.targetTaxon}\n                selectedTaxon={db.selectedTaxon}\n                selectTaxonRef={this.selectTaxon.bind(this)}\n                navigateToTaxonREf={this.navigateToTaxon.bind(this)}\n                setTitle={this.props.setTitle}\n            />\n        );\n    }\n\n    componentDidMount() {\n        this.db.getTargetTaxon(this.props.taxonRef);\n    }\n\n    componentDidUpdate(previousProps: Props) {\n        if (previousProps.taxonRef.id !== this.props.taxonRef.id ||\n            previousProps.taxonRef.timestamp !== this.props.taxonRef.timestamp) {\n            this.db.getTargetTaxon(this.props.taxonRef);\n        }\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                // this.db.getTargetTaxon(this.props.taxonID);\n                return this.renderLoading();\n            case DBStatus.LOADING:\n                return this.renderLoading();\n            case DBStatus.ERROR:\n                return this.renderError(db);\n            case DBStatus.LOADED:\n                return this.renderLoaded(db);\n            // if (this.props.taxonID !== db.targetTaxon.id) {\n            //     this.db.getTargetTaxon(this.props.taxonID);\n            //     return this.renderLoaded(db);\n            // } else {\n            //     return this.renderLoaded(db);\n            // }\n        }\n    }\n}\n","import { AppConfig, sendTitle } from '@kbase/ui-components';\nimport { StoreState } from '../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { navigate } from '../../../redux/actions';\nimport { TaxonReference, taxonomyNamespaceToString } from '../../../types/taxonomy';\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps {\n    navigate: (ref: TaxonReference) => void;\n    setTitle: (title: string) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, props: OwnProps): DispatchProps {\n    return {\n        navigate: (ref: TaxonReference) => {\n            const relationEngineID = [\n                'taxonomy',\n                taxonomyNamespaceToString(ref.namespace),\n                ref.id,\n                String(ref.timestamp)\n            ].join('/');\n            dispatch(navigate(relationEngineID) as any);\n        },\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import { RelationEngineID, StoreState } from '../../redux/store';\n// import { TaxonID } from './redux/store';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { navigate } from '../../redux/actions';\nimport { connect } from 'react-redux';\nimport Taxonomy from './main';\nimport { sendTitle } from '@kbase/ui-components';\n\nexport interface OwnProps {\n    // taxonID: TaxonID;\n}\n\nexport interface StateProps {\n    // taxonID: TaxonID;\n}\n\nexport interface DispatchProps {\n    navigate: (relationEngineID: RelationEngineID) => void;\n    setTitle: (title: string) => void;\n    // load: (taxonID: TaxonID) => void;\n}\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    return {};\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        navigate: (relationEngineId: RelationEngineID) => {\n            dispatch(navigate(relationEngineId) as any);\n        },\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        }\n        // load: (taxonID: TaxonID) => {\n        //     dispatch(load(taxonID) as any);\n        // }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Taxonomy);\n","import React from 'react';\nimport { OntologyReference, OntologyTermBrief, ontologyNamespaceToString } from '../../types/ontology';\nimport { Tooltip, Icon } from 'antd';\nimport './OntologyItem.css';\n\nexport interface Props {\n    term: OntologyTermBrief;\n    isActive: boolean;\n    selectTermRef: (ref: OntologyReference) => void;\n    navigateToTermRef: (ref: OntologyReference) => void;\n}\n\ninterface State {\n    hovering: boolean;\n}\n\nexport default class OntologyItem extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            hovering: false\n        };\n    }\n    clickTerm() {\n        this.props.selectTermRef(this.props.term.ref);\n    }\n    clickNavigateToTerm() {\n        const hash = [\n            'review',\n            'ontology',\n            ontologyNamespaceToString(this.props.term.ref.namespace),\n            this.props.term.ref.id,\n            String(this.props.term.ref.timestamp)\n        ].join('/');\n        // const hash = `review/${this.props.term.}`;\n        // TODO: use the integration api?\n        if (window.parent) {\n            window.parent.location.hash = hash;\n        } else {\n            window.location.hash = hash;\n        }\n        // window.history.pushState({}, 'my title', `/#review/${this.props.taxon.id}`);\n        // this.props.navigateToTaxonID(this.props.taxon.id);\n    }\n\n    onMouseEnter(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: true });\n    }\n\n    onMouseLeave(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: false });\n    }\n\n    renderOver() {\n        return (\n            <React.Fragment>\n                <div className=\"OntologyTerm-name\" onClick={this.clickNavigateToTerm.bind(this)}>\n                    {this.props.term.name}\n                </div>\n                <div className=\"OntologyTerm-inspector\" onClick={this.clickTerm.bind(this)}>\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderActive() {\n        return (\n            <React.Fragment>\n                <div className=\"OntologyTerm-name\" onClick={this.clickNavigateToTerm.bind(this)}>\n                    {this.props.term.name}\n                </div>\n                <div className=\"OntologyTerm-inspector\">\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderNormal() {\n        return (\n            <React.Fragment>\n                <div className=\"OntologyTerm-name\">{this.props.term.name}</div>\n            </React.Fragment>\n        );\n    }\n\n    renderItem() {\n        if (this.props.isActive) {\n            return this.renderActive();\n        }\n        if (this.state.hovering) {\n            return this.renderOver();\n        } else {\n            return this.renderNormal();\n        }\n    }\n\n    render() {\n        const term = this.props.term;\n        const classNames = ['OntologyTerm'];\n        if (this.props.isActive) {\n            const classNames = ['OntologyTerm'];\n            classNames.push('OntologyTerm-active');\n        }\n\n        const tooltipTitle = (\n            <div>\n                <div style={{ borderBottom: '1px solid silver' }}>{term.name}</div>\n            </div>\n        );\n\n        return (\n            <Tooltip title={tooltipTitle} placement=\"right\">\n                <div\n                    className={classNames.join(' ')}\n                    key={this.props.term.ref.id}\n                    onMouseEnter={this.onMouseEnter.bind(this)}\n                    onMouseLeave={this.onMouseLeave.bind(this)}\n                >\n                    {this.renderItem()}\n                </div>\n            </Tooltip>\n        );\n    }\n}\n","import React from 'react';\nimport { OntologyReference, OntologyTermRelatedBrief, ontologyNamespaceToString } from '../../../types/ontology';\nimport { Tooltip, Icon } from 'antd';\nimport './Term.css';\n\nexport interface Props {\n    term: OntologyTermRelatedBrief;\n    isActive: boolean;\n    selectTermRef: (termRef: OntologyReference) => void;\n    navigateToTermRef: (termRef: OntologyReference) => void;\n}\n\ninterface State {\n    hovering: boolean;\n}\n\nexport default class OntologyItem extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            hovering: false\n        };\n    }\n    clickTerm() {\n        this.props.selectTermRef(this.props.term.ref);\n    }\n    clickNavigateToTerm() {\n        const hash = [\n            'review',\n            'ontology',\n            ontologyNamespaceToString(this.props.term.ref.namespace),\n            String(this.props.term.ref.timestamp)\n        ].join('/');\n        // const hash = `review/${this.props.term.ref.id}`;\n        // TODO: use the integration api?\n        if (window.parent) {\n            window.parent.location.hash = hash;\n        } else {\n            window.location.hash = hash;\n        }\n        // window.history.pushState({}, 'my title', `/#review/${this.props.taxon.id}`);\n        // this.props.navigateToTaxonID(this.props.taxon.id);\n    }\n\n    onMouseEnter(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: true });\n    }\n\n    onMouseLeave(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: false });\n    }\n\n    renderOver() {\n        return (\n            <React.Fragment>\n                <div className=\"OntologyTermRelatedBrief-name\" onClick={this.clickNavigateToTerm.bind(this)}>\n                    {this.props.term.name}\n                </div>\n                <div className=\"OntologyTermRelatedBrief-inspector\" onClick={this.clickTerm.bind(this)}>\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderActive() {\n        return (\n            <React.Fragment>\n                <div className=\"OntologyTermRelatedBrief-name\" onClick={this.clickNavigateToTerm.bind(this)}>\n                    {this.props.term.name}\n                </div>\n                <div className=\"OntologyTermRelatedBrief-inspector\">\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderNormal() {\n        return (\n            <React.Fragment>\n                <div className=\"OntologyTermRelatedBrief-name\">{this.props.term.name}</div>\n            </React.Fragment>\n        );\n    }\n\n    renderItem() {\n        if (this.props.isActive) {\n            return this.renderActive();\n        }\n        if (this.state.hovering) {\n            return this.renderOver();\n        } else {\n            return this.renderNormal();\n        }\n    }\n\n    render() {\n        const term = this.props.term;\n        const classNames = ['OntologyTermRelatedBrief'];\n        if (this.props.isActive) {\n            const classNames = ['OntologyTermRelatedBrief'];\n            classNames.push('OntologyTermRelatedBrief-active');\n        }\n\n        const tooltipTitle = (\n            <div>\n                <div style={{ borderBottom: '1px solid silver' }}>{term.name}</div>\n            </div>\n        );\n\n        return (\n            <Tooltip title={tooltipTitle} placement=\"right\">\n                <div\n                    className={classNames.join(' ')}\n                    key={this.props.term.ref.id}\n                    onMouseEnter={this.onMouseEnter.bind(this)}\n                    onMouseLeave={this.onMouseLeave.bind(this)}\n                >\n                    {this.renderItem()}\n                </div>\n            </Tooltip>\n        );\n    }\n}\n","import React from 'react';\nimport { OntologyReference, OntologyTermRelatedBrief } from '../../../types/ontology';\nimport './style.css';\nimport Term from './Term';\nimport { Empty } from 'antd';\n\nexport interface Props {\n    terms: Array<OntologyTermRelatedBrief>;\n    // maxItems: number;\n    totalItems: number;\n    selectedTermRef: OntologyReference | null;\n    selectTermRef: (termRef: OntologyReference) => void;\n    navigateToTermRef: (termRef: OntologyReference) => void;\n}\n\ninterface State { }\n\nexport default class OntologyList extends React.Component<Props, State> {\n    selectTerm(termRef: OntologyReference) {\n        this.props.selectTermRef(termRef);\n    }\n    navigateToTerm(termRef: OntologyReference) {\n        this.props.navigateToTermRef(termRef);\n    }\n    renderItemsPlain() {\n        return this.props.terms.map((term) => {\n            const isActive = this.props.selectedTermRef === term.ref;\n            return (\n                <Term\n                    term={term}\n                    isActive={isActive}\n                    selectTermRef={this.selectTerm.bind(this)}\n                    key={term.ref.id}\n                    navigateToTermRef={this.navigateToTerm.bind(this)}\n                />\n            );\n        });\n    }\n    renderNoItems() {\n        return <Empty description=\"No Children\" image={Empty.PRESENTED_IMAGE_SIMPLE} />;\n    }\n    render() {\n        if (this.props.terms.length === 0) {\n            return this.renderNoItems();\n        }\n        return this.renderItemsPlain();\n    }\n}\n","import React from 'react';\nimport { OntologyReference, OntologyTermRelatedBrief, ontologyNamespaceToString } from '../../../types/ontology';\nimport { Tooltip, Icon } from 'antd';\nimport './Term.css';\n\nexport interface Props {\n    term: OntologyTermRelatedBrief;\n    isActive: boolean;\n    selectTermRef: (ref: OntologyReference) => void;\n    navigateToTermRef: (ref: OntologyReference) => void;\n}\n\ninterface State {\n    hovering: boolean;\n}\n\nexport default class OntologyItem extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            hovering: false\n        };\n    }\n    clickTerm() {\n        this.props.selectTermRef(this.props.term.ref);\n    }\n    clickNavigateToTerm() {\n        const hash = [\n            'review',\n            'ontology',\n            ontologyNamespaceToString(this.props.term.ref.namespace),\n            String(this.props.term.ref.timestamp)\n        ].join('/');\n        // const hash = `review/${this.props.term.id}`;\n        // TODO: use the integration api?\n        if (window.parent) {\n            window.parent.location.hash = hash;\n        } else {\n            window.location.hash = hash;\n        }\n        // window.history.pushState({}, 'my title', `/#review/${this.props.taxon.id}`);\n        // this.props.navigateToTaxonID(this.props.taxon.id);\n    }\n\n    onMouseEnter(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: true });\n    }\n\n    onMouseLeave(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: false });\n    }\n\n    renderOver() {\n        return (\n            <React.Fragment>\n                <div className=\"OntologyTermRelatedBrief-name\" onClick={this.clickNavigateToTerm.bind(this)}>\n                    {this.props.term.name}\n                </div>\n                <div className=\"OntologyTermRelatedBrief-inspector\" onClick={this.clickTerm.bind(this)}>\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderActive() {\n        return (\n            <React.Fragment>\n                <div className=\"OntologyTermRelatedBrief-name\" onClick={this.clickNavigateToTerm.bind(this)}>\n                    {this.props.term.name}\n                </div>\n                <div className=\"OntologyTermRelatedBrief-inspector\">\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderNormal() {\n        return (\n            <React.Fragment>\n                <div className=\"OntologyTermRelatedBrief-name\">{this.props.term.name}</div>\n            </React.Fragment>\n        );\n    }\n\n    renderItem() {\n        if (this.props.isActive) {\n            return this.renderActive();\n        }\n        if (this.state.hovering) {\n            return this.renderOver();\n        } else {\n            return this.renderNormal();\n        }\n    }\n\n    render() {\n        const term = this.props.term;\n        const classNames = ['OntologyTermRelatedBrief'];\n        if (this.props.isActive) {\n            const classNames = ['OntologyTermRelatedBrief'];\n            classNames.push('OntologyTermRelatedBrief-active');\n        }\n\n        const tooltipTitle = (\n            <div>\n                <div style={{ borderBottom: '1px solid silver' }}>{term.name}</div>\n            </div>\n        );\n\n        return (\n            <Tooltip title={tooltipTitle} placement=\"right\">\n                <div\n                    className={classNames.join(' ')}\n                    key={this.props.term.ref.id}\n                    onMouseEnter={this.onMouseEnter.bind(this)}\n                    onMouseLeave={this.onMouseLeave.bind(this)}\n                >\n                    {this.renderItem()}\n                </div>\n            </Tooltip>\n        );\n    }\n}\n","import React from 'react';\nimport { OntologyReference, OntologyTermRelatedBrief } from '../../../types/ontology';\nimport './style.css';\nimport Term from './Term';\nimport { Empty } from 'antd';\n\nexport interface Props {\n    terms: Array<OntologyTermRelatedBrief>;\n    // maxItems: number;\n    totalItems: number;\n    selectedTermRef: OntologyReference | null;\n    selectTermRef: (termRef: OntologyReference) => void;\n    navigateToTermRef: (termRef: OntologyReference) => void;\n}\n\ninterface State { }\n\nexport default class OntologyList extends React.Component<Props, State> {\n    selectTerm(termRef: OntologyReference) {\n        this.props.selectTermRef(termRef);\n    }\n    navigateToTerm(termRef: OntologyReference) {\n        this.props.navigateToTermRef(termRef);\n    }\n    renderItemsPlain() {\n        return this.props.terms.map((term) => {\n            const isActive = this.props.selectedTermRef === term.ref;\n            return (\n                <Term\n                    term={term}\n                    isActive={isActive}\n                    selectTermRef={this.selectTerm.bind(this)}\n                    key={term.ref.id}\n                    navigateToTermRef={this.navigateToTerm.bind(this)}\n                />\n            );\n        });\n    }\n    renderNoItems() {\n        return <Empty description=\"No Children\" image={Empty.PRESENTED_IMAGE_SIMPLE} />;\n    }\n    render() {\n        if (this.props.terms.length === 0) {\n            return this.renderNoItems();\n        }\n        return this.renderItemsPlain();\n    }\n}\n","import React from 'react';\nimport './style.css';\nimport OntologyItem from '../OntologyItem';\nimport { OntologyTermBrief, OntologyRelation, OntologyReference, OntologyTermRelatedBrief, OntologyNamespace } from '../../../types/ontology';\nimport Children from '../Children';\nimport Parents from '../Parents';\nimport { RelationEngineCollection } from '../../../types';\n\nexport interface NavProps {\n}\n\ninterface NavState {\n}\n\nexport default class Nav extends React.Component<NavProps, NavState> {\n    selectTermRef(termRef: OntologyReference) {\n        console.log('selecting', termRef);\n    }\n    navigateToTermRef(termRef: OntologyReference) {\n        console.log('navigating to ', termRef);\n    }\n\n    render() {\n        const timestamp = Date.now();\n        const term: OntologyTermBrief = {\n            ref: {\n                collection: RelationEngineCollection.ONTOLOGY,\n                namespace: OntologyNamespace.GO,\n                id: 'GO:0046294',\n                timestamp\n            },\n            // type: OntologySource.GO,\n            name: 'aldehyde catabolic process',\n            goID: 'GO:0046294'\n        }\n        const children: Array<OntologyTermRelatedBrief> = [\n            {\n                ref: {\n                    collection: RelationEngineCollection.ONTOLOGY,\n                    namespace: OntologyNamespace.GO,\n                    id: 'GO:0043276',\n                    timestamp\n                },\n                relation: OntologyRelation.IS_A,\n                // id: 'go_ontology/GO:0043276',\n                name: 'anoikis',\n                goID: 'GO:0043276'\n            },\n            {\n                ref: {\n                    collection: RelationEngineCollection.ONTOLOGY,\n                    namespace: OntologyNamespace.GO,\n                    id: 'GO:0008637',\n                    timestamp\n                },\n                relation: OntologyRelation.PART_OF,\n                // id: 'go_ontology/GO:0008637',\n                name: 'apoptotic',\n                // type: OntologySource.GO,\n                goID: 'GO:0008637'\n            }\n        ]\n        const parents: Array<OntologyTermRelatedBrief> = [\n            {\n                ref: {\n                    collection: RelationEngineCollection.ONTOLOGY,\n                    namespace: OntologyNamespace.GO,\n                    id: 'GO:0012501',\n                    timestamp\n                },\n                relation: OntologyRelation.IS_A,\n                // id: 'go_ontology/GO:0012501',\n                name: 'programmed cell death',\n                // type: OntologySource.GO,\n                goID: 'GO:0012501'\n            }\n        ]\n        return <div className=\"Col scrollable OntologyNav\">\n            <div className=\"Col OntologyNav-title\">\n                parents\n            </div>\n            <div className=\"Col OntologyNav-ancestorsArea\">\n                <Parents\n                    terms={parents}\n                    totalItems={parents.length}\n                    selectedTermRef={null}\n                    selectTermRef={this.selectTermRef.bind(this)}\n                    navigateToTermRef={this.navigateToTermRef.bind(this)}\n                />\n            </div>\n            <div className=\"Col OntologyNav-title\">\n                selected\n            </div>\n            <div className=\"Col OntologyNav-termArea\">\n                <OntologyItem\n                    term={term}\n                    isActive={false}\n                    selectTermRef={this.selectTermRef.bind(this)}\n                    navigateToTermRef={this.navigateToTermRef.bind(this)} />\n            </div>\n            <div className=\"Col OntologyNav-title\">\n                children\n            </div>\n            <div className=\"Col OntologyNav-childrenArea scrollable\">\n                <Children\n                    terms={children}\n                    totalItems={children.length}\n                    selectedTermRef={null}\n                    selectTermRef={this.selectTermRef.bind(this)}\n                    navigateToTermRef={this.navigateToTermRef.bind(this)}\n                />\n\n            </div>\n        </div>\n    }\n}","import React from 'react';\nimport { OntologySource, GOOntologyTerm, OntologyTerm } from '../../types/ontology';\n\nexport interface Props {\n    term: OntologyTerm;\n    newWindow: boolean;\n}\n\ninterface State {\n}\n\nexport default class TermLink extends React.Component<Props, State> {\n    renderGOLink(term: GOOntologyTerm) {\n        const href = `http://amigo.geneontology.org/amigo/term/${term.goID}`;\n        const target = this.props.newWindow ? '_blank' : '_parent';\n        return (\n            <a href={href} target={target}>\n                {term.ref.id}\n            </a>\n        )\n    }\n\n    render() {\n        const term = this.props.term;\n        switch (term.type) {\n            case (OntologySource.GO):\n                return this.renderGOLink(term);\n        }\n    }\n}","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../../../../lib/DB';\nimport { LinkedObject, OntologyReference } from '../../../../types/ontology';\nimport { AppConfig } from '@kbase/ui-components';\n\nexport type LinkedObjectsDBStateNone = DBStateNone;\nexport type LinkedObjectsDBStateLoading = DBStateLoading;\nexport type LinkedObjectsDBStateError = DBStateError;\n\nexport interface LinkedObjectsDBStateLoaded extends DBStateLoaded {\n    linkedObjects: Array<LinkedObject>\n}\n\nexport type LinkedObjectsDBState = LinkedObjectsDBStateNone | LinkedObjectsDBStateLoading | LinkedObjectsDBStateError | LinkedObjectsDBStateLoaded;\n\nexport interface LinkedObjectsProps extends DBProps<LinkedObjectsDBState> {\n    token: string;\n    config: AppConfig;\n}\n\nexport default class LinkedObjectsDB extends DB<LinkedObjectsDBState> {\n    props: LinkedObjectsProps;\n    constructor(props: LinkedObjectsProps) {\n        super(props);\n        this.props = props;\n    }\n    async getLinkedObjects(termRef: OntologyReference) {\n        try {\n            this.set((state: LinkedObjectsDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADING\n                }\n            });\n\n            // do the call here when it is available\n\n            const linkedObjects: Array<LinkedObject> = [\n                {\n                    object: {\n                        workspaceID: 43747,\n                        id: 4,\n                        version: 1\n                    },\n                    type: {\n                        module: 'KBaseGenomes',\n                        name: 'Genome'\n                    },\n                    scientificName: 'Escherichia coli',\n                    feature: 'CF61_RS00005'\n                },\n                {\n                    object: {\n                        workspaceID: 43747,\n                        id: 4,\n                        version: 1\n                    },\n                    type: {\n                        module: 'KBaseGenomes',\n                        name: 'Genome'\n                    },\n                    scientificName: 'Escherichia coli',\n                    feature: 'CF61_RS00005'\n                },\n                {\n                    object: {\n                        workspaceID: 43747,\n                        id: 4,\n                        version: 1\n                    },\n                    type: {\n                        module: 'KBaseGenomes',\n                        name: 'Genome'\n                    },\n                    scientificName: 'Escherichia coli',\n                    feature: 'CF61_RS00005'\n                },\n                {\n                    object: {\n                        workspaceID: 43747,\n                        id: 4,\n                        version: 1\n                    },\n                    type: {\n                        module: 'KBaseGenomes',\n                        name: 'Genome'\n                    },\n                    scientificName: 'Escherichia coli',\n                    feature: 'CF61_RS00005'\n                }\n            ]\n\n            this.set((state: LinkedObjectsDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    linkedObjects\n                }\n            });\n        } catch (ex) {\n            this.set((state: LinkedObjectsDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    error: {\n                        code: 'not-found',\n                        source: 'LinkedObjectsDB.getLinkedObjects',\n                        message: ex.message\n                    }\n                }\n            });\n        }\n    }\n\n}\n","import React from 'react';\nimport './style.css';\nimport { Table } from 'antd';\nimport { LinkedObject } from '../../../../types/ontology';\n\nexport interface Props {\n    linkedObjects: Array<LinkedObject>;\n}\n\ninterface State {\n\n}\n\nexport default class LinkedObjects extends React.Component<Props, State> {\n    renderTable() {\n        return <Table\n            dataSource={this.props.linkedObjects}\n            className=\"KBaseAntdOverride-remove-table-border ScrollingFlexTable\"\n            size=\"small\"\n            pagination={false}\n            scroll={{ y: '100%' }}\n            // rowKey=\"name\"\n            bordered={false}\n        >\n            <Table.Column\n                dataIndex={\"scientificName\"}\n                title=\"Scientific Name\"\n                width=\"40%\"\n            />\n            <Table.Column\n                dataIndex={\"type.name\"}\n                title=\"Type\"\n                width=\"30%\"\n            />\n            <Table.Column\n                dataIndex={\"feature\"}\n                title=\"Feature\"\n                width=\"30%\"\n            />\n        </Table>\n    }\n    renderNone() {\n        return (\n            <p style={{ fontStyle: 'italic' }}>\n                No objects use this term.\n            </p>\n        )\n    }\n    render() {\n        if (this.props.linkedObjects.length === 0) {\n            return this.renderNone();\n        }\n        return this.renderTable();\n    }\n}","import React from 'react';\nimport LinkedObjectsDB, { LinkedObjectsDBStateLoaded } from './LinkedObjectsDB';\nimport { DBStatus, DBStateError } from '../../../../lib/DB';\n\nimport { AppConfig } from '@kbase/ui-components';\nimport View from './view';\nimport { OntologyReference } from '../../../../types/ontology';\nimport { Icon } from 'antd';\nimport ErrorView from '../../../../components/ErrorView';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    termRef: OntologyReference;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: LinkedObjectsDB;\n    constructor(props: Props) {\n        super(props);\n        this.db = new LinkedObjectsDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n    }\n\n    renderLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderError(db: DBStateError) {\n        return <ErrorView error={db.error} />\n    }\n\n    renderLoaded(db: LinkedObjectsDBStateLoaded) {\n        return (\n            <View\n                linkedObjects={db.linkedObjects}\n            />\n        );\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                this.db.getLinkedObjects(this.props.termRef);\n                return this.renderLoading();\n            case DBStatus.LOADING:\n                return this.renderLoading();\n            case DBStatus.ERROR:\n                return this.renderError(db);\n            case DBStatus.LOADED:\n                return this.renderLoaded(db);\n        }\n    }\n}\n","import { AppConfig } from '@kbase/ui-components';\nimport { StoreState } from '../../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps { }\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import React from 'react';\nimport { FlexTabs } from '@kbase/ui-components';\nimport './style.css';\nimport { OntologyTerm, Synonym } from '../../../types/ontology';\nimport TermLink from '../TermLink';\nimport LinkedObjects from './LinkedObjects';\n\nexport interface DetailProps {\n    term: OntologyTerm\n}\n\ninterface DetailState {\n\n}\n\nexport default class Detail extends React.Component<DetailProps, DetailState> {\n    renderSynonyms(synonyms: Array<Synonym>) {\n        if (synonyms.length === 0) {\n            return <i>-</i>;\n        }\n        return synonyms.map((s, index) => {\n            return (\n                <div key={String(index)}>\n                    {s}\n                </div>\n            )\n        });\n    }\n    renderDetail() {\n        return (\n            <div className=\"InfoTable DetailTable\">\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        ID\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        <TermLink term={this.props.term} newWindow={true} />\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Name\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.props.term.name}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Definition\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.props.term.definition}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Comment\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.props.term.comment || <i>-</i>}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Synonyms\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\">\n                                exact\n                                </div>\n                            <div className=\"InfoTable-dataCol\">\n                                {this.renderSynonyms(this.props.term.synonyms.exact)}\n                            </div>\n                        </div>\n\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\">\n                                narrow\n                                </div>\n                            <div className=\"InfoTable-dataCol\">\n                                {this.renderSynonyms(this.props.term.synonyms.narrow)}\n                            </div>\n                        </div>\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\">\n                                broad\n                                </div>\n                            <div className=\"InfoTable-dataCol\">\n                                {this.renderSynonyms(this.props.term.synonyms.broad)}\n                            </div>\n                        </div>\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\">\n                                related\n                                </div>\n                            <div className=\"InfoTable-dataCol\">\n                                {this.renderSynonyms(this.props.term.synonyms.broad)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    renderGraph() {\n        return (\n            <div>\n                graph here...\n            </div>\n        )\n    }\n    renderLinkedObjects() {\n\n        return (\n            <LinkedObjects termRef={this.props.term.ref} />\n        )\n    }\n    renderMetadata() {\n        return (\n            <div>\n                render metadata here...\n            </div>\n        )\n    }\n    render() {\n        const tabs = [\n            {\n                tab: 'detail',\n                title: 'Detail',\n                component: this.renderDetail()\n            },\n            // {\n            //     tab: 'graph',\n            //     title: 'Graph',\n            //     component: this.renderGraph()\n            // },\n            {\n                tab: 'linked',\n                title: 'Linked Objects',\n                component: this.renderLinkedObjects()\n            },\n            // {\n            //     tab: 'metadata',\n            //     title: 'Metadata',\n            //     component: this.renderMetadata()\n            // }\n        ]\n        return (\n            <FlexTabs tabs={tabs} />\n        )\n    }\n}","import React from 'react';\nimport { OntologyReference, GOOntologyTerm, OntologySource, OntologyRelation, OntologyNamespace } from '../../../types/ontology';\nimport './style.css';\nimport Nav from '../Nav';\nimport Detail from '../Detail';\nimport { RelationEngineCollection } from '../../../types';\nimport { RelationEngineID } from '../../../redux/store';\n\nexport interface Props {\n    termRef: OntologyReference;\n    navigate: (relationEngineID: RelationEngineID) => void;\n    setTitle: (title: string) => void;\n}\n\ninterface State { }\n\nexport default class OntologyView extends React.Component<Props, State> {\n\n    renderLayout() {\n        // FAKE IT FOR NOW\n        const term: GOOntologyTerm = {\n            type: OntologySource.GO,\n            relation: OntologyRelation.IS_A,\n            ref: {\n                collection: RelationEngineCollection.ONTOLOGY,\n                namespace: OntologyNamespace.GO,\n                id: 'GO:0046294',\n                timestamp: Date.now()\n            },\n            // id: 'go_ontology/GO:0046294',\n            goID: 'GO:0046294',\n            name: 'formaldehyde catabolic process',\n            definition: 'The chemical reactions and pathways resulting in the breakdown of formaldehyde (methanal, H2C=O), the simplest aldehyde. Source: GOC:ai',\n            comment: null,\n            namespace: 'biological_process',\n            isObsolete: false,\n            synonyms: {\n                exact: [\n                    'formaldehyde breakdown',\n                    'formaldehyde catabolism',\n                    'formaldehyde degradation',\n                    'methanal catabolic process',\n                    'methanal catabolism'\n                ],\n                narrow: [],\n                broad: [],\n                related: []\n            }\n        }\n        return (\n            <React.Fragment>\n                <div className=\"Col OntologyLandingPage-navCol\" key=\"left\">\n                    <Nav />\n                </div>\n                <div className=\"Col OntologyLandingPage-detailCol\" key=\"right\">\n                    <Detail term={term} />\n                </div>\n            </React.Fragment>\n        )\n    }\n\n\n    render() {\n        return this.renderLayout();\n    }\n\n    componentDidMount() {\n        this.props.setTitle('ONTOLOGY LANDING PAGE');\n    }\n}\n","import { RelationEngineID, StoreState } from '../../redux/store';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { navigate } from '../../redux/actions';\nimport { connect } from 'react-redux';\nimport Main from './Main';\nimport { sendTitle } from '@kbase/ui-components';\n\nexport interface OwnProps {\n\n}\n\nexport interface StateProps {\n\n}\n\nexport interface DispatchProps {\n    navigate: (relationEngineID: RelationEngineID) => void;\n    setTitle: (title: string) => void;\n}\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    return {};\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        navigate: (relationEngineId: RelationEngineID) => {\n            dispatch(navigate(relationEngineId) as any);\n        },\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Main);\n","import React from 'react';\nimport { RootState } from '@kbase/ui-components';\nimport {\n    RelationEngineID,\n    Navigation,\n    ViewType,\n    NavigationSome\n} from '../../redux/store';\nimport Taxonomy from '../../landingPages/taxonomy';\nimport OntologyView from '../../landingPages/ontology';\n\nexport interface DispatcherProps {\n    token: string | null;\n    rootState: RootState;\n    // view: RelationEngineView;\n    navigation: Navigation;\n    trigger: number;\n    navigate: (relationEngineID: RelationEngineID) => void;\n}\n\ninterface DispatcherState { }\n\nexport class Dispatcher extends React.Component<DispatcherProps, DispatcherState> {\n    renderUnauthorized() {\n        return <div>Sorry, not authorized. Please log in first.</div>;\n    }\n\n    renderRootState() {\n        switch (this.props.rootState) {\n            case RootState.NONE:\n                return '';\n            case RootState.HOSTED:\n                return '';\n            case RootState.DEVELOP:\n                return '';\n            case RootState.ERROR:\n                return 'error';\n        }\n    }\n\n    renderNavigationNone() {\n        return <div>none</div>;\n    }\n\n    // renderNavigationLoading(view: RelationEngineViewLoading) {\n    //     return <Loading message=\"Loading view...\" />;\n    // }\n\n    // renderNavigationLoaded(view: RelationEngineViewLoaded) {\n    //     // This is currently how we dispatch to the type-specific\n    //     // landing page.\n    //     switch (view.relationEngineNodeType) {\n    //         case RelationEngineNodeType.TAXON:\n    //             return <Taxonomy taxonID={view.relationEngineID} />;\n    //     }\n    // }\n\n    // renderNavigationError(view: RelationEngineViewError) {\n    //     return <Alert type=\"error\" message={`View Error: ${view.message}`} />;\n    // }\n\n    renderNavigationSome(navigation: NavigationSome) {\n        // This is currently how we dispatch to the type-specific\n        // landing page.\n        switch (navigation.type) {\n            case ViewType.TAXONOMY:\n                return <Taxonomy taxonRef={navigation.ref} />;\n            case ViewType.ONTOLOGY:\n                return <OntologyView termRef={navigation.ref} />;\n        }\n    }\n\n    renderNavigation() {\n        switch (this.props.navigation.type) {\n            case ViewType.NONE:\n                return this.renderNavigationNone();\n            default:\n                return this.renderNavigationSome(this.props.navigation);\n            // case ViewStatus.LOADING:\n            //     return this.renderNavigationLoading(this.props.view);\n            // case ViewStatus.LOADED:\n            //     return this.renderNavigationLoaded(this.props.view);\n            // case ViewStatus.ERROR:\n            //     return this.renderNavigationError(this.props.view);\n        }\n    }\n\n    parseHash(hash: string): { path: Array<string>; params: { relationEngineID: string } } {\n        const hashRe = /^#(.*?)\\/(.*)$/;\n        const m = hashRe.exec(hash);\n\n        if (!m) {\n            throw new Error('Invalid path');\n        }\n\n        // Just for now...\n        // TODO: for real\n\n        const [, path, relationEngineID] = m;\n\n        return {\n            path: [path],\n            params: { relationEngineID }\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.rootState === RootState.DEVELOP) {\n            // Navigate on change of the hash\n            window.addEventListener('hashchange', (ev: HashChangeEvent) => {\n                const url = new URL(ev.newURL);\n                const hash = url.hash;\n                if (!hash) {\n                    throw new Error('no hash!');\n                }\n                const {\n                    params: { relationEngineID }\n                } = this.parseHash(hash);\n                this.props.navigate(relationEngineID);\n            });\n\n            // First time here, we also want to navigate based on the\n            // hash, or if empty (the default when a dev session starts)\n            // use some default interesting taxon id.\n            const hash = window.location.hash;\n            if (hash) {\n                const {\n                    params: { relationEngineID }\n                } = this.parseHash(hash);\n                this.props.navigate(relationEngineID);\n            } else {\n                // TODO: remove?\n                this.props.navigate('taxonomy/ncbi_taxonomy/562');\n            }\n        }\n    }\n\n    render() {\n        if (!this.props.token) {\n            return this.renderUnauthorized();\n        }\n        return (\n            <div className=\"Col scrollable\">\n                <div className=\"Row-auto\">{this.renderRootState()}</div>\n                <div className=\"Row  scrollable\">{this.renderNavigation()}</div>\n            </div>\n        );\n    }\n}\n","import { StoreState, RelationEngineID, Navigation } from '../../redux/store';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { connect } from 'react-redux';\nimport { Dispatcher } from './Dispatcher';\nimport { RootState } from '@kbase/ui-components';\nimport { navigate } from '../../redux/actions';\n\ninterface OwnProps { }\n\ninterface StateProps {\n    token: string | null;\n    rootState: RootState;\n    // view: RelationEngineView;\n    // viewState: ViewStatus;\n    navigation: Navigation;\n    trigger: number;\n}\n\ninterface DispatchProps {\n    navigate: (relationEngineID: RelationEngineID) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        root: { state: rootState },\n        navigation,\n        trigger\n    } = state;\n\n    // Auth integration.\n    let token;\n    if (!userAuthorization) {\n        token = null;\n    } else {\n        token = userAuthorization.token;\n    }\n\n    return { token, rootState, navigation, trigger };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        navigate: (relationEngineID: RelationEngineID) => {\n            dispatch(navigate(relationEngineID) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Dispatcher);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createReduxStore } from './redux/store';\nimport { AppBase, AuthGate } from '@kbase/ui-components';\nimport './App.css';\nimport Dispatcher from './components/dispatcher';\nimport { Unsubscribe } from 'redux';\nimport { navigate } from './redux/actions';\n\nconst store = createReduxStore();\n\ninterface AppProps { }\n\ninterface AppState { }\n\nexport default class App<AppProps, AppState> extends React.Component {\n    storeUnsubscribe: Unsubscribe | null;\n    constructor(props: AppProps) {\n        super(props);\n        this.storeUnsubscribe = null;\n    }\n    componentDidMount() {\n        let last: {\n            view: string | null;\n            params: { [key: string]: string };\n        } = {\n            view: null,\n            params: {}\n        };\n        this.storeUnsubscribe = store.subscribe(() => {\n            const state = store.getState();\n            if (!state) {\n                return;\n            }\n            const {\n                app: {\n                    runtime: { navigation }\n                },\n                auth: { userAuthorization }\n            } = state;\n\n            // This is a bit of a cheat.\n            if (!userAuthorization) {\n                return;\n            }\n\n            const view = navigation.view;\n            const params = navigation.params as { [key: string]: string };\n\n            if (\n                view !== last.view ||\n                last.params === null ||\n                Object.keys(params).some((key) => {\n                    return params[key] !== last.params[key];\n                })\n            ) {\n                last.params = params;\n                last.view = view;\n                // TODO: store may change but there is not navigation yet.\n                if (params['relationEngineID']) {\n                    store.dispatch(navigate(params['relationEngineID']) as any);\n                }\n            }\n        });\n    }\n    componentWillUnmount() {\n        if (this.storeUnsubscribe) {\n            this.storeUnsubscribe();\n        }\n    }\n    render() {\n        return (\n            <Provider store={store}>\n                <AppBase>\n                    <AuthGate required={true}>\n                        <div className=\"App Col scrollable\">\n                            <Dispatcher />\n                        </div>\n                    </AuthGate>\n                </AppBase>\n            </Provider>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}