{"version":3,"sources":["lib/RelationEngineAPIClient.ts","types/index.ts","types/taxonomy.ts","types/ontology.ts","redux/actions.ts","redux/reducers.ts","redux/store.ts","lib/DB.ts","landingPages/taxonomy/lib/TaxonAPIClient.ts","landingPages/taxonomy/lib/model.ts","landingPages/taxonomy/main/TaxonDB.ts","landingPages/taxonomy/SourceInfo.tsx","landingPages/taxonomy/TaxonItem.tsx","landingPages/taxonomy/taxonChildren/TaxonChildrenDB.ts","landingPages/taxonomy/TaxonList.tsx","components/ErrorView.tsx","landingPages/taxonomy/taxonChildren/TaxonChildren.tsx","landingPages/taxonomy/taxonChildren/data.tsx","landingPages/taxonomy/taxonChildren/index.ts","landingPages/taxonomy/lineage/LineageDB.ts","landingPages/taxonomy/lineage/Lineage.tsx","landingPages/taxonomy/lineage/data.tsx","landingPages/taxonomy/lineage/index.ts","landingPages/taxonomy/LineageNavigator.tsx","landingPages/taxonomy/TaxonSummary.tsx","landingPages/taxonomy/taxonInfo/TaxonDetailNCBI.tsx","landingPages/taxonomy/taxonInfo/TaxonDetail.tsx","landingPages/taxonomy/lib/props.ts","components/Wikipedia.tsx","landingPages/taxonomy/lib/Wikipedia.ts","components/Loading.tsx","lib/DB2.ts","landingPages/taxonomy/taxonInfo/TaxonDescription.tsx","landingPages/taxonomy/taxonInfo/linkedData/view.tsx","landingPages/taxonomy/taxonInfo/linkedData/LinkedDataDB.ts","landingPages/taxonomy/taxonInfo/linkedData/data.tsx","landingPages/taxonomy/taxonInfo/linkedData/index.ts","landingPages/taxonomy/taxonInfo/TaxonInfo.tsx","landingPages/taxonomy/main/Taxonomy.tsx","landingPages/taxonomy/main/data.tsx","landingPages/taxonomy/main/index.ts","landingPages/taxonomy/index.ts","landingPages/ontology/lib/OntologyAPIClient.ts","landingPages/ontology/lib/model.ts","landingPages/ontology/Main/OntologyDB.ts","landingPages/ontology/OntologyTerm.tsx","landingPages/ontology/Children/Term.tsx","landingPages/ontology/Children/index.tsx","landingPages/ontology/Parents/Term.tsx","landingPages/ontology/Parents/index.tsx","landingPages/ontology/Nav/index.tsx","landingPages/ontology/TermLink.tsx","landingPages/ontology/Detail/LinkedObjects/LinkedObjectsDB.ts","landingPages/ontology/Detail/LinkedObjects/view.tsx","landingPages/ontology/Detail/LinkedObjects/data.tsx","landingPages/ontology/Detail/LinkedObjects/index.ts","landingPages/ontology/Detail/index.tsx","landingPages/ontology/Main/SourceInfo.tsx","landingPages/ontology/Main/TermSummary.tsx","landingPages/ontology/Main/view.tsx","landingPages/ontology/Main/data.tsx","landingPages/ontology/Main/index.ts","landingPages/ontology/index.ts","components/dispatcher/Dispatcher.tsx","components/dispatcher/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["RelationEngineAPIClient","relationEngineID","classRe","taxonomyRe","ontologyRe","Promise","resolve","reject","m","exec","collection","rest","length","Error","timestamp","namespace","id","timestampString","parseInt","Date","now","created","expired","getTime","more","DynamicServiceClient","module","ObjectClass","LoadingStatus","RelationEngineCollection","TaxonomyNamespace","OntologyNamespace","OntologySource","OntologyRelation","GOSynonymScope","AppActions","relationEngineCollectionToString","TAXONOMY","ONTOLOGY","taxonomyNamespaceToString","NCBI","GTDB","stringToTaxonomyNamespace","stringToOntologyNamespace","GO","ontologyNamespaceToString","navigateSuccess","navigation","type","NAVIGATE_SUCCESS","navigate","dispatch","getState","a","NAVIGATE_START","userAuthorization","auth","url","app","config","services","ServiceWizard","reClient","token","getNodeInfo","nodeInfo","ViewType","ref","console","error","message","NAVIGATE_ERROR","state","action","trigger","RelationEngineNodeType","ViewStatus","reducer","baseState","baseReducer","makeInitialStoreState","makeBaseStoreState","NONE","DBStatus","DB","props","db","stopped","onUpdate","this","data","initialData","updateFun","forceComponentUpdate","TaxonomyAPIClient","ns","ts","params","callFunc","result","offset","limit","searchTerm","search_text","taxon_ns","taxon_id","TaxonomyModel","taxonomyClient","TaxonAPIClient","taxonRef","getLineage","taxons","results","map","taxonResult","isBiological","scientific_name","name","rank","ncbiID","NCBI_taxon_id","geneticCode","gencode","aliases","category","options","getChildren","taxa","total_count","getTaxon","taxon","getAssociatedWorkspaceObjects","linkedObjects","linkedAt","edge","updated_at","objectID","ws_obj","object_id","workspaceID","workspace_id","version","objectName","createdAt","epoch","workspaceUpdatedAt","module_name","type_name","majorVersion","maj_ver","minorVersion","min_ver","totalCount","TaxonDB","set","status","LOADING","client","LOADED","targetTaxon","selectedTaxon","ERROR","code","source","SourceInfo","className","src","style","height","alt","width","href","target","rel","React","Component","TaxonItem","hovering","selectTaxonRef","hash","String","join","window","parent","location","ev","setState","Fragment","onClick","clickNavigateToTaxon","bind","clickTaxon","isActive","renderActive","renderOver","renderNormal","classNames","push","tooltipTitle","borderBottom","title","placement","key","onMouseEnter","onMouseLeave","renderItem","TaxonChildrenDB","serviceWizardURL","page","pageSize","RELOADING","total","TaxonList","navigateToTaxonRef","index","selectedTaxonRef","selectTaxon","navigateToTaxon","description","image","PRESENTED_IMAGE_SIMPLE","renderNoItems","renderItemsPlain","ErrorView","color","renderMessage","TaxonChildren","fetchChildren","Intl","NumberFormat","useGrouping","format","currentItem","lastItem","size","renderTitleLoaded","renderTitleReLoading","term","disabled","marginBottom","Search","placeholder","onSearch","doSearch","totalItems","maxItems","tip","renderTaxaLoaded","renderTaxaNone","renderTaxaLoading","renderTaxaReLoading","renderTaxaError","showLessItems","hideOnSinglePage","defaultPageSize","current","onChange","changePage","renderPaginationNone","renderPaginationLoading","renderPaginationError","renderPaginationLoaded","renderPaginationReLoading","renderTitle","renderSearch","renderPagination","renderTaxa","renderChildren","Data","forceUpdate","get","renderError","renderSuccess","connect","DataComponent","LineageDB","lineage","Lineage","renderLoading","renderLoaded","LineageNavigator","count","selectedRef","overflowY","renderLineage","renderTargetTaxon","TaxonSummary","nameStyle","fontStyle","geneticCodesMap","geneticCodes","Array","ensureGeneticCodes","reduce","label","Map","TaxonDetailNCBI","stringSorter","b","fixedA","replace","fixedB","localeCompare","dataSource","pagination","scroll","y","rowKey","bordered","Column","dataIndex","defaultSortOrder","sorter","renderAliases","renderTaxonDetail","TaxonDetail","getProp","obj","propPath","defaultValue","split","TypeError","temp","i","undefined","AsyncComponentLoadingState","NotFound","WIKIPEDIA_API_URL","Wikipedia","proposedTerm","chars","validChar","filter","char","lookupTerm","scrubTerm","getWikipediaInfo","then","imageUrl","pageUrl","introText","pageId","matchingTerms","exactMatch","getPage","wikiResponse","all","getImage","parse","pageid","getPageInfo","pageInfo","terms","fetchPage","apiUrl","URL","query","searchParams","fetch","toString","method","headers","accept","json","pop","ex","catch","err","apiURL","Loading","DBCollectionStatus","wikipediaClient","canceled","WikipediaClient","wikipediaInfo","content","marked","overflow","dangerouslySetInnerHTML","__html","fontSize","textAlign","display","flexDirection","flex","renderMatch","alignSelf","marginLeft","renderWikipediaLogoCredit","paddingRight","marginRight","renderArticle","renderImage","findTerm","updateInfo","renderWikipediaInfo","renderNone","TaxonDescription","renderTaxonDescription","notBiological","LinkedData","setPage","previousProps","linkedObjectsCollection","isLoading","linkedObject","position","onChangePage","loading","render","typeID","headerStyle","tooltip","DateTimeFormat","renderLinkedObjects","AsyncTask","taskFun","hasResult","LinkedDataDB","currentTask","cancel","task","getLinkedObjects","newTask","run","isCanceled","lastTaxonRef","fetchLinkedObjects","TaxonInfo","defaultActiveKey","animated","TabPane","tab","forceRender","Taxonomy","setTitle","span","navigateToTaxonREf","renderTaxonInfo","currentlyNavigatedTaxonRef","getSelectedTaxon","margin","getTargetTaxon","sendTitle","ownProps","relationEngineId","OntologyAPIClient","rawTermToTerm","comment","comments","definition","def","val","goID","isObsolete","synonyms","exact","narrow","broad","related","OntologyModel","ontologyClient","getTerm","OntologyDB","termRef","targetTerm","selectedTerm","OntologyTerm","selectTermRef","clickNavigateToTerm","renderTerm","clickTerm","OntologyItem","OntologyList","navigateToTermRef","selectedTermRef","selectTerm","navigateToTerm","Nav","log","children","relation","IS_A","PART_OF","parents","TermLink","newWindow","renderGOLink","LinkedObjectsDB","object","scientificName","feature","LinkedObjects","renderTable","Detail","s","renderSynonyms","tabs","component","renderDetail","TermSummary","OntologyView","renderLayout","currentlyNavigatedOntologyRef","getSelectedTerm","getTargetTerm","Main","Dispatcher","rootState","RootState","HOSTED","DEVELOP","renderNavigationNone","renderNavigationSome","path","addEventListener","newURL","parseHash","renderRootState","renderNavigation","renderUnauthorized","root","store","createStore","compose","applyMiddleware","thunk","App","storeUnsubscribe","last","view","subscribe","runtime","Object","keys","some","required","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b338e834.chunk.js","sourcesContent":["import { RelationEngineID } from '../redux/store';\nimport { DynamicServiceClient } from '@kbase/ui-lib';\n\n// A collection is a top level division of the re data model\nexport type Collection = 'taxonomy' | 'ontology';\n\n// export type TaxonSource = 'ncbi' | 'gtdb';\n// export type OntologySource = 'go';\n\nexport interface GetNodeInfoResultBase {\n    collection: Collection;\n    // source: string;\n    created: number;\n    expired: number;\n    timestamp: number;\n}\n\nexport interface GetNodeInfoResultTaxon extends GetNodeInfoResultBase {\n    collection: 'taxonomy';\n    // source: TaxonSource;\n    namespace: string;\n    id: string;\n}\n\nexport interface GetNodeInfoResultOntology extends GetNodeInfoResultBase {\n    collection: 'ontology';\n    // source: OntologySource;\n    namespace: string;\n    id: string;\n}\n\nexport type GetNodeInfoResult = GetNodeInfoResultTaxon | GetNodeInfoResultOntology;\n\n// export interface GetNodeInfoResult<T, S> {\n//     type: NodeType;\n//     created: number;\n//     source: TaxonSource | OntologySource;\n//     version: string;\n// }\n\nexport default class RelationEngineAPIClient extends DynamicServiceClient {\n    static module: string = 'relation_engine_api';\n    async getNodeInfo(relationEngineID: RelationEngineID): Promise<[GetNodeInfoResult]> {\n        const classRe = /^(.*?)\\/(.*)$/;\n        const taxonomyRe = /^([^/]+)\\/([^/]+)(?:\\/([^/]+))?$/;\n        const ontologyRe = /^([^/]+)\\/([^/]+)(?:\\/([^/]+))?$/;\n        return new Promise<[GetNodeInfoResult]>((resolve, reject) => {\n            let m = classRe.exec(relationEngineID);\n            if (!m) {\n                reject(new Error('Invalid relation engine ID ' + relationEngineID));\n                return;\n            }\n            const [, collection, rest] = m;\n            // const [collection] = relationEngineID.split('/');\n            switch (collection) {\n                case 'taxonomy': (() => {\n                    m = taxonomyRe.exec(rest);\n                    if (!m) {\n                        reject(new Error('Taxonomy ref is '));\n                        return;\n                    }\n                    if (m.length !== 4) {\n                        reject(new Error('Invalid relation engine id \"' + relationEngineID + '\"'));\n                    }\n                    const [, namespace, id, timestampString] = m;\n                    let timestamp: number;\n                    if (!timestampString) {\n                        timestamp = Date.now();\n                    } else {\n                        timestamp = parseInt(timestampString, 10);\n                    }\n\n                    switch (namespace) {\n                        case 'ncbi_taxonomy':\n                            resolve([\n                                {\n                                    collection: 'taxonomy',\n                                    namespace: namespace,\n                                    id: id,\n                                    timestamp,\n                                    created: Date.now(),\n                                    expired: new Date(2055, 5, 5).getTime()\n                                }\n                            ]);\n                            return;\n                        default:\n                            reject(new Error('Unrecognized taxonomy namespace \"' + namespace + '\"'));\n                            return;\n                    }\n                })();\n                    break;\n                case 'ontology':\n                    m = ontologyRe.exec(rest);\n                    if (!m) {\n                        reject(new Error('Taxonomy ref is '));\n                        return;\n                    }\n                    const [, namespace, id, ...more] = m;\n                    let timestamp: number;\n                    if (more.length) {\n                        timestamp = parseInt(more[0]);\n                    } else {\n                        timestamp = Date.now();\n                    }\n                    switch (namespace) {\n                        case 'go_ontology':\n                            resolve([\n                                {\n                                    collection: 'ontology',\n                                    namespace,\n                                    id,\n                                    timestamp,\n                                    created: Date.now(),\n                                    expired: new Date(2055, 5, 5).getTime()\n                                }\n                            ]);\n                            return;\n                        default:\n                            reject(new Error('Ontology namespace not found \"' + namespace + '\"'));\n                            return;\n                    }\n                default:\n                    reject(new Error(`Collection ${collection} does not resolve to a type`));\n            }\n        });\n    }\n}\n","// import { OntologySource } from './ontology';\n// import { TaxonomySource } from './taxonomy';\n\ntype JSONValue = string | number | boolean | null | JSONObject | JSONArray;\n\ninterface JSONArray extends Array<JSONValue> { };\n\ninterface JSONObject {\n    [x: string]: JSONValue\n}\n\nexport interface UIError {\n    code: string;\n    source: string;\n    message: string;\n    data?: JSONValue;\n}\n\nexport class UIException extends Error {\n    code: string;\n    source: string;\n    message: string;\n    data?: JSONValue;\n    constructor({ message, code, source, data }: { message: string, code: string, source: string, data?: JSONValue }) {\n        super(message);\n        this.code = code;\n        this.source = source;\n        this.message = message;\n        this.data = data;\n    }\n}\n\n// export type NodeSource = TaxonomySource | OntologySource;\n\nexport enum ObjectClass {\n    TAXONOMY,\n    ONTOLOGY\n}\n\nexport enum LoadingStatus {\n    NONE,\n    LOADING,\n    LOADED,\n    ERROR\n}\n\nexport interface NoneState {\n    status: LoadingStatus.NONE;\n}\n\nexport interface LoadingState {\n    status: LoadingStatus.LOADING;\n}\n\nexport interface ErrorState {\n    status: LoadingStatus.ERROR;\n    message: string;\n}\n\nexport interface LoadedState {\n    status: LoadingStatus.LOADED;\n}\n\nexport enum RelationEngineCollection {\n    TAXONOMY,\n    ONTOLOGY\n}\n\nexport function relationEngineCollectionToString(collection: RelationEngineCollection): string {\n    switch (collection) {\n        case RelationEngineCollection.TAXONOMY:\n            return 'taxonomy';\n        case RelationEngineCollection.ONTOLOGY:\n            return 'ontology';\n    }\n}\n\nexport function stringToRelationEngineCollection(collection: string): RelationEngineCollection {\n    switch (collection) {\n        case 'taxonomy':\n            return RelationEngineCollection.TAXONOMY;\n        case 'ontology':\n            return RelationEngineCollection.ONTOLOGY;\n        default:\n            throw new Error('Unrecognized relation engine collection name \"' + collection + '\"');\n\n    }\n}\n\n// export enum RelationEngineNamespace {\n// }\n\nexport type RelationEngineNamespace = any;\n\nexport type RelationEngineID = string;\n\nexport type RelationEngineTimestamp = number;\n\n\nexport interface RelationEngineReference {\n    collection: RelationEngineCollection,\n    namespace: RelationEngineNamespace,\n    id: RelationEngineID;\n    timestamp: RelationEngineTimestamp;\n}","import { RelationEngineReference, RelationEngineCollection } from \".\";\n\nexport enum TaxonomyNamespace {\n    NCBI,\n    GTDB\n}\n\nexport function taxonomyNamespaceToString(namespace: TaxonomyNamespace) {\n    switch (namespace) {\n        case TaxonomyNamespace.NCBI:\n            return 'ncbi_taxonomy';\n        case TaxonomyNamespace.GTDB:\n            return 'gtdb';\n    }\n}\n\nexport function stringToTaxonomyNamespace(namespace: string) {\n    switch (namespace) {\n        case 'ncbi_taxonomy':\n            return TaxonomyNamespace.NCBI;\n        case 'gtdb':\n            return TaxonomyNamespace.GTDB;\n        default:\n            throw new Error('Unrecognized namespace \"' + namespace + '\"');\n    }\n}\n\nexport interface TaxonReferenceBase extends RelationEngineReference {\n    collection: RelationEngineCollection.TAXONOMY,\n    namespace: TaxonomyNamespace;\n}\n\nexport interface TaxonReferenceNCBI extends TaxonReferenceBase {\n    namespace: TaxonomyNamespace.NCBI;\n}\n\nexport interface TaxonReferenceGTDB extends TaxonReferenceBase {\n    namespace: TaxonomyNamespace.GTDB;\n}\n\nexport type TaxonReference = TaxonReferenceNCBI | TaxonReferenceGTDB;\n\n\nexport interface TaxonAlias {\n    category: string;\n    name: string;\n}\n\nexport interface TaxonBase {\n    ref: TaxonReference,\n    name: string;\n    rank: string;\n    isBiological: boolean;\n}\n\n\nexport interface NCBITaxon extends TaxonBase {\n    ref: TaxonReferenceNCBI;\n    ncbiID: number;\n    geneticCode: number;\n    aliases: Array<TaxonAlias>;\n}\n\nexport interface GTDBTaxon extends TaxonBase {\n    ref: TaxonReferenceGTDB;\n}\n\nexport type Taxon = NCBITaxon | GTDBTaxon;\n\n\n","import { RelationEngineReference, RelationEngineCollection } from \".\";\n\n// Ontology Term Reference\n\nexport enum OntologyNamespace {\n    GO\n}\n\nexport function stringToOntologyNamespace(namespace: string): OntologyNamespace {\n    switch (namespace) {\n        case 'go_ontology':\n            return OntologyNamespace.GO;\n        default:\n            throw new Error('Ontology namespace not supported: ' + namespace);\n    }\n}\n\nexport function ontologyNamespaceToString(namespace: OntologyNamespace): string {\n    switch (namespace) {\n        case OntologyNamespace.GO:\n            return 'go_ontology';\n    }\n}\n\n\nexport interface OntologyReferenceBase extends RelationEngineReference {\n    collection: RelationEngineCollection.ONTOLOGY,\n    namespace: OntologyNamespace;\n}\n\nexport interface OntologyReferenceGO extends OntologyReferenceBase {\n    namespace: OntologyNamespace.GO;\n}\n\nexport type OntologyReference = OntologyReferenceGO\n\n\n// export type OntologyID = string;\n\nexport enum OntologySource {\n    GO\n}\nexport enum OntologyRelation {\n    IS_A = 'OntologyRelation$is_a',\n    PART_OF = 'OntologyRelation$part_of'\n}\n\n// Brief term - for list displays\n\nexport interface OntologyTermBriefBase {\n    // type: OntologySource;\n    ref: OntologyReference;\n    // id: OntologyID;\n    name: string;\n    // relation: OntologyRelation\n}\n\nexport interface GOOntologyTermBrief extends OntologyTermBriefBase {\n    // type: OntologySource.GO\n    ref: OntologyReferenceGO\n    goID: string;\n}\n\nexport type OntologyTermBrief = GOOntologyTermBrief;\n\nexport type OntologyRelatedTermBrief = {\n    relation: OntologyRelation,\n    term: OntologyTermBrief\n}\n\nexport interface OntologyTermRelatedBrief extends OntologyTermBrief {\n    relation: OntologyRelation\n}\n\n// Term - the full term info for detail\n\nexport interface OntologyTermBase {\n    ref: OntologyReference;\n    // type: OntologySource;\n    // id: OntologyID;\n    name: string;\n    // relation: OntologyRelation;\n    comment: Array<string>\n    definition: string;\n    isObsolete: boolean;\n}\n\nexport enum GOSynonymScope {\n    EXACT,\n    NARROW,\n    BROAD,\n    RELATED\n}\n\nexport type Synonym = string;\n\n// export interface GOSynonym {\n//     name: string;\n//     scope: GOSynonymScope;\n// }\n\nexport interface GOSynonyms {\n    exact: Array<Synonym>;\n    narrow: Array<Synonym>;\n    broad: Array<Synonym>;\n    related: Array<Synonym>;\n}\n\nexport interface GOOntologyTerm extends OntologyTermBase {\n    type: OntologySource.GO;\n    synonyms: GOSynonyms;\n    goID: string;\n    namespace: string;\n}\n\nexport type OntologyTerm = GOOntologyTerm;\n\nexport interface OntologyTermRelated extends OntologyTerm {\n    related: OntologyRelation\n}\n\nexport interface OntologyRelatedTerm {\n    relation: OntologyRelation,\n    term: OntologyTerm\n}\n\nexport interface OntologyRelatedTerms {\n    term: OntologyTerm,\n    terms: Array<OntologyRelatedTerm>\n}\n\n/* Linked Objects */\n\nexport interface WorkspaceType {\n    module: string;\n    name: string;\n}\nexport type WorkspaceID = number;\nexport type ObjectID = number;\nexport type ObjectVersion = number;\nexport interface WorkspaceObjectReference {\n    workspaceID: WorkspaceID;\n    id: ObjectID;\n    version: ObjectVersion;\n}\n\nexport interface LinkedObject {\n    object: WorkspaceObjectReference;\n    type: WorkspaceType,\n    scientificName: string;\n    feature: string;\n}","import { Action } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { StoreState, RelationEngineID, NavigationSome, ViewType } from './store';\nimport RelationEngineAPIClient from '../lib/RelationEngineAPIClient';\nimport { RelationEngineCollection } from '../types';\nimport { stringToTaxonomyNamespace } from '../types/taxonomy';\nimport { stringToOntologyNamespace } from '../types/ontology';\n// import * as uiLib from '@kbase/ui-lib';\n\nexport enum AppActions {\n    NAVIGATE = 'kbase-ui-plugin-landing-pages/navigate',\n    NAVIGATE_START = 'kbase-ui-plugin-landing-pages/navigate/start',\n    NAVIGATE_SUCCESS = 'kbase-ui-plugin-landing-pages/navigate/success',\n    NAVIGATE_ERROR = 'kbase-ui-plugin-landing-pages/navigate/error'\n}\n\nexport interface Navigate extends Action<AppActions.NAVIGATE> {\n    type: AppActions.NAVIGATE;\n    relationEngineID: RelationEngineID;\n}\n\nexport interface NavigateStart extends Action<AppActions.NAVIGATE_START> {\n    type: AppActions.NAVIGATE_START;\n}\n\nexport interface NavigateSuccess extends Action<AppActions.NAVIGATE_SUCCESS> {\n    type: AppActions.NAVIGATE_SUCCESS;\n    navigation: NavigationSome;\n    // relationEngineID: RelationEngineID;\n    // relationEngineNodeType: RelationEngineNodeType;\n    // viewType: ViewType;\n    // view: LandingPageView;\n}\n\nexport interface NavigateError extends Action<AppActions.NAVIGATE_ERROR> {\n    type: AppActions.NAVIGATE_ERROR;\n    message: string;\n}\n\nexport function navigateStart(): NavigateStart {\n    return {\n        type: AppActions.NAVIGATE_START\n    };\n}\n\nexport function navigateError(message: string): NavigateError {\n    return {\n        type: AppActions.NAVIGATE_ERROR,\n        message\n    }\n}\n\nexport function navigateSuccess(\n    navigation: NavigationSome\n    // viewType: ViewType,\n    // relationEngineID: RelationEngineID\n    // relationEngineNodeType: RelationEngineNodeType,\n\n    // view: LandingPageView\n): NavigateSuccess {\n    return {\n        type: AppActions.NAVIGATE_SUCCESS,\n        navigation\n        // relationEngineID,\n        // relationEngineNodeType,\n        // viewType\n        // view\n    };\n}\n\nexport function navigate(relationEngineID: RelationEngineID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(navigateStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        ServiceWizard: { url }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            return;\n        }\n\n        const reClient = new RelationEngineAPIClient({\n            url,\n            token: userAuthorization.token\n        });\n\n        try {\n            const [nodeInfo] = await reClient.getNodeInfo(relationEngineID);\n            switch (nodeInfo.collection) {\n                case 'taxonomy':\n                    // TODO: add source info here, or let the taxonomy landing page do\n                    // it by itself? I think it is better to do it after the first dispatch\n                    // here, because then the landing page can fold it into its type system,\n                    // rather than requiring the top level to do that. E.g. source->enum.\n                    dispatch(navigateSuccess({\n                        type: ViewType.TAXONOMY,\n                        ref: {\n                            collection: RelationEngineCollection.TAXONOMY,\n                            namespace: stringToTaxonomyNamespace(nodeInfo.namespace),\n                            id: nodeInfo.id,\n                            timestamp: nodeInfo.timestamp\n                        }\n                    }));\n                    // const x = {\n                    //     type: ViewType.TAXONOMY,\n                    //     ref: {\n                    //         collection: RelationEngineCollection.TAXONOMY,\n                    //         namespace: stringToTaxonomyNamespace(nodeInfo.namespace),\n                    //         id: nodeInfo.id,\n                    //         timestamp: nodeInfo.timestamp\n                    //     }\n                    // };\n                    break;\n                case 'ontology':\n                    dispatch(navigateSuccess({\n                        type: ViewType.ONTOLOGY,\n                        ref: {\n                            collection: RelationEngineCollection.ONTOLOGY,\n                            namespace: stringToOntologyNamespace(nodeInfo.namespace),\n                            id: nodeInfo.id,\n                            timestamp: nodeInfo.timestamp\n                        }\n                    }));\n                    break;\n            }\n        } catch (ex) {\n            console.error('ERROR', ex);\n            dispatch(navigateError(ex.message));\n        }\n\n    };\n}\n","import { Action, Reducer } from 'redux';\nimport { baseReducer, BaseStoreState } from '@kbase/ui-components';\nimport { StoreState } from './store';\nimport { AppActions, NavigateSuccess } from './actions';\n\nfunction navigateSuccess(state: StoreState, action: NavigateSuccess): StoreState {\n    return {\n        ...state,\n        // view: {\n        //     status: ViewStatus.LOADED,\n        //     relationEngineID: action.relationEngineID,\n        //     relationEngineNodeType: action.relationEngineNodeType,\n        //     viewType: action.viewType,\n        //     currentView: action.view\n        // }\n        navigation: action.navigation,\n        trigger: Date.now()\n    };\n}\n\n// function navigateStart(state: StoreState, action: NavigateStart): StoreState {\n//     return {\n//         ...state,\n//         view: {\n//             status: ViewStatus.LOADING\n//         }\n//     };\n// }\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    const baseState = baseReducer(state as BaseStoreState, action);\n    if (baseState) {\n        return baseState as StoreState;\n    }\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        // case AppActions.NAVIGATE_START:\n        //     return navigateStart(state, action as NavigateStart);\n        case AppActions.NAVIGATE_SUCCESS:\n            return navigateSuccess(state, action as NavigateSuccess);\n    }\n    return state;\n};\n\nexport default reducer;\n","import { BaseStoreState, makeBaseStoreState } from '@kbase/ui-components';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducers';\n\nimport { TaxonomyStoreState } from '../landingPages/taxonomy/redux/store';\nimport { TaxonReference } from '../types/taxonomy';\nimport { OntologyReference } from '../types/ontology';\n\nexport enum ViewType {\n    NONE,\n    TAXONOMY,\n    ONTOLOGY\n}\n\nexport type RelationEngineID = string;\nexport enum RelationEngineNodeType {\n    TAXON,\n    ONTOLOGY_TERM\n}\n\nexport enum ViewStatus {\n    NONE,\n    LOADING,\n    LOADED,\n    ERROR\n}\n\nexport interface RelationEngineViewBase {\n    status: ViewStatus;\n}\n\nexport interface RelationEngineViewNone {\n    status: ViewStatus.NONE;\n}\n\nexport interface RelationEngineViewLoading {\n    status: ViewStatus.LOADING;\n}\n\nexport interface RelationEngineViewLoaded {\n    status: ViewStatus.LOADED;\n    relationEngineID: RelationEngineID;\n    relationEngineNodeType: RelationEngineNodeType;\n    viewType: ViewType;\n    currentView: LandingPageView;\n}\n\nexport interface RelationEngineViewError {\n    status: ViewStatus.ERROR;\n    message: string;\n}\n\nexport type RelationEngineView =\n    | RelationEngineViewNone\n    | RelationEngineViewLoading\n    | RelationEngineViewLoaded\n    | RelationEngineViewError;\n\nexport interface LandingPageStoreState { }\n\n// VIEW STATE\n\nexport interface ViewStateNone<T> {\n    status: ViewStatus.NONE;\n}\n\nexport interface ViewStateLoading<T> {\n    status: ViewStatus.LOADING;\n    type: T;\n}\n\nexport interface ViewStateError<T> {\n    status: ViewStatus.ERROR;\n    error: string;\n    type: T;\n}\n\nexport interface ViewStateLoaded<T, S> {\n    status: ViewStatus.LOADED;\n    type: T;\n    state: S;\n}\nexport type ViewState<T, S> = ViewStateNone<T> | ViewStateLoading<T> | ViewStateLoaded<T, S> | ViewStateError<T>;\n\nexport type TaxonomyView = ViewState<ViewType.TAXONOMY, TaxonomyStoreState>;\n\nexport interface NavigationBase {\n    type: ViewType;\n    relationEngineID: RelationEngineID;\n}\n\nexport interface NavigationNone {\n    type: ViewType.NONE;\n}\n\nexport interface NavigationTaxonomy {\n    type: ViewType.TAXONOMY;\n    ref: TaxonReference\n    // namespace: string;\n    // id: string;\n    // timestamp?: number\n    // relationEngineID: RelationEngineID;\n}\n\nexport interface NavigationOntology {\n    type: ViewType.ONTOLOGY;\n    ref: OntologyReference\n    // namespace: string;\n    // id: string;\n    // timestamp?: number\n    // relationEngineID: RelationEngineID;\n}\n\nexport type NavigationSome = NavigationTaxonomy | NavigationOntology;\nexport type Navigation = NavigationNone | NavigationSome;\n\n// export interface ViewState<T, S> {\n//     type: T;\n//     state: S;\n// }\n\nexport type LandingPageView = TaxonomyView;\n\n// STORE STATE type definition\nexport interface StoreState extends BaseStoreState {\n    // viewer: TaxonView | null;\n    // view: RelationEngineView;\n    navigation: Navigation;\n    trigger: number;\n}\n\n// Store Construction\nexport function makeInitialStoreState(): StoreState {\n    const baseStoreState = makeBaseStoreState();\n    return {\n        ...baseStoreState,\n        // viewer: null,\n        navigation: {\n            type: ViewType.NONE\n        },\n        trigger: 0\n    };\n}\n\nexport function createReduxStore() {\n    return createStore(reducer, makeInitialStoreState(), compose(applyMiddleware(thunk)));\n}\n","import { UIError } from \"../types\";\n\nexport interface DBProps<T> {\n    onUpdate: () => void;\n    initialData: T;\n}\n\nexport interface TheDB<T> {\n    data: T;\n}\n\nexport enum DBStatus {\n    NONE,\n    LOADING,\n    LOADED,\n    RELOADING,\n    ERROR\n}\n\nexport interface DBStateNone {\n    status: DBStatus.NONE;\n}\n\nexport interface DBStateLoading {\n    status: DBStatus.LOADING;\n}\n\nexport interface DBStateReLoading {\n    status: DBStatus.RELOADING;\n}\n\nexport interface DBStateLoaded {\n    status: DBStatus.LOADED;\n}\n\nexport interface DBStateError {\n    status: DBStatus.ERROR;\n    error: UIError;\n}\n\nexport default class DB<T> {\n    db: TheDB<T>;\n    stopped: boolean;\n    onUpdate: () => void;\n    constructor(props: DBProps<T>) {\n        this.onUpdate = props.onUpdate;\n        this.db = {\n            data: props.initialData\n        };\n        this.stopped = false;\n    }\n\n    forceComponentUpdate() {\n        if (this.stopped) {\n            return;\n        }\n        this.onUpdate();\n    }\n\n    set(updateFun: (state: T) => T) {\n        this.db.data = updateFun(this.db.data);\n        this.forceComponentUpdate();\n    }\n\n    get(): T {\n        return this.db.data;\n    }\n\n    stop() {\n        this.stopped = true;\n    }\n}\n","import { DynamicServiceClient, DynamicServiceClientParams } from '@kbase/ui-lib';\n\ninterface TaxonomyAPIParams extends DynamicServiceClientParams { }\n\ntype TaxonID = string;\n\ninterface GetAncestorsParams {\n    id: TaxonID;\n}\n\ninterface GetDescendentsParams {\n    id: TaxonID;\n}\n\n// interface GetTaxonResultSuccess {\n//     count: true;\n//     taxon: Taxon;\n// }\n\n// interface GetTaxonResultNotFound {\n//     found: false;\n// }\n\n// type GetTaxonResult = GetTaxonResultSuccess | GetTaxonResultNotFound;\n\ninterface TaxonAlias {\n    canonical: Array<string>;\n    category: string;\n    name: string;\n}\n\ninterface TaxonResult {\n    NCBI_taxon_id: number;\n    _id: string;\n    _key: string;\n    _rev: string;\n    id: string;\n    ns: string;\n    ts: number;\n    aliases: Array<TaxonAlias>;\n    canonical_scientific_name: Array<string>;\n    gencode: string;\n    rank: string;\n    scientific_name: string;\n}\n\nexport interface GetTaxonParams {\n    ns: string;\n    id: TaxonID;\n    ts: number\n}\n\ninterface GetTaxonResult {\n    count: number;\n    cursor_id: number | null;\n    has_more: false;\n    stats: {\n        executionTime: number;\n        filtered: number;\n        httpRequests: number;\n        scannedFull: number;\n        scannedIndex: number;\n        writesExecuted: number;\n        writesIgnored: number;\n    };\n    results: Array<TaxonResult>;\n    ts: number;\n}\n\ninterface GetLineageResult {\n    stats: {\n        executionTime: number;\n        filtered: number;\n        httpRequests: number;\n        scannedFull: number;\n        scannedIndex: number;\n        writesExecuted: number;\n        writesIgnored: number;\n    };\n    results: Array<TaxonResult>;\n    ts: number;\n}\n\ninterface GetChildrenResult {\n    stats: {\n        executionTime: number;\n        filtered: number;\n        httpRequests: number;\n        scannedFull: number;\n        scannedIndex: number;\n        writesExecuted: number;\n        writesIgnored: number;\n    };\n    results: Array<TaxonResult>;\n    total_count: number;\n    ts: number;\n}\nexport interface Stats {\n    executionTime: number;\n    filtered: number;\n    httpRequests: number;\n    scannedFull: number;\n    scannedIndex: number;\n    writesExecuted: number;\n    writesIgnored: number;\n}\nexport interface GetAssociatedWorkspaceObjectsResultResult {\n    edge: {\n        _id: string;\n        assigned_by: string;\n        updated_at: number;\n    };\n    ws_obj: {\n        _id: string;\n        deleted: boolean;\n        epoch: number;\n        hash: string;\n        is_public: boolean;\n        name: string;\n        object_id: number;\n        size: number;\n        updated_at: number;\n        version: number;\n        workspace_id: number;\n        type: {\n            module_name: string;\n            type_name: string;\n            maj_ver: number;\n            min_ver: number;\n        }\n    };\n}\n\nexport interface GetAssociatedWorkspaceObjectsResult {\n    results: Array<GetAssociatedWorkspaceObjectsResultResult>;\n    total_count: number;\n    stats: Stats;\n    ts: number;\n}\n\nexport interface GetLineageParams {\n    ns: string;\n    id: TaxonID;\n    ts: number;\n}\n\nexport interface GetChildrenParams {\n    ns: string;\n    id: TaxonID;\n    ts: number;\n    offset: number;\n    limit: number;\n    search_text: string;\n}\n\nexport interface GetAssociatedWorkspaceObjectsParams {\n    taxon_ns: string;\n    taxon_id: TaxonID;\n    ts: number;\n    limit: number;\n    offset: number;\n}\n\nexport default class TaxonomyAPIClient extends DynamicServiceClient {\n    static module: string = 'taxonomy_re_api';\n\n    async getLineage({ ns, id, ts }: { ns: string, id: TaxonID, ts: number }): Promise<GetLineageResult> {\n        const params: GetLineageParams = {\n            ns, id, ts\n        };\n        const [result] = await this.callFunc<[GetLineageParams], [GetLineageResult]>('get_lineage', [\n            params\n        ]);\n        return result;\n    }\n\n    async getChildren({\n        ns,\n        id,\n        ts,\n        offset,\n        limit,\n        searchTerm\n    }: {\n        ns: string,\n        id: TaxonID,\n        ts: number,\n        offset: number,\n        limit: number,\n        searchTerm: string\n    }): Promise<GetChildrenResult> {\n        const [result] = await this.callFunc<[GetChildrenParams], [GetChildrenResult]>('get_children', [\n            {\n                ns, id, ts,\n                offset,\n                limit,\n                search_text: searchTerm\n            }\n        ]);\n        return result;\n    }\n\n    async getTaxon({ ns, id, ts }: { ns: string, id: TaxonID, ts: number }): Promise<GetTaxonResult> {\n        const params: GetTaxonParams = {\n            ns, id, ts\n        }\n        const [result] = await this.callFunc<[GetTaxonParams], [GetTaxonResult]>('get_taxon', [\n            params\n        ]);\n        return result;\n    }\n\n    async getAssociatedWorkspaceObjects({\n        taxon_ns,\n        taxon_id,\n        ts,\n        offset,\n        limit\n    }: {\n        taxon_ns: string,\n        taxon_id: TaxonID,\n        ts: number,\n        offset: number,\n        limit: number\n    }): Promise<GetAssociatedWorkspaceObjectsResult> {\n        const params: GetAssociatedWorkspaceObjectsParams = {\n            taxon_ns, taxon_id, ts, limit, offset\n        }\n        const [result] = await this.callFunc<[GetAssociatedWorkspaceObjectsParams], [GetAssociatedWorkspaceObjectsResult]>('get_associated_ws_objects', [\n            params\n        ]);\n        return result;\n    }\n}\n","import { TaxonReference, Taxon, TaxonomyNamespace, NCBITaxon, taxonomyNamespaceToString } from '../../../types/taxonomy';\nimport TaxonAPIClient from './TaxonAPIClient';\nimport { RelationEngineCollection } from '../../../types';\nimport { WorkspaceType } from '../../../types/ontology';\n\n// const INITIAL_BATCH_SIZE = 100;\n// const BATCH_SIZE = 1000;\n// const TOTAL_LIMIT = 10000;\n// const PARALLELISM = 2;\n\nexport interface GetChildrenOptions {\n    offset: number;\n    limit: number;\n    searchTerm: string;\n}\n\nexport interface WorkspaceType {\n    module: string;\n    name: string;\n    majorVersion: number;\n    minorVersion: number;\n}\n\nexport interface LinkedObject {\n    linkedAt: number;\n    workspaceID: number;\n    objectID: number;\n    version: number;\n    objectName: string;\n    workspaceUpdatedAt: number;\n    createdAt: number;\n    type: WorkspaceType;\n}\n\nexport interface GetLinkedObjectsOptions {\n    offset: number;\n    limit: number;\n}\n\nexport interface GetLinkedObjectsResult {\n    linkedObjects: Array<LinkedObject>;\n    totalCount: number;\n}\n\nexport class TaxonomyModel {\n    taxonomyClient: TaxonAPIClient;\n    constructor({ token, url }: { token: string; url: string }) {\n        this.taxonomyClient = new TaxonAPIClient({ token, url });\n    }\n\n    async getLineage(taxonRef: TaxonReference): Promise<Array<Taxon>> {\n        const {\n            namespace, id, timestamp\n        } = taxonRef;\n        const result = await this.taxonomyClient.getLineage({\n            ns: taxonomyNamespaceToString(namespace),\n            id,\n            ts: timestamp\n        });\n        // TODO: should be conditional based on the source of the taxonomy??\n        const taxons: Array<NCBITaxon> = result.results.map((taxonResult) => {\n            let isBiological: boolean;\n            if (taxonResult.scientific_name === 'root' || taxonResult.scientific_name === 'cellular organisms') {\n                isBiological = false;\n            } else {\n                isBiological = true;\n            }\n            return {\n                ref: {\n                    collection: RelationEngineCollection.TAXONOMY,\n                    namespace: TaxonomyNamespace.NCBI,\n                    id: taxonResult.id,\n                    timestamp: result.ts\n                },\n                name: taxonResult.scientific_name,\n                rank: taxonResult.rank,\n                ncbiID: taxonResult.NCBI_taxon_id,\n                geneticCode: parseInt(taxonResult.gencode),\n                aliases: taxonResult.aliases.map(({ name, category }) => {\n                    return {\n                        name,\n                        category\n                    };\n                }),\n                isBiological\n            };\n        });\n        return taxons;\n    }\n\n    async getChildren(taxonRef: TaxonReference, options: GetChildrenOptions): Promise<[Array<Taxon>, number]> {\n        const {\n            namespace, id, timestamp\n        } = taxonRef;\n\n        const result = await this.taxonomyClient.getChildren({\n            ns: taxonomyNamespaceToString(namespace),\n            id,\n            ts: timestamp,\n            offset: options.offset,\n            limit: options.limit,\n            searchTerm: options.searchTerm\n        });\n\n        const taxa: Array<NCBITaxon> = result.results.map((taxonResult) => {\n            let isBiological: boolean;\n            if (taxonResult.scientific_name === 'root' || taxonResult.scientific_name === 'cellular organisms') {\n                isBiological = false;\n            } else {\n                isBiological = true;\n            }\n            return {\n                ref: {\n                    collection: RelationEngineCollection.TAXONOMY,\n                    namespace: TaxonomyNamespace.NCBI,\n                    id: taxonResult.id,\n                    timestamp: result.ts\n                },\n                name: taxonResult.scientific_name,\n                rank: taxonResult.rank,\n                ncbiID: taxonResult.NCBI_taxon_id,\n                geneticCode: parseInt(taxonResult.gencode),\n                aliases: taxonResult.aliases.map(({ name, category }) => {\n                    return {\n                        name,\n                        category\n                    };\n                }),\n                isBiological\n            };\n        });\n        return [taxa, result.total_count];\n    }\n\n    // async getChildrenx(taxonID: TaxonID, options: GetChildrenOptions): Promise<[Array<Taxon>, number, number]> {\n    //     // Loop over results until done!\n    //     // Get the first batch. In the majority of cases, this will be it.\n\n    //     const getBatch = async (batch: number, batchSize: number): Promise<[Array<Taxon>, number]> => {\n    //         const offset = batch * batchSize;\n    //         const result = await this.taxonomyClient.getChildren({\n    //             taxonID,\n    //             offset,\n    //             limit: batchSize\n    //         });\n\n    //         const taxa = result.results.map((taxonResult) => {\n    //             let isBiological: boolean;\n    //             if (taxonResult.scientific_name === 'root' || taxonResult.scientific_name === 'cellular organisms') {\n    //                 isBiological = false;\n    //             } else {\n    //                 isBiological = true;\n    //             }\n    //             return {\n    //                 type: TaxonomySource.NCBI,\n    //                 id: taxonResult._id,\n    //                 name: taxonResult.scientific_name,\n    //                 rank: taxonResult.rank,\n    //                 ncbiID: taxonResult.NCBI_taxon_id,\n    //                 geneticCode: parseInt(taxonResult.gencode),\n    //                 aliases: taxonResult.aliases.map(({ name, category }) => {\n    //                     return {\n    //                         name,\n    //                         category\n    //                     };\n    //                 }),\n    //                 isBiological\n    //             };\n    //         });\n    //         return [taxa, result.total_count];\n    //     };\n\n    //     const [taxa, totalCount] = await getBatch(0, INITIAL_BATCH_SIZE);\n\n    //     if (totalCount <= taxa.length) {\n    //         return [taxa, totalCount, totalCount];\n    //     }\n\n    //     // Here we cap the total results requested to TOTAL_LIMIT\n    //     let totalLimit = Math.min(totalCount, TOTAL_LIMIT);\n\n    //     // How many batches do we need to fetch?\n    //     const totalBatchCount = Math.ceil((totalLimit - INITIAL_BATCH_SIZE) / BATCH_SIZE);\n\n    //     // In order to avoid overwhelming the service, we need to limit the\n    //     // # of concurrent requests.\n    //     const iterations = Math.ceil(totalBatchCount / PARALLELISM);\n\n    //     console.log('BATCHES', totalBatchCount, iterations);\n\n    //     let result = taxa;\n\n    //     console.log('taxa', taxa);\n\n    //     for (let iter = 0; iter < iterations; iter += 1) {\n    //         const pendingBatches: Array<Promise<[Array<Taxon>, number]>> = [];\n\n    //         const batchCount = Math.min(PARALLELISM, totalBatchCount - iter * PARALLELISM);\n\n    //         console.log(`iter ${iter}`);\n\n    //         for (let batch = 0; batch < batchCount; batch += 1) {\n    //             const offset = iter * PARALLELISM + batch;\n    //             const batchSize = Math.min(BATCH_SIZE, totalLimit - offset * BATCH_SIZE);\n    //             console.log('BATCH SIZE', batchSize, iter, batch, totalLimit - offset * BATCH_SIZE);\n    //             pendingBatches.push(getBatch(offset, batchSize));\n    //             // const [nextResult] = await getBatch(i);\n    //             // console.log('adding another batch', nextResult);\n    //             // result = result.concat(nextResult);\n    //         }\n\n    //         const batches = await Promise.all(pendingBatches);\n\n    //         result = result.concat.apply(\n    //             result,\n    //             batches.map(([taxa, count]) => {\n    //                 return taxa;\n    //             })\n    //         );\n    //     }\n\n    //     return [result, totalCount, totalLimit];\n    // }\n\n    async getTaxon(taxonRef: TaxonReference): Promise<Taxon> {\n        const {\n            namespace, id, timestamp\n        } = taxonRef;\n\n        const result = await this.taxonomyClient.getTaxon({\n            ns: taxonomyNamespaceToString(namespace),\n            id,\n            ts: timestamp\n        });\n\n        // if (!result.count) {\n        //     throw new Error(`Taxon not found`);\n        // }\n        const taxonResult = result.results[0];\n        let isBiological: boolean;\n        if (taxonResult.scientific_name === 'root' || taxonResult.scientific_name === 'cellular organisms') {\n            isBiological = false;\n        } else {\n            isBiological = true;\n        }\n\n        // TODO: here and above, we need to determine the namespace enum value by \n        // comparing the string coming in...\n        const taxon: Taxon = {\n            ref: {\n                collection: RelationEngineCollection.TAXONOMY,\n                namespace: TaxonomyNamespace.NCBI,\n                id: taxonResult.id,\n                timestamp: result.ts\n            },\n            name: taxonResult.scientific_name,\n            rank: taxonResult.rank,\n            ncbiID: taxonResult.NCBI_taxon_id,\n            geneticCode: parseInt(taxonResult.gencode),\n            aliases: taxonResult.aliases.map(({ name, category }) => {\n                return {\n                    name,\n                    category\n                };\n            }),\n            isBiological\n        };\n        return taxon;\n    }\n\n    async getLinkedObjects(taxonRef: TaxonReference, options: GetLinkedObjectsOptions): Promise<GetLinkedObjectsResult> {\n        const params = {\n            taxon_ns: taxonomyNamespaceToString(taxonRef.namespace),\n            taxon_id: taxonRef.id,\n            ts: taxonRef.timestamp,\n            offset: options.offset,\n            limit: options.limit\n        };\n        const result = await this.taxonomyClient.getAssociatedWorkspaceObjects(params);\n\n        const linkedObjects = result.results.map((result) => {\n            return {\n                linkedAt: result.edge.updated_at,\n                objectID: result.ws_obj.object_id,\n                workspaceID: result.ws_obj.workspace_id,\n                version: result.ws_obj.version,\n                objectName: result.ws_obj.name,\n                createdAt: result.ws_obj.epoch,\n                workspaceUpdatedAt: result.ws_obj.updated_at,\n                type: {\n                    module: result.ws_obj.type.module_name,\n                    name: result.ws_obj.type.type_name,\n                    majorVersion: result.ws_obj.type.maj_ver,\n                    minorVersion: result.ws_obj.type.min_ver\n                }\n            };\n        });\n        return {\n            linkedObjects,\n            totalCount: result.total_count\n        };\n    }\n}\n","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../../../lib/DB';\nimport { AppConfig } from '@kbase/ui-components';\nimport { Taxon, TaxonReference } from '../../../types/taxonomy';\nimport { TaxonomyModel } from '../lib/model';\n\nexport type TaxonDBStateNone = DBStateNone;\nexport type TaxonDBStateLoading = DBStateLoading;\nexport type TaxonDBStateError = DBStateError;\n\nexport interface TaxonDBStateLoaded extends DBStateLoaded {\n    targetTaxon: Taxon;\n    selectedTaxon: Taxon;\n}\n\nexport type TaxonDBState = TaxonDBStateNone | TaxonDBStateLoading | TaxonDBStateLoaded | TaxonDBStateError;\n\nexport interface TaxonDBProps extends DBProps<TaxonDBState> {\n    token: string;\n    config: AppConfig;\n}\n\n// TODO: make props part of generic\nexport default class TaxonDB extends DB<TaxonDBState> {\n    props: TaxonDBProps;\n    constructor(props: TaxonDBProps) {\n        super(props);\n        this.props = props;\n    }\n    async getTargetTaxon(taxonRef: TaxonReference) {\n        try {\n            this.set((state: TaxonDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADING\n                };\n            });\n\n            const client = new TaxonomyModel({\n                token: this.props.token,\n                url: this.props.config.services.ServiceWizard.url\n            });\n\n            const taxon = await client.getTaxon(taxonRef);\n            this.set((state: TaxonDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    targetTaxon: taxon,\n                    selectedTaxon: taxon\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: TaxonDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    error: {\n                        code: 'not-found',\n                        source: 'TaxonDB.getTargetTaxon',\n                        message: ex.message,\n                    }\n                };\n            });\n        }\n    }\n\n    async getSelectedTaxon(taxonRef: TaxonReference) {\n        try {\n            // this.set((state: TaxonDBState) => {\n            //     return {\n            //         ...state,\n            //         status: DBStatus.LOADING\n            //     };\n            // });\n\n            const client = new TaxonomyModel({\n                token: this.props.token,\n                url: this.props.config.services.ServiceWizard.url\n            });\n\n            const taxon = await client.getTaxon(taxonRef);\n            this.set((state: TaxonDBState) => {\n                return {\n                    ...state,\n                    selectedTaxon: taxon\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: TaxonDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    error: {\n                        code: 'not-found',\n                        source: 'TaxonDB.getSelectedTaxon',\n                        message: ex.message,\n                    }\n                };\n            });\n        }\n    }\n}\n","import React from 'react';\nimport './SourceInfo.css';\n\nexport interface SourceInfoProps {}\n\ninterface SourceInfoState {}\n\nexport class SourceInfo extends React.Component<SourceInfoProps, SourceInfoState> {\n    render() {\n        return (\n            <div className=\"Row\">\n                <div className=\"Col-auto\">\n                    <img src=\"images/ncbi-logo.jpg\" style={{ height: '64px' }} alt=\"NCBI Logo\" />\n                </div>\n                <div className=\"Col\">\n                    <div className=\"InfoTable\">\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                                Source\n                            </div>\n                            <div className=\"InfoTable-dataCol\">\n                                <a\n                                    href=\"https://www.ncbi.nlm.nih.gov/guide/taxonomy/\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    NCBI\n                                </a>\n                            </div>\n                        </div>\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                                Version\n                            </div>\n                            <div className=\"InfoTable-dataCol\">SOME VERSION</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Taxon, TaxonReference, taxonomyNamespaceToString } from '../../types/taxonomy';\nimport { Tooltip, Icon } from 'antd';\nimport './TaxonItem.css';\nimport { relationEngineCollectionToString } from '../../types';\n\nexport interface Props {\n    taxon: Taxon;\n    isActive: boolean;\n    selectTaxonRef: (ref: TaxonReference) => void;\n    navigateToTaxonRef: (ref: TaxonReference) => void;\n}\n\ninterface State {\n    hovering: boolean;\n}\n\nexport default class TaxonItem extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            hovering: false\n        };\n    }\n    clickTaxon() {\n        this.props.selectTaxonRef(this.props.taxon.ref);\n    }\n    clickNavigateToTaxon() {\n        // const fixedID = this.props.taxon.id.replace('/', ':');\n        const hash = [\n            'review',\n            relationEngineCollectionToString(this.props.taxon.ref.collection),\n            taxonomyNamespaceToString(this.props.taxon.ref.namespace),\n            this.props.taxon.ref.id,\n            String(this.props.taxon.ref.timestamp)\n        ].join('/');\n        // const hash = `review/${fixedID}`;\n        // TODO: use the integration api?\n        if (window.parent) {\n            window.parent.location.hash = hash;\n        } else {\n            window.location.hash = hash;\n        }\n        // window.history.pushState({}, 'my title', `/#review/${this.props.taxon.id}`);\n        // this.props.navigateToTaxonID(this.props.taxon.id);\n    }\n\n    onMouseEnter(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: true });\n    }\n\n    onMouseLeave(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: false });\n    }\n\n    renderOver() {\n        return (\n            <React.Fragment>\n                <div className=\"TaxonItem-name\" onClick={this.clickNavigateToTaxon.bind(this)}>\n                    {this.props.taxon.name}\n                </div>\n                <div className=\"TaxonItem-inspector\" onClick={this.clickTaxon.bind(this)}>\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderActive() {\n        return (\n            <React.Fragment>\n                <div className=\"TaxonItem-name\" onClick={this.clickNavigateToTaxon.bind(this)}>\n                    {this.props.taxon.name}\n                </div>\n                <div className=\"TaxonItem-inspector\">\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderNormal() {\n        return (\n            <React.Fragment>\n                <div className=\"TaxonItem-name\">{this.props.taxon.name}</div>\n            </React.Fragment>\n        );\n    }\n\n    renderItem() {\n        if (this.props.isActive) {\n            return this.renderActive();\n        }\n        if (this.state.hovering) {\n            return this.renderOver();\n        } else {\n            return this.renderNormal();\n        }\n    }\n\n    render() {\n        const taxon = this.props.taxon;\n        const classNames = ['TaxonItem'];\n        if (this.props.isActive) {\n            classNames.push('TaxonItem-active');\n        }\n\n        const tooltipTitle = (\n            <div>\n                <div style={{ borderBottom: '1px solid silver' }}>{taxon.name}</div>\n                <div>{taxon.rank}</div>\n            </div>\n        );\n\n        return (\n            <Tooltip title={tooltipTitle} placement=\"right\">\n                <div\n                    className={classNames.join(' ')}\n                    key={this.props.taxon.ref.id}\n                    onMouseEnter={this.onMouseEnter.bind(this)}\n                    onMouseLeave={this.onMouseLeave.bind(this)}\n                >\n                    {this.renderItem()}\n                </div>\n            </Tooltip>\n        );\n    }\n}\n","import DB, {\n    DBProps,\n    DBStatus,\n    DBStateNone,\n    DBStateLoading,\n    DBStateLoaded,\n    DBStateError,\n    DBStateReLoading\n} from '../../../lib/DB';\nimport { AppConfig } from '@kbase/ui-components';\nimport { Taxon, TaxonReference } from '../../../types/taxonomy';\nimport { TaxonomyModel } from '../lib/model';\n\nexport type TaxonDBStateNone = DBStateNone;\nexport type TaxonDBStateLoading = DBStateLoading;\nexport type TaxonDBStateError = DBStateError;\n\nexport interface TaxonDBStateLoaded extends DBStateLoaded {\n    taxa: Array<Taxon>;\n    total: number;\n    page: number;\n    pageSize: number;\n}\n\nexport interface TaxonDBStateReLoading extends DBStateReLoading {\n    taxa: Array<Taxon>;\n    total: number;\n    page: number;\n    pageSize: number;\n}\n\nexport type TaxonDBState =\n    | TaxonDBStateNone\n    | TaxonDBStateLoading\n    | TaxonDBStateLoaded\n    | TaxonDBStateReLoading\n    | TaxonDBStateError;\n\nexport interface TaxonDBProps extends DBProps<TaxonDBState> {\n    token: string;\n    config: AppConfig;\n}\n\nexport default class TaxonChildrenDB extends DB<TaxonDBState> {\n    token: string;\n    serviceWizardURL: string;\n    constructor(props: TaxonDBProps) {\n        super(props);\n        this.token = props.token;\n        this.serviceWizardURL = props.config.services.ServiceWizard.url;\n    }\n    // Remember, pages are 1 based; offset is 0 based.\n    // async fetchTaxa(taxonID: TaxonID, page: number, pageSize: number) {\n    //     try {\n    //         this.set((state: TaxonDBState) => {\n    //             return {\n    //                 ...state,\n    //                 status: DBStatus.LOADING\n    //             };\n    //         });\n\n    //         const client = new TaxonomyModel({\n    //             token: this.token,\n    //             url: this.serviceWizardURL\n    //         });\n\n    //         const offset = (page - 1) * pageSize;\n    //         const limit = pageSize;\n\n    //         const [taxa, totalCount] = await client.getChildren(taxonID, {\n    //             offset,\n    //             limit\n    //         });\n    //         this.set((state: TaxonDBState) => {\n    //             return {\n    //                 ...state,\n    //                 status: DBStatus.LOADED,\n    //                 taxa,\n    //                 total: totalCount,\n    //                 page,\n    //                 pageSize\n    //             };\n    //         });\n    //     } catch (ex) {\n    //         console.error('ERROR', ex);\n    //         this.set((state: TaxonDBState) => {\n    //             return {\n    //                 status: DBStatus.ERROR,\n    //                 message: ex.message\n    //             };\n    //         });\n    //     }\n    // }\n\n    async fetchChildren({\n        taxonRef,\n        page,\n        pageSize,\n        searchTerm\n    }: {\n        taxonRef: TaxonReference;\n        page: number;\n        pageSize: number;\n        searchTerm: string;\n    }) {\n        try {\n            this.set((state: TaxonDBState) => {\n                if (state.status === DBStatus.LOADED) {\n                    return {\n                        ...state,\n                        status: DBStatus.RELOADING\n                    };\n                } else {\n                    return {\n                        ...state,\n                        status: DBStatus.LOADING\n                    };\n                }\n            });\n\n            const client = new TaxonomyModel({\n                token: this.token,\n                url: this.serviceWizardURL\n            });\n\n            const offset = (page - 1) * pageSize;\n            const limit = pageSize;\n\n            const [taxa, totalCount] = await client.getChildren(taxonRef, {\n                offset,\n                limit,\n                searchTerm\n            });\n            this.set((state: TaxonDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    taxa,\n                    total: totalCount,\n                    page,\n                    pageSize\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: TaxonDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    error: {\n                        code: 'not-found',\n                        source: 'TaxonChildrenDB.fetchChildren',\n                        message: ex.message,\n                    }\n                };\n            });\n        }\n    }\n}\n","import React from 'react';\nimport { Taxon, TaxonReference } from '../../types/taxonomy';\nimport './TaxonList.css';\nimport TaxonItem from './TaxonItem';\nimport { Empty } from 'antd';\n\nexport interface Props {\n    taxa: Array<Taxon>;\n    maxItems: number;\n    totalItems: number;\n    selectedTaxonRef: TaxonReference | null;\n    selectTaxonRef: (ref: TaxonReference) => void;\n    navigateToTaxonRef: (ref: TaxonReference) => void;\n}\n\ninterface State { }\n\nexport default class TaxonList extends React.Component<Props, State> {\n    selectTaxon(ref: TaxonReference) {\n        this.props.selectTaxonRef(ref);\n    }\n    navigateToTaxon(ref: TaxonReference) {\n        this.props.navigateToTaxonRef(ref);\n    }\n    renderItemsPlain() {\n        return this.props.taxa.map((taxon, index) => {\n            const isActive = this.props.selectedTaxonRef !== null &&\n                this.props.selectedTaxonRef.id === taxon.ref.id;\n            return (\n                <TaxonItem\n                    taxon={taxon}\n                    isActive={isActive}\n                    selectTaxonRef={this.selectTaxon.bind(this)}\n                    key={String(index)}\n                    navigateToTaxonRef={this.navigateToTaxon.bind(this)}\n                />\n            );\n        });\n    }\n    renderNoItems() {\n        return <Empty description=\"No Children\" image={Empty.PRESENTED_IMAGE_SIMPLE} />;\n    }\n    render() {\n        if (this.props.taxa.length === 0) {\n            return this.renderNoItems();\n        }\n        return this.renderItemsPlain();\n    }\n}\n","import React from 'react';\nimport { UIError } from \"../types\";\nimport { Alert, Icon } from 'antd';\n\nexport interface ErrorViewProps {\n    error: UIError\n}\n\ninterface ErrorViewState {\n\n}\n\nexport default class ErrorView extends React.Component<ErrorViewProps, ErrorViewState> {\n    renderMessage() {\n        return (\n            // <Icon type=\"exclamation-circle\" />\n            <span>\n                <Icon type=\"exclamation-circle\" style={{ color: 'red' }} />\n                {' '}\n                {this.props.error.message}\n            </span>\n        )\n    }\n    render() {\n        return (\n            <Alert type=\"error\" message={this.renderMessage()}></Alert>\n        )\n    }\n}","import React from 'react';\nimport { Pagination, Icon, Input, Spin } from 'antd';\nimport TaxonList from '../TaxonList';\nimport { TaxonReference } from '../../../types/taxonomy';\nimport { TaxonDBState, TaxonDBStateError, TaxonDBStateLoaded, TaxonDBStateReLoading } from './TaxonChildrenDB';\nimport { DBStatus } from '../../../lib/DB';\nimport './index.css';\nimport ErrorView from '../../../components/ErrorView';\n\nconst DEFAULT_PAGE_SIZE = 10;\n\nexport interface Props {\n    db: TaxonDBState;\n    taxonRef: TaxonReference;\n    selectedTaxonRef: TaxonReference | null;\n    // taxa: Array<Taxon>;\n    // total: number;\n    selectTaxonRef: (taxonRef: TaxonReference) => void;\n    navigateToTaxonRef: (taxonRef: TaxonReference) => void;\n    fetchChildren: (taxonRef: TaxonReference, page: number, pageSize: number, searchTerm: string) => void;\n}\n\nexport interface State { }\n\nexport default class TaxonChildren extends React.Component<Props, State> {\n    searchTerm: string;\n    page: number;\n    pageSize: number | null;\n    constructor(props: Props) {\n        super(props);\n        this.searchTerm = '';\n        this.page = 1;\n        this.pageSize = null;\n    }\n    componentDidMount() {\n        this.props.fetchChildren(this.props.taxonRef, 1, DEFAULT_PAGE_SIZE, '');\n    }\n    renderTaxaNone() {\n        return <div>None</div>;\n    }\n    renderTaxaLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderTitleLoaded(db: TaxonDBStateLoaded | TaxonDBStateReLoading) {\n        if (db.total === 0) {\n            return <div className=\"Col-auto TaxonChildren-box-title\">No Children</div>;\n        }\n\n        const totalCount = Intl.NumberFormat('en-US', {\n            useGrouping: true\n        }).format(db.total);\n        const currentItem = (db.page - 1) * db.pageSize + 1;\n        const lastItem = currentItem + db.taxa.length - 1;\n\n        return (\n            <div className=\"Col-auto TaxonChildren-box-title\">\n                Children ({currentItem}-{lastItem} of {totalCount})\n            </div>\n        );\n    }\n\n    renderTitleReLoading(db: TaxonDBStateReLoading) {\n        return <Spin size=\"small\">{this.renderTitleLoaded(db)}</Spin>;\n    }\n\n    renderTitle() {\n        const db = this.props.db;\n        switch (db.status) {\n            case DBStatus.NONE:\n            case DBStatus.LOADING:\n                return <div>Loading...</div>;\n            case DBStatus.ERROR:\n                return <ErrorView error={db.error} />\n            case DBStatus.LOADED:\n                return this.renderTitleLoaded(db);\n            case DBStatus.RELOADING:\n                return this.renderTitleReLoading(db);\n        }\n    }\n    doSearch(term: string) {\n        this.searchTerm = term;\n        this.props.fetchChildren(this.props.taxonRef, 1, this.pageSize || DEFAULT_PAGE_SIZE, term);\n    }\n    renderSearch() {\n        const disabled =\n            this.props.db.status !== DBStatus.LOADED ||\n            (this.props.db.total <= this.props.db.pageSize && !this.searchTerm);\n        return (\n            <div style={{ marginBottom: '4px' }}>\n                <Input.Search placeholder=\"Search Children\" onSearch={this.doSearch.bind(this)} disabled={disabled} />\n            </div>\n        );\n    }\n    renderTaxaLoaded(db: TaxonDBStateLoaded | TaxonDBStateReLoading) {\n        return (\n            <React.Fragment>\n                <TaxonList\n                    taxa={db.taxa}\n                    selectedTaxonRef={this.props.selectedTaxonRef}\n                    selectTaxonRef={this.props.selectTaxonRef}\n                    navigateToTaxonRef={this.props.navigateToTaxonRef}\n                    totalItems={db.total}\n                    maxItems={DEFAULT_PAGE_SIZE}\n                />\n            </React.Fragment>\n        );\n    }\n    renderTaxaReLoading(db: TaxonDBStateReLoading) {\n        return <Spin tip=\"Loading\">{this.renderTaxaLoaded(db)}</Spin>;\n    }\n    renderTaxaError(db: TaxonDBStateError) {\n        return <ErrorView error={db.error} />\n    }\n    renderTaxa() {\n        switch (this.props.db.status) {\n            case DBStatus.NONE:\n                return this.renderTaxaNone();\n            case DBStatus.LOADING:\n                return this.renderTaxaLoading();\n            case DBStatus.LOADED:\n                return this.renderTaxaLoaded(this.props.db);\n            case DBStatus.RELOADING:\n                return this.renderTaxaReLoading(this.props.db);\n            case DBStatus.ERROR:\n                return this.renderTaxaError(this.props.db);\n        }\n    }\n    changePage(page: number, pageSize: number | undefined) {\n        this.page = page;\n        this.pageSize = pageSize || DEFAULT_PAGE_SIZE;\n        this.props.fetchChildren(this.props.taxonRef, this.page, this.pageSize, this.searchTerm);\n    }\n    renderPaginationNone() {\n        return <Pagination size=\"small\" showLessItems={true} hideOnSinglePage={false} />;\n    }\n    renderPaginationLoading() {\n        return <Pagination size=\"small\" showLessItems={true} hideOnSinglePage={false} />;\n    }\n    renderPaginationError() {\n        return <Pagination size=\"small\" showLessItems={true} hideOnSinglePage={false} />;\n    }\n    renderPaginationLoaded(db: TaxonDBStateLoaded) {\n        return (\n            <Pagination\n                size=\"small\"\n                defaultPageSize={db.pageSize}\n                // defaultCurrent={1}\n                showLessItems={true}\n                current={db.page}\n                hideOnSinglePage={false}\n                total={db.total}\n                onChange={this.changePage.bind(this)}\n            />\n        );\n    }\n    renderPaginationReLoading(db: TaxonDBStateReLoading) {\n        return (\n            <Pagination\n                size=\"small\"\n                defaultPageSize={db.pageSize}\n                // defaultCurrent={1}\n                showLessItems={true}\n                current={db.page}\n                hideOnSinglePage={false}\n                total={db.total}\n                disabled={true}\n            />\n        );\n    }\n    renderPagination() {\n        const db = this.props.db;\n        switch (db.status) {\n            case DBStatus.NONE:\n                return this.renderPaginationNone();\n            case DBStatus.LOADING:\n                return this.renderPaginationLoading();\n            case DBStatus.ERROR:\n                return this.renderPaginationError();\n            case DBStatus.LOADED:\n                return this.renderPaginationLoaded(db);\n            case DBStatus.RELOADING:\n                return this.renderPaginationReLoading(db);\n        }\n    }\n    renderChildren() {\n        return (\n            <div>\n                {this.renderTitle()}\n                {this.renderSearch()}\n                {this.renderPagination()}\n                {this.renderTaxa()}\n            </div>\n        );\n    }\n\n    render() {\n        return this.renderChildren();\n    }\n}\n","import React from 'react';\nimport TaxonDB, { TaxonDBState, TaxonDBStateError } from './TaxonChildrenDB';\nimport { DBStatus } from '../../../lib/DB';\n\nimport { AppConfig } from '@kbase/ui-components';\nimport TaxonChildren from './TaxonChildren';\nimport { TaxonReference } from '../../../types/taxonomy';\nimport { Alert } from 'antd';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    taxonRef: TaxonReference;\n    selectedTaxonRef: TaxonReference | null;\n    selectTaxonRef: (taxonRef: TaxonReference) => void;\n    navigateToTaxonRef: (taxonRef: TaxonReference) => void;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: TaxonDB;\n    constructor(props: Props) {\n        super(props);\n        this.db = new TaxonDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n    }\n\n    componentDidMount() {\n        // this.db.stop();\n    }\n\n    fetchChildren(taxonRef: TaxonReference, page: number, pageSize: number, searchTerm: string) {\n        return this.db.fetchChildren({ taxonRef, page, pageSize, searchTerm });\n    }\n\n    renderSuccess(db: TaxonDBState) {\n        return <TaxonChildren\n            db={db}\n            taxonRef={this.props.taxonRef}\n            selectedTaxonRef={this.props.selectedTaxonRef}\n            selectTaxonRef={this.props.selectTaxonRef}\n            navigateToTaxonRef={this.props.navigateToTaxonRef}\n            fetchChildren={this.fetchChildren.bind(this)}\n        />\n    }\n\n    renderError(db: TaxonDBStateError) {\n        return <Alert type=\"error\" message={db.error.message} />\n    }\n\n    renderTest() {\n        return \"test\";\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case (DBStatus.ERROR):\n                return this.renderError(db);\n            default:\n                // return this.renderTest()\n                return this.renderSuccess(db);\n        }\n    }\n}\n","import { AppConfig } from '@kbase/ui-components';\nimport { StoreState } from '../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps { }\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../../../lib/DB';\nimport { AppConfig } from '@kbase/ui-components';\nimport { Taxon, TaxonReference } from '../../../types/taxonomy';\nimport { TaxonomyModel } from '../lib/model';\n\nexport type LineageDBStateNone = DBStateNone;\nexport type LineageDBStateLoading = DBStateLoading;\nexport type LineageDBStateError = DBStateError;\n\nexport interface LineageDBStateLoaded extends DBStateLoaded {\n    lineage: Array<Taxon>;\n}\n\nexport type LineageDBState = LineageDBStateNone | LineageDBStateLoading | LineageDBStateLoaded | LineageDBStateError;\n\nexport interface LineageDBProps extends DBProps<LineageDBState> {\n    token: string;\n    config: AppConfig;\n}\n\n// TODO: make props part of generic\nexport default class LineageDB extends DB<LineageDBState> {\n    props: LineageDBProps;\n    constructor(props: LineageDBProps) {\n        super(props);\n        this.props = props;\n    }\n    async getLineage(taxonRef: TaxonReference) {\n        try {\n            this.set((state: LineageDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADING\n                };\n            });\n\n            const client = new TaxonomyModel({\n                token: this.props.token,\n                url: this.props.config.services.ServiceWizard.url\n            });\n            const lineage = await client.getLineage(taxonRef);\n            this.set((state: LineageDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    lineage\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: LineageDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    error: {\n                        code: 'not-found',\n                        source: 'LineageDB.getLineage',\n                        message: ex.message,\n                    }\n                };\n            });\n        }\n    }\n}\n","import React from 'react';\nimport { Taxon, TaxonReference } from '../../../types/taxonomy';\nimport TaxonList from '../TaxonList';\n\nexport interface Props {\n    lineage: Array<Taxon>;\n    selectedTaxonRef: TaxonReference;\n    selectTaxonRef: (ref: TaxonReference) => void;\n    navigateToTaxonRef: (ref: TaxonReference) => void;\n}\n\ninterface State { }\n\nexport default class Lineage extends React.Component<Props, State> {\n    render() {\n        return (\n            <TaxonList\n                taxa={this.props.lineage}\n                selectedTaxonRef={this.props.selectedTaxonRef}\n                selectTaxonRef={this.props.selectTaxonRef}\n                navigateToTaxonRef={this.props.navigateToTaxonRef}\n                totalItems={this.props.lineage.length}\n                maxItems={10}\n            />\n        );\n    }\n}\n","import React from 'react';\nimport LineageDB, { LineageDBStateLoaded } from './LineageDB';\nimport { DBStatus, DBStateError } from '../../../lib/DB';\n\nimport { AppConfig } from '@kbase/ui-components';\nimport Lineage from './Lineage';\nimport { TaxonReference } from '../../../types/taxonomy';\nimport { Icon } from 'antd';\nimport ErrorView from '../../../components/ErrorView';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    taxonRef: TaxonReference;\n    selectedTaxonRef: TaxonReference;\n    selectTaxonRef: (taxonRef: TaxonReference) => void;\n    navigateToTaxonRef: (taxonRef: TaxonReference) => void;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: LineageDB;\n    constructor(props: Props) {\n        super(props);\n        this.db = new LineageDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n    }\n\n    componentDidMount() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                this.db.getLineage(this.props.taxonRef);\n        }\n    }\n\n    componentWillUnmount() {\n        // this.db.stop();\n    }\n\n    renderLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderError(db: DBStateError) {\n        return <ErrorView error={db.error} />\n    }\n\n    renderLoaded(db: LineageDBStateLoaded) {\n        return (\n            <Lineage\n                lineage={db.lineage}\n                selectedTaxonRef={this.props.selectedTaxonRef}\n                selectTaxonRef={this.props.selectTaxonRef}\n                navigateToTaxonRef={this.props.navigateToTaxonRef}\n            />\n        );\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                // this.db.getLineage(this.props.taxonRef);\n                return this.renderLoading();\n            case DBStatus.LOADING:\n                return this.renderLoading();\n            case DBStatus.ERROR:\n                return this.renderError(db);\n            case DBStatus.LOADED:\n                return this.renderLoaded(db);\n        }\n    }\n}\n","import { AppConfig } from '@kbase/ui-components';\nimport { StoreState } from '../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps { }\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import React from 'react';\nimport { Taxon, TaxonReference } from '../../types/taxonomy';\nimport './LineageNavigator.css';\nimport TaxonItem from './TaxonItem';\nimport TaxonChildren from './taxonChildren';\nimport Lineage from './lineage';\n\nexport interface LineageProps {\n    selectedTaxon: Taxon;\n    targetTaxon: Taxon;\n    selectTaxonRef: (ref: TaxonReference) => void;\n    navigateToTaxonRef: (ref: TaxonReference) => void;\n}\n\ninterface LineageState { }\n\nexport default class LineageNavigator extends React.Component<LineageProps, LineageState> {\n    onClick(ref: TaxonReference) {\n        this.props.selectTaxonRef(ref);\n        // alert('navigate to ' + taxonId);\n    }\n\n    // menuSelected(param: SelectParam) {\n    //     this.props.selectTaxonRef(param.key);\n    //     // alert('navigate to ' + param.key);\n    // }\n\n    clickTaxon(taxon: Taxon) {\n        this.props.selectTaxonRef(taxon.ref);\n    }\n\n    renderLineage() {\n        return (\n            <Lineage\n                taxonRef={this.props.targetTaxon.ref}\n                selectedTaxonRef={this.props.selectedTaxon.ref}\n                selectTaxonRef={this.props.selectTaxonRef}\n                navigateToTaxonRef={this.props.navigateToTaxonRef}\n            />\n        );\n        // return 'disabled';\n    }\n\n    renderChildrenCount(count: number) {\n        if (count === 0) {\n            return <div className=\"\">No children</div>;\n        }\n        if (count === 1) {\n            return <div>One child</div>;\n        }\n        return (\n            <div>\n                {Intl.NumberFormat('en-US', {\n                    useGrouping: true\n                }).format(count)}{' '}\n                children\n            </div>\n        );\n    }\n\n    renderChildren() {\n        let selectedRef: TaxonReference | null;\n        if (this.props.selectedTaxon) {\n            selectedRef = this.props.selectedTaxon.ref;\n        } else {\n            selectedRef = null;\n        }\n\n        return (\n            <TaxonChildren\n                taxonRef={this.props.targetTaxon.ref}\n                selectedTaxonRef={selectedRef}\n                selectTaxonRef={this.props.selectTaxonRef}\n                navigateToTaxonRef={this.props.navigateToTaxonRef}\n            />\n        );\n    }\n\n    // renderChildrenxscrolling() {\n    //     let selectedId;\n    //     if (this.props.selectedTaxon) {\n    //         selectedId = this.props.selectedTaxon.id;\n    //     } else {\n    //         selectedId = null;\n    //     }\n\n    //     return (\n    //         <div className=\"scrolling\">\n    //             <TaxonList\n    //                 taxa={this.props.offspring}\n    //                 selectedTaxonID={selectedId}\n    //                 selectTaxonID={this.props.selectTaxonID}\n    //                 navigateToTaxonID={this.props.navigateToTaxonID}\n    //                 totalItems={this.props.totalOffspring}\n    //                 maxItems={10}\n    //             />\n    //         </div>\n    //     );\n    // }\n\n    renderTargetTaxon() {\n        const isActive =\n            this.props.selectedTaxon &&\n            this.props.selectedTaxon.ref.id === this.props.targetTaxon.ref.id &&\n            this.props.selectedTaxon.ref.timestamp === this.props.targetTaxon.ref.timestamp;\n\n        return (\n            <TaxonItem\n                taxon={this.props.targetTaxon}\n                isActive={isActive}\n                selectTaxonRef={this.props.selectTaxonRef}\n                navigateToTaxonRef={this.props.navigateToTaxonRef}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"Col scrollable\" style={{ overflowY: 'auto' }}>\n                <div className=\"Col-auto Nav-box\">\n                    <div className=\"Nav-box-title\">Lineage</div>\n                    {this.renderLineage()}\n                </div>\n                <div className=\"Col-auto Nav-box Lineage-target-taxon\">{this.renderTargetTaxon()}</div>\n                <div className=\"Col-auto scrollable Nav-box\">{this.renderChildren()}</div>\n            </div>\n        );\n    }\n}\n","import React, { CSSProperties } from 'react';\nimport { Taxon } from '../../types/taxonomy';\n\nexport interface Props {\n    taxon: Taxon;\n}\n\nexport interface State { }\n\nexport default class TaxonSummary extends React.Component<Props, State> {\n    render() {\n        let nameStyle: CSSProperties = {};\n        if (this.props.taxon.rank === 'species') {\n            nameStyle = { fontStyle: 'italic' };\n        }\n        return (\n            <div className=\"InfoTable\">\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                        Name\n                    </div>\n                    <div className=\"InfoTable-dataCol\" style={nameStyle}>\n                        {this.props.taxon.name}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                        Rank\n                    </div>\n                    <div className=\"InfoTable-dataCol\">{this.props.taxon.rank}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { NCBITaxon, TaxonAlias } from '../../../types/taxonomy';\nimport { Table } from 'antd';\nimport geneticCodes from '../data/geneticCodes.json';\n\n// as Array<[number, string]>\n\ntype GeneticCodes = Array<[number, string]>;\n\nfunction ensureGeneticCodes(geneticCodes: any): GeneticCodes {\n    if (!(geneticCodes instanceof Array)) {\n        throw new Error('Invalid genetic codes file!');\n    }\n\n    return geneticCodes.map(([id, name]) => {\n        if (typeof id !== 'number') {\n            throw new Error('Invalid genetic code id in file');\n        }\n        if (typeof name !== 'string') {\n            throw new Error('Invalid genetic code label in file');\n        }\n        return [id, name];\n    });\n}\n\nconst gc = ensureGeneticCodes(geneticCodes);\n\nconst geneticCodesMap: Map<number, string> = gc.reduce((geneticCodesMap, [id, label]) => {\n    geneticCodesMap.set(id, label);\n    return geneticCodesMap;\n}, new Map<number, string>());\n\nexport interface TaxonDetailProps {\n    taxon: NCBITaxon;\n}\n\ninterface TaxonDetailState { }\n\nexport default class TaxonDetailNCBI extends React.Component<TaxonDetailProps, TaxonDetailState> {\n    renderAliases() {\n        const aliasNameSorter = (a: TaxonAlias, b: TaxonAlias) => {\n            return stringSorter(a.name, b.name);\n        };\n\n        const aliasCategorySorter = (a: TaxonAlias, b: TaxonAlias) => {\n            return stringSorter(a.category, b.category);\n        };\n\n        const stringSorter = (a: string, b: string) => {\n            const fixedA = a.replace(/^[\"']/, '');\n            const fixedB = b.replace(/^[\"']/, '');\n            return fixedA.localeCompare(fixedB);\n        };\n        return (\n            <Table\n                dataSource={this.props.taxon.aliases}\n                className=\"KBaseAntdOverride-remove-table-border\"\n                size=\"small\"\n                // pagination={{ position: 'top' }}\n                pagination={false}\n                scroll={{ y: '25em' }}\n                rowKey=\"name\"\n                bordered={false}\n            >\n                <Table.Column\n                    title=\"Name\"\n                    dataIndex=\"name\"\n                    key=\"name\"\n                    defaultSortOrder=\"ascend\"\n                    sorter={aliasNameSorter}\n                />\n                <Table.Column\n                    title=\"Category\"\n                    dataIndex=\"category\"\n                    key=\"category\"\n                    width=\"20em\"\n                    sorter={aliasCategorySorter}\n                />\n            </Table>\n        );\n    }\n\n    renderTaxonDetail() {\n        const width = '8em';\n        let nameStyle: React.CSSProperties = {};\n        if (this.props.taxon.rank === 'species') {\n            nameStyle.fontStyle = 'italic';\n        }\n        return (\n            <div className=\"InfoTable\">\n                <div className=\"InfoTable-row\" key=\"name\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        Name\n                    </div>\n                    <div className=\"InfoTable-dataCol\" style={nameStyle}>\n                        {this.props.taxon.name}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\" key=\"rank\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        Rank\n                    </div>\n                    <div className=\"InfoTable-dataCol\">{this.props.taxon.rank}</div>\n                </div>\n                <div className=\"InfoTable-row\" key=\"ncbiid\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        NCBI ID\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        <a\n                            href={`https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=info&id=${\n                                this.props.taxon.ncbiID\n                                }`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            {this.props.taxon.ncbiID}\n                        </a>\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\" key=\"genetic-code\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        Genetic Code\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.props.taxon.geneticCode} -{' '}\n                        {geneticCodesMap.get(this.props.taxon.geneticCode) || 'Unknown'}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\" key=\"aliases\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        Aliases\n                    </div>\n                    <div className=\"InfoTable-dataCol\">{this.renderAliases()}</div>\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return <div>{this.renderTaxonDetail()}</div>;\n    }\n}\n","import React from 'react';\nimport { Taxon, TaxonomyNamespace, NCBITaxon } from '../../../types/taxonomy';\nimport TaxonDetailNCBI from './TaxonDetailNCBI';\nimport { Alert } from 'antd';\n\nexport interface TaxonDetailProps {\n    taxon: Taxon;\n}\n\ninterface TaxonDetailState { }\n\nexport default class TaxonDetail extends React.Component<TaxonDetailProps, TaxonDetailState> {\n    render() {\n        const taxon = this.props.taxon;\n        switch (taxon.ref.namespace) {\n            case TaxonomyNamespace.NCBI:\n                // TODO: why does this not prove to TS that we have a NCBITaxon?\n                return <TaxonDetailNCBI taxon={taxon as NCBITaxon} />;\n            default:\n                return <Alert type=\"error\" message=\"This taxon type is not supported\" />;\n        }\n    }\n}\n","export function getProp<T>(obj: object, propPath: string | Array<string>, defaultValue: any): T {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length; i += 1) {\n        if (temp === undefined || typeof temp !== 'object' || temp === null) {\n            return defaultValue;\n        }\n        temp = temp[propPath[i]];\n    }\n    if (temp === undefined) {\n        return defaultValue;\n    }\n    return temp;\n}\n\nexport function hasProp(obj: object, propPath: string | Array<string>): boolean {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length; i += 1) {\n        if (temp === undefined || typeof temp !== 'object' || temp === null) {\n            return false;\n        }\n        temp = temp[propPath[i]];\n    }\n    if (temp === undefined) {\n        return false;\n    }\n    return true;\n}\n\nexport function setProp(obj: object, propPath: string | Array<string>, value: any) {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    if (propPath.length === 0) {\n        return;\n    }\n    // pop off the last property for setting at the end.\n    const propKey = propPath[propPath.length - 1];\n    let key;\n    // Walk the path, creating empty objects if need be.\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length - 1; i += 1) {\n        key = propPath[i];\n        if (temp[key] === undefined) {\n            temp[key] = {};\n        }\n        obj = temp[key];\n    }\n    // Finally set the property.\n    temp[propKey] = value;\n    return value;\n}\n\nexport function incrProp(obj: object, propPath: string | Array<string>, increment: number): number | undefined {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    if (propPath.length === 0) {\n        return;\n    }\n    increment = increment === undefined ? 1 : increment;\n    const propKey = propPath[propPath.length - 1];\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length - 1; i += 1) {\n        const key = propPath[i];\n        if (temp[key] === undefined) {\n            temp[key] = {};\n        }\n        temp = temp[key];\n    }\n    if (temp[propKey] === undefined) {\n        temp[propKey] = increment;\n    } else {\n        if (typeof temp[propKey] === 'number') {\n            temp[propKey] += increment;\n        } else {\n            throw new Error('Can only increment a number');\n        }\n    }\n    return temp[propKey];\n}\n\nexport function deleteProp(obj: object, propPath: string | Array<string>) {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    if (propPath.length === 0) {\n        return false;\n    }\n    const propKey = propPath[propPath.length - 1];\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length - 1; i += 1) {\n        const key = propPath[i];\n        if (temp[key] === undefined) {\n            // for idempotency, and utility, do not throw error if\n            // the key doesn't exist.\n            return false;\n        }\n        obj = temp[key];\n    }\n    if (temp[propKey] === undefined) {\n        return false;\n    }\n    delete temp[propKey];\n    return true;\n}\n\n// class Props {\n//     constructor(config = {}) {\n//         this.obj = config.data || {};\n//     }\n\n//     getItem(props, defaultValue) {\n//         return getProp(this.obj, props, defaultValue);\n//     }\n\n//     hasItem(propPath) {\n//         return hasProp(this.obj, propPath);\n\n//     }\n\n//     setItem(path, value) {\n//         return setProp(this.obj, path, value);\n//     }\n\n//     incrItem(path, increment) {\n//         return incrProp(this.obj, path, increment);\n//     }\n\n//     deleteItem(path) {\n//         return deleteProp(this.obj, path);\n//     }\n\n//     getRaw() {\n//         return this.obj;\n//     }\n// }\n\n// return Object.freeze({ Props, getProp, hasProp, setProp, incrProp, deleteProp });\n","import React from 'react';\n\nimport WikipediaClient, { WikipediaInfo } from '../landingPages/taxonomy/lib/Wikipedia';\nimport marked from 'marked';\nimport { Icon, Alert, Tooltip } from 'antd';\nimport Loading from './Loading';\nimport './Wikipedia.css';\n\nexport interface WikipediaProps {\n    term: string;\n}\n\nenum AsyncComponentLoadingState {\n    NONE,\n    LOADING,\n    LOADED,\n    ERROR\n}\n\ninterface StateNone {\n    state: AsyncComponentLoadingState.NONE;\n}\n\ninterface StateLoading {\n    state: AsyncComponentLoadingState.LOADING;\n}\n\ninterface StateLoaded {\n    state: AsyncComponentLoadingState.LOADED;\n    wikipediaInfo: WikipediaInfo;\n}\n\ninterface StateError {\n    state: AsyncComponentLoadingState.ERROR;\n    error: string;\n}\n\ntype WikipediaState = StateNone | StateLoading | StateLoaded | StateError;\n\nexport default class Wikipedia extends React.Component<WikipediaProps, WikipediaState> {\n    wikipediaClient: WikipediaClient;\n    canceled: boolean;\n    constructor(props: WikipediaProps) {\n        super(props);\n        this.wikipediaClient = new WikipediaClient();\n        this.canceled = false;\n        this.state = {\n            state: AsyncComponentLoadingState.NONE\n        };\n    }\n\n    componentWillUnmount() {\n        this.canceled = true;\n        // this.state = {\n        //     state: AsyncComponentLoadingState.CANCELED\n        // };\n    }\n\n    renderArticle(wikipediaInfo: WikipediaInfo) {\n        const content = marked(wikipediaInfo.introText);\n        return <div style={{ overflow: 'auto' }} dangerouslySetInnerHTML={{ __html: content }} />;\n    }\n\n    renderImage(wikipediaInfo: WikipediaInfo) {\n        if (!wikipediaInfo.imageUrl) {\n            return (\n                <div className=\"Wikipedia-empty-image\">\n                    <div className=\"-content\">Image not found</div>\n                </div>\n            );\n        }\n        return (\n            <div>\n                <img src={wikipediaInfo.imageUrl} style={{ width: '100%' }} alt={`${this.props.term}`} />\n            </div>\n        );\n    }\n\n    renderMatch(wikipediaInfo: WikipediaInfo) {\n        if (wikipediaInfo.exactMatch) {\n            const message = (\n                <React.Fragment>\n                    <Icon type=\"check\" style={{ color: 'green' }} /> Exact match on \"\n                    {wikipediaInfo.matchingTerms.join(' ')}\"\n                </React.Fragment>\n            );\n            return <Alert type=\"success\" message={message} />;\n        } else {\n            const message = (\n                <React.Fragment>\n                    <Icon type=\"warning\" style={{ color: 'orange' }} /> Inexact match on: \"\n                    {wikipediaInfo.matchingTerms.join(' ')}\"\n                </React.Fragment>\n            );\n            return <Alert type=\"warning\" message={message} />;\n        }\n    }\n\n    renderWikipediaLogoCredit() {\n        return (\n            <div>\n                <div style={{ borderBottom: '1px solid gray' }}>Link to the original Wikipedia entry</div>\n                <div style={{ fontSize: '80%' }}>\n                    <p style={{ textAlign: 'center' }}>\n                        credit:\n                        <a\n                            href=\"https://creativecommons.org/licenses/by-sa/3.0/\"\n                            title=\"Creative Commons Attribution-ShareAlike 3.0\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            CC BY-SA 3.0\n                        </a>\n                        <a\n                            href=\"https://en.wikipedia.org/w/index.php?curid=33285413\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Link\n                        </a>\n                    </p>\n                </div>\n            </div>\n        );\n    }\n\n    renderWikipediaInfo(wikipediaInfo: WikipediaInfo) {\n        return (\n            <div className=\"Row scrollable\">\n                <div className=\"Col Col-grow-2 scrollable\">\n                    <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '10px' }}>\n                        <div style={{ flex: '1 1 0px' }}>{this.renderMatch(wikipediaInfo)}</div>\n                        <div style={{ flex: '0 0 auto', alignSelf: 'center', marginLeft: '10px' }}>\n                            <div style={{ height: '32px', textAlign: 'center' }}>\n                                <Tooltip title={this.renderWikipediaLogoCredit()}>\n                                    <a href={wikipediaInfo.pageUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                                        <img\n                                            src=\"images/wikipedia-logo.svg\"\n                                            style={{ height: '100%' }}\n                                            alt=\"Wikipedia Logo\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                            </div>\n                            <div />\n                        </div>\n                    </div>\n                    <div\n                        className=\"scrollable\"\n                        style={{ flex: '2 1 0px', paddingRight: '4px', marginRight: '4px', overflowY: 'auto' }}\n                    >\n                        {this.renderArticle(wikipediaInfo)}\n                    </div>\n                </div>\n\n                <div className=\"Col Col-grow-1\" style={{ flex: '1 1 0px', marginLeft: '10px' }}>\n                    {this.renderImage(wikipediaInfo)}\n                </div>\n            </div>\n        );\n    }\n\n    updateInfo() {\n        const wikipediaClient = new WikipediaClient();\n        const { term } = this.props;\n        this.setState({\n            state: AsyncComponentLoadingState.LOADING\n        });\n        wikipediaClient\n            .findTerm(term)\n            .then((wikipediaInfo) => {\n                if (this.canceled) {\n                    return;\n                }\n                this.setState({\n                    state: AsyncComponentLoadingState.LOADED,\n                    wikipediaInfo\n                });\n            })\n            .catch((err) => {\n                if (this.canceled) {\n                    return;\n                }\n                return this.setState({\n                    state: AsyncComponentLoadingState.ERROR,\n                    error: err.message\n                });\n            });\n    }\n\n    componentDidMount() {\n        this.updateInfo();\n    }\n\n    componentDidUpdate(props: WikipediaProps, state: WikipediaState) {\n        if (props.term !== this.props.term) {\n            this.updateInfo();\n        }\n    }\n\n    renderNone() {\n        return <div />;\n    }\n\n    renderLoading() {\n        return <Loading message=\"Searching Wikipedia...\" />;\n    }\n\n    renderLoaded(state: StateLoaded) {\n        return this.renderWikipediaInfo(state.wikipediaInfo);\n    }\n\n    renderError(state: StateError) {\n        return <Alert type=\"error\" message={state.error} />;\n    }\n\n    render() {\n        if (this.canceled) {\n            return;\n        }\n        switch (this.state.state) {\n            case AsyncComponentLoadingState.NONE:\n                return this.renderNone();\n            case AsyncComponentLoadingState.LOADING:\n                return this.renderLoading();\n            case AsyncComponentLoadingState.LOADED:\n                return this.renderLoaded(this.state);\n            case AsyncComponentLoadingState.ERROR:\n                return this.renderError(this.state);\n        }\n    }\n}\n","import * as props from './props';\n\nexport interface WikipediaInfo {\n    imageUrl: string;\n    pageUrl: string;\n    introText: string;\n    title: string;\n    pageId: number;\n    exactMatch: boolean;\n    matchingTerms: Array<string>;\n}\n\ninterface WikipediaParse {\n    headhtml: Map<string, string>;\n    pageid: number;\n    redirects: Array<string>;\n    text: Map<string, string>;\n    title: string;\n}\n\nclass NotFound extends Error {\n    constructor(message: string) {\n        super(message);\n\n        this.name = 'NotFound';\n    }\n}\n\nconst WIKIPEDIA_API_URL = 'https://en.wikipedia.org/w/api.php';\nconst IMAGE_SIZE = 500;\n\nexport default class Wikipedia {\n    scrubTerm(proposedTerm: string): string {\n        // convervatively, remove all non-alpha characters\n        const chars = proposedTerm.split('');\n        const validChar = /[\\w \\s]/;\n        const newChars = chars.filter((char) => {\n            if (validChar.exec(char)) {\n                return true;\n            }\n            return false;\n        });\n        return newChars.join('');\n    }\n\n    async findTerm(term: string): Promise<WikipediaInfo> {\n        if (!term) {\n            throw new Error('Empty term passed');\n        }\n        const lookupTerm = this.scrubTerm(term);\n        return this.getWikipediaInfo(lookupTerm).then(\n            ({ imageUrl, pageUrl, introText, title, pageId, matchingTerms, exactMatch }) => {\n                // this.imageUrl(imageUrl);\n                // this.pageUrl(url);\n                const fixedIntroText = introText\n                    .replace(/====/g, '####')\n                    .replace(/===/g, '###')\n                    .replace(/==/g, '##')\n                    .replace(/\\n/g, '  \\n');\n\n                return { imageUrl, pageUrl, introText: fixedIntroText, title, pageId, matchingTerms, exactMatch };\n            }\n        );\n    }\n\n    async getWikipediaInfo(term: string): Promise<WikipediaInfo> {\n        return this.getPage(term).then(\n            ({\n                wikiResponse,\n                matchingTerms,\n                exactMatch\n            }: {\n                wikiResponse: any;\n                matchingTerms: Array<string>;\n                exactMatch: boolean;\n            }) => {\n                // this.imageCaption(wikiResponse.parse.title);\n                return Promise.all([\n                    this.getImage({ size: IMAGE_SIZE, pageId: wikiResponse.parse.pageid }),\n                    this.getPageInfo({ pageId: wikiResponse.parse.pageid })\n                ]).then(([imageUrl, pageInfo]) => {\n                    return {\n                        imageUrl: imageUrl,\n                        pageUrl: pageInfo.url,\n                        introText: pageInfo.introText,\n                        title: wikiResponse.parse.title,\n                        pageId: wikiResponse.parse.pageid,\n                        matchingTerms,\n                        exactMatch\n                    };\n                });\n            }\n        );\n    }\n\n    // see: https://www.mediawiki.org/wiki/API:Main_page\n    // https://en.wikipedia.org/w/api.php?action=help&modules=parse\n    async getPage(term: string): Promise<{ wikiResponse: any; matchingTerms: Array<string>; exactMatch: boolean }> {\n        const terms = term.split(/\\s+/);\n        let matchingTerms: Array<string>;\n        let exactMatch = true;\n        return new Promise((resolve, reject) => {\n            const fetchPage = (terms: Array<string>) => {\n                if (terms.length === 0) {\n                    reject(new NotFound('No Wikipedia page found matching \"' + term + '\"'));\n                    // resolve(null);\n                }\n                // const http = new HttpClient.HttpClient();\n                // const header = new HttpClient.HttpHeader({\n                //     accept: 'application/json'\n                // });\n                const apiUrl = new URL(WIKIPEDIA_API_URL);\n                const query = apiUrl.searchParams;\n                query.set('action', 'parse');\n                query.set('format', 'json');\n                query.set('prop', 'text|headhtml');\n                query.set('section', '0');\n                query.set('redirects', '');\n                query.set('page', terms.join(' '));\n                const headers = {\n                    accept: 'application/json'\n                };\n                // must set this to enable cors\n                query.set('origin', '*');\n                fetch(apiUrl.toString(), {\n                    method: 'GET',\n                    headers\n                })\n                    .then((result) => {\n                        switch (result.status) {\n                            case 200:\n                                try {\n                                    return result.json().then((wikiResponse) => {\n                                        if (wikiResponse.error) {\n                                            if (wikiResponse.error.code === 'missingtitle') {\n                                                terms.pop();\n                                                exactMatch = false;\n                                                fetchPage(terms);\n                                                return null;\n                                            } else {\n                                                console.error('wikipedia api error', wikiResponse);\n                                                reject(new Error('Wikipedia api error: ' + wikiResponse.error.code));\n                                            }\n                                        } else {\n                                            matchingTerms = terms;\n                                            resolve({\n                                                wikiResponse,\n                                                matchingTerms,\n                                                exactMatch\n                                            });\n                                        }\n                                    });\n                                } catch (ex) {\n                                    reject(new Error('Error parsing wikipedia response: ' + ex.message));\n                                }\n                                break;\n                            default:\n                                const message = 'Unexpected response from wikipedia api: ' + result.status;\n                                console.error(message, result);\n                                reject(new Error(message));\n                        }\n                    })\n                    .catch((err) => {\n                        reject(err);\n                    });\n            };\n            fetchPage(terms);\n        });\n    }\n\n    async getPageInfo({ pageId }: { pageId: string }): Promise<any> {\n        const apiURL = new URL(WIKIPEDIA_API_URL);\n        const query = apiURL.searchParams;\n        query.set('action', 'query');\n        query.set('pageids', pageId);\n        query.set('prop', 'info|extracts');\n        query.set('explaintext', 'true');\n        query.set('inprop', 'url');\n        query.set('origin', '*');\n        query.set('format', 'json');\n\n        // const http = new HttpClient.HttpClient();\n        return fetch(apiURL.toString(), {\n            method: 'GET'\n        }).then((result) => {\n            switch (result.status) {\n                case 200:\n                    try {\n                        return result.json().then((wikiResponse) => {\n                            return {\n                                url: props.getProp<string>(\n                                    wikiResponse,\n                                    ['query', 'pages', String(pageId), 'fullurl'],\n                                    null\n                                ),\n                                introText: props.getProp<string>(\n                                    wikiResponse,\n                                    ['query', 'pages', String(pageId), 'extract'],\n                                    null\n                                )\n                            };\n                        });\n                    } catch (ex) {\n                        console.error('error getting page info', ex.message);\n                        throw ex;\n                    }\n                default:\n                    var message = 'Unexpected response from wikipedia api: ' + result.status;\n                    console.error(message, result);\n                    throw new Error(message);\n            }\n        });\n    }\n\n    async getImage({ size, pageId }: { size: number; pageId: number }): Promise<string> {\n        const apiURL = new URL(WIKIPEDIA_API_URL);\n        const query = apiURL.searchParams;\n        query.set('action', 'query');\n        query.set('format', 'json');\n        query.set('prop', 'pageimages');\n        query.set('pithumbsize', String(size));\n        query.set('pageids', String(pageId));\n        query.set('origin', '*');\n        const headers = {\n            accept: 'application/json'\n        };\n\n        return fetch(apiURL.toString(), {\n            method: 'GET',\n            headers\n        })\n            .then((result) => {\n                switch (result.status) {\n                    case 200:\n                        try {\n                            return result.json().then((wikiResponse) => {\n                                return props.getProp<string>(\n                                    wikiResponse,\n                                    ['query', 'pages', String(pageId), 'thumbnail', 'source'],\n                                    null\n                                );\n                            });\n                        } catch (ex) {\n                            throw new Error('Error parsing wikipedia response: ' + ex.message);\n                        }\n                    default:\n                        var message = 'Unexpected response from wikipedia api: ' + result.status;\n                        console.error(message, result);\n                        throw new Error(message);\n                }\n            })\n            .catch((err) => {\n                const message = 'Error getting image from wikipedia: ' + err.message;\n                console.error(message, err);\n                throw new Error('Error getting image from wikipedia: ' + err.message);\n            });\n    }\n}\n","import React from 'react';\nimport { Spin } from 'antd';\nimport './Loading.css';\n\nexport interface Props {\n    message: string;\n}\n\ninterface State {}\n\nexport default class Loading extends React.Component<Props, State> {\n    render() {\n        return (\n            <div className=\"Loading-box\">\n                <Spin size=\"large\" />\n                <br />\n                {this.props.message}\n            </div>\n        );\n    }\n}\n","// import { UIError } from \"../types\";\n\nexport interface DBProps<T> {\n    onUpdate: () => void;\n    initialData: T;\n}\n\nexport interface TheDB<T> {\n    data: T;\n}\n\nexport enum DBCollectionStatus {\n    NONE,\n    LOADING,\n    LOADED,\n    ERROR,\n    RELOADING\n}\n\nexport interface DBCollectionBase {\n    status: DBCollectionStatus\n}\n\nexport interface DBCollectionNone extends DBCollectionBase {\n    status: DBCollectionStatus.NONE\n}\n\nexport interface DBCollectionLoading<T> extends DBCollectionBase {\n    status: DBCollectionStatus.LOADING,\n    data: T\n}\n\nexport interface DBCollectionLoaded<T> extends DBCollectionBase {\n    status: DBCollectionStatus.LOADED,\n    data: T\n}\n\nexport interface DBCollectionReloading<T> extends DBCollectionBase {\n    status: DBCollectionStatus.RELOADING,\n    data: T\n}\n\nexport interface DBCollectionError<T> extends DBCollectionBase {\n    status: DBCollectionStatus.ERROR,\n    error: T\n}\n\nexport default class DB<T> {\n    db: TheDB<T>;\n    stopped: boolean;\n    onUpdate: () => void;\n    constructor(props: DBProps<T>) {\n        this.onUpdate = props.onUpdate;\n        this.db = {\n            data: props.initialData\n        };\n        this.stopped = false;\n    }\n\n    forceComponentUpdate() {\n        if (this.stopped) {\n            return;\n        }\n        this.onUpdate();\n    }\n\n    set(updateFun: (state: T) => T) {\n        this.db.data = updateFun(this.db.data);\n        this.forceComponentUpdate();\n    }\n\n    get(): T {\n        return this.db.data;\n    }\n\n    stop() {\n        this.stopped = true;\n    }\n}\n","import React from 'react';\nimport { Taxon } from '../../../types/taxonomy';\nimport Wikipedia from '../../../components/Wikipedia';\n\nexport interface TaxonDescriptionProps {\n    taxon: Taxon;\n}\n\ninterface TaxonDescriptionState { }\n\nexport default class TaxonDescription extends React.Component<TaxonDescriptionProps, TaxonDescriptionState> {\n    renderTaxonDescription() {\n        return <Wikipedia term={this.props.taxon.name} />;\n    }\n\n    /**\n     * Intercept nodes which don't have a widely known biological association with\n     * the node name (\"scientific name\"), and for which a wikipedia lookup would not\n     * be very useful.\n     */\n    notBiological() {\n        switch (this.props.taxon.name) {\n            case 'root':\n                return (\n                    <div>\n                        <p>This taxon is the topmost node in the NCBI Taxonomy tree.</p>\n                    </div>\n                );\n            case 'cellular organisms':\n                return (\n                    <div>\n                        <p>This taxon represents all cellular organisms.</p>\n                    </div>\n                );\n            default:\n                return (\n                    <div>\n                        <p>Unknown non-biological taxon.</p>\n                    </div>\n                );\n        }\n    }\n\n    render() {\n        if (this.props.taxon.isBiological) {\n            return <div className=\"Col scrollable\">{this.renderTaxonDescription()}</div>;\n        }\n        return this.notBiological();\n    }\n}\n","import React from 'react';\nimport { LinkedObject, WorkspaceType } from '../../lib/model';\nimport { Table, Tooltip, Spin, Alert } from 'antd';\nimport Column from 'antd/lib/table/Column';\nimport { LinkedObjectsCollection, LinkedObjectsData } from './LinkedDataDB';\nimport { DBCollectionStatus } from '../../../../lib/DB2';\nimport { UIError } from '../../../../types';\n\nconst DEFAULT_PAGE_SIZE = 12;\n\nexport interface Props {\n    linkedObjectsCollection: LinkedObjectsCollection\n    setPage: (page: number, pageSize: number) => void\n}\n\ninterface State { }\n\nexport default class LinkedData extends React.Component<Props, State> {\n    onChangePage(page: number, pageSize?: number) {\n        this.props.setPage(page, pageSize || DEFAULT_PAGE_SIZE);\n    }\n\n    componentDidMount() {\n        this.props.setPage(1, DEFAULT_PAGE_SIZE);\n    }\n\n    componentDidUpdate(previousProps: Props) {\n        switch (previousProps.linkedObjectsCollection.status) {\n            case DBCollectionStatus.NONE:\n            case DBCollectionStatus.LOADING:\n            case DBCollectionStatus.LOADED:\n            case DBCollectionStatus.ERROR:\n            case DBCollectionStatus.RELOADING:\n        }\n    }\n\n    renderLinkedObjects(data: LinkedObjectsData, isLoading: boolean) {\n        return <Table\n            dataSource={data.linkedObjects}\n            size=\"small\"\n            className=\"KBaseAntdOverride-remove-table-border ScrollingFlexTable\"\n            // pagination={false}\n            // scroll={{ y: '100%' }}\n            bordered={false}\n            rowKey={(linkedObject: LinkedObject) => {\n                return [linkedObject.workspaceID, linkedObject.objectID, linkedObject.version].join('/');\n            }}\n            pagination={{\n                position: 'top',\n                onChange: this.onChangePage.bind(this),\n                defaultPageSize: DEFAULT_PAGE_SIZE,\n                total: data.totalCount\n            }}\n            loading={isLoading}\n        >\n            <Column\n                title=\"Type\"\n                dataIndex=\"type\"\n                width=\"15%\"\n                render={(type: WorkspaceType) => {\n                    const typeID = [[type.module, type.name].join('.'), [type.majorVersion, type.minorVersion].join('.')].join('-');\n                    return <a href={`/#spec/type/${typeID}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {type.name}\n                    </a>\n                }}\n            />\n            <Column\n                title=\"Object\"\n                dataIndex=\"objectName\"\n                width=\"35%\"\n                sorter={(a: LinkedObject, b: LinkedObject) => {\n                    return a.objectName.localeCompare(b.objectName);\n                }}\n                render={(objectName: string, linkedObject: LinkedObject) => {\n                    const url = [\n                        '',\n                        '#dataview',\n                        linkedObject.workspaceID,\n                        linkedObject.objectID,\n                        linkedObject.version\n                    ].join('/');\n                    const headerStyle = {\n                        fontStyle: 'italic',\n                        marginRight: '3px'\n                    }\n                    const tooltip = (\n                        <div>\n                            <div>\n                                <span style={headerStyle}>\n                                    Ref\n                                </span>\n                                <span>\n                                    {linkedObject.workspaceID}/{linkedObject.objectID}/{linkedObject.version}\n                                </span>\n                            </div>\n                            <div>\n                                <span style={headerStyle}>\n                                    Workspace ID\n                                </span>\n                                <span>\n                                    {linkedObject.workspaceID}\n                                </span>\n                            </div>\n                            <div>\n                                <span style={headerStyle}>\n                                    Object ID\n                                </span>\n                                <span>\n                                    {linkedObject.objectID}\n                                </span>\n                            </div>\n                            <div>\n                                <span style={headerStyle}>\n                                    Version\n                                </span>\n                                <span>\n                                    {linkedObject.version}\n                                </span>\n                            </div>\n                        </div>\n                    )\n                    return (\n                        <Tooltip title={tooltip}>\n                            <a href={url}>\n                                {objectName}\n                            </a>\n                        </Tooltip>\n                    )\n                }}\n            />\n            <Column\n                title=\"Narrative\"\n                width=\"35%\"\n                render={(workspaceID: number) => {\n                    return <a href={`https://ci.kbase.us/narrative/${workspaceID}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                        Narrative or refdata ws title\n                    </a>\n                }}\n            />\n            <Column\n                title=\"Object Created\"\n                dataIndex=\"createdAt\"\n                width=\"15%\"\n                sorter={(a: LinkedObject, b: LinkedObject) => {\n                    return a.createdAt - b.createdAt;\n                }}\n                render={(createdAt: number) => {\n                    return Intl.DateTimeFormat('en-US').format(createdAt);\n                }}\n            />\n        </Table>\n    }\n    renderLoading() {\n        return (\n            <Spin />\n        )\n    }\n    renderError(error: UIError) {\n        return (\n            <Alert type=\"error\" message={error.message} />\n        )\n    }\n    render() {\n        const collection = this.props.linkedObjectsCollection;\n        switch (collection.status) {\n            case DBCollectionStatus.NONE:\n                return this.renderLoading();\n            case DBCollectionStatus.ERROR:\n                return this.renderError(collection.error);\n            case DBCollectionStatus.LOADING:\n                return this.renderLinkedObjects(collection.data, true);\n            case DBCollectionStatus.LOADED:\n                return this.renderLinkedObjects(collection.data, false);\n            case DBCollectionStatus.RELOADING:\n                return this.renderLinkedObjects(collection.data, true)\n        }\n    }\n}\n","import DB, { DBProps, DBCollectionNone, DBCollectionLoading, DBCollectionLoaded, DBCollectionReloading, DBCollectionError, DBCollectionStatus } from '../../../../lib/DB2';\nimport { AppConfig } from '@kbase/ui-components';\nimport { TaxonomyModel, LinkedObject, GetLinkedObjectsResult } from '../../lib/model';\nimport { TaxonReference } from '../../../../types/taxonomy';\nimport { UIError } from '../../../../types';\n\nexport interface LinkedObjectsData {\n    linkedObjects: Array<LinkedObject>;\n    totalCount: number;\n    page: number;\n    pageSize: number;\n}\n\nexport type LinkedObjectsStateNone = DBCollectionNone;\nexport type LinkedObjectsStateLoading = DBCollectionLoading<LinkedObjectsData>;\nexport type LinkedObjectsStateLoaded = DBCollectionLoaded<LinkedObjectsData>;\nexport type LinkedObjectsStateReloading = DBCollectionReloading<LinkedObjectsData>;\nexport type LinkedObjectsStateError = DBCollectionError<UIError>;\n\nexport type LinkedObjectsCollection =\n    LinkedObjectsStateNone |\n    LinkedObjectsStateLoading |\n    LinkedObjectsStateLoaded |\n    LinkedObjectsStateReloading |\n    LinkedObjectsStateError;\n\n// export type LinkedDataDBStateNone = DBStateNone;\n// export type LinkedDataDBStateLoading = DBStateLoading;\n// export type LinkedDataDBStateError = DBStateError;\n\n// export interface LinkedDataDBStateLoaded extends DBStateLoaded {\n//     linkedObjects: Array<LinkedObject>;\n\n// }\n\n// export type LinkedDataDBState =\n//     | LinkedDataDBStateNone\n//     | LinkedDataDBStateLoading\n//     | LinkedDataDBStateLoaded\n//     | LinkedDataDBStateError;\n\nexport interface LinkedObjectsDBState {\n    linkedObjectsCollection: LinkedObjectsCollection\n}\n\nexport interface LinkedDataDBProps extends DBProps<LinkedObjectsDBState> {\n    token: string;\n    config: AppConfig;\n}\n\nexport class AsyncTask<T> {\n    taskFun: () => Promise<T>;\n    hasResult: boolean;\n    result: T | null;\n    canceled: boolean;\n    constructor(taskFun: () => Promise<T>) {\n        this.taskFun = taskFun;\n        this.result = null;\n        this.hasResult = false;\n        this.canceled = false;\n    }\n\n    async run() {\n        try {\n            this.result = await this.taskFun();\n            return this.result;\n        } catch (ex) {\n            throw (ex);\n        }\n    }\n\n    cancel() {\n        this.canceled = true;\n    }\n\n    get(): T {\n        if (this.result === null) {\n            throw new Error('Attempt to fetch value when not set');\n        }\n        return this.result;\n    }\n\n    isCanceled(): boolean {\n        return this.canceled;\n    }\n}\n\nexport default class LinkedDataDB extends DB<LinkedObjectsDBState> {\n    token: string;\n    serviceWizardURL: string;\n    currentTask: AsyncTask<GetLinkedObjectsResult> | null;\n    constructor(props: LinkedDataDBProps) {\n        super(props);\n        this.token = props.token;\n        this.serviceWizardURL = props.config.services.ServiceWizard.url;\n        this.currentTask = null;\n    }\n\n    async fetchLinkedObjects({ taxonRef, page, pageSize }: { taxonRef: TaxonReference; page: number; pageSize: number }) {\n        if (this.currentTask) {\n            this.currentTask.cancel();\n        }\n        const task = async (): Promise<GetLinkedObjectsResult> => {\n            const client = new TaxonomyModel({\n                token: this.token,\n                url: this.serviceWizardURL\n            });\n\n            const offset = (page - 1) * pageSize;\n            const limit = pageSize;\n\n            const result = await client.getLinkedObjects(taxonRef, {\n                offset,\n                limit\n            });\n\n            return result;\n        };\n\n        // Set up loading based on the current state.\n\n        this.set((state: LinkedObjectsDBState) => {\n            switch (state.linkedObjectsCollection.status) {\n                case DBCollectionStatus.LOADING:\n                case DBCollectionStatus.LOADED:\n                case DBCollectionStatus.RELOADING:\n                    return {\n                        ...state,\n                        linkedObjectsCollection: {\n                            ...state.linkedObjectsCollection,\n                            status: DBCollectionStatus.LOADING\n                        }\n                    };\n                case DBCollectionStatus.NONE:\n                case DBCollectionStatus.ERROR:\n                default:\n                    return {\n                        ...state,\n                        linkedObjectsCollection: {\n                            status: DBCollectionStatus.LOADING,\n                            data: {\n                                linkedObjects: [],\n                                page, pageSize,\n                                totalCount: 0\n                            }\n                        }\n                    };\n            }\n        });\n\n        const newTask = new AsyncTask<GetLinkedObjectsResult>(task);\n        this.currentTask = newTask;\n\n        try {\n            const result = await newTask.run();\n            if (newTask.isCanceled()) {\n                return;\n            }\n            this.set((state: LinkedObjectsDBState) => {\n                return {\n                    ...state,\n                    linkedObjectsCollection: {\n                        status: DBCollectionStatus.LOADED,\n                        data: {\n                            ...result,\n                            page,\n                            pageSize\n                        }\n                    }\n                };\n            });\n            this.currentTask = null;\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: LinkedObjectsDBState) => {\n                return {\n                    ...state,\n                    linkedObjectsCollection: {\n                        status: DBCollectionStatus.ERROR,\n                        error: {\n                            code: 'not-found',\n                            message: ex.message,\n                            source: 'LinkedDataDB.fetchLinkedObjects'\n                        }\n                    }\n                };\n            });\n        }\n    }\n}\n","import React from 'react';\nimport { DBCollectionStatus } from '../../../../lib/DB2';\n\nimport { AppConfig } from '@kbase/ui-components';\nimport LinkedData from './view';\nimport { TaxonReference } from '../../../../types/taxonomy';\nimport LinkedDataDB from './LinkedDataDB';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    taxonRef: TaxonReference;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: LinkedDataDB;\n    lastTaxonRef: TaxonReference;\n    constructor(props: Props) {\n        super(props);\n        this.db = new LinkedDataDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                linkedObjectsCollection: {\n                    status: DBCollectionStatus.NONE\n                }\n            },\n            token: props.token,\n            config: props.config\n        });\n        this.lastTaxonRef = props.taxonRef;\n    }\n\n    componentDidUpdate() {\n        if (this.lastTaxonRef !== this.props.taxonRef) {\n            this.lastTaxonRef = this.props.taxonRef;\n            this.db.fetchLinkedObjects({ taxonRef: this.props.taxonRef, page: 1, pageSize: 12 })\n        }\n    }\n\n    fetchLinkedObjects(page: number, pageSize: number) {\n        return this.db.fetchLinkedObjects({ taxonRef: this.props.taxonRef, page, pageSize });\n    }\n\n    // renderNone() {\n    //     return <Icon type=\"loading\" />;\n    // }\n\n    // renderLoading() {\n    //     return <Icon type=\"loading\" />;\n    // }\n\n    // renderError(db: LinkedDataDBStateError) {\n    //     return (\n    //         <ErrorView error={db.error} />\n    //     )\n    // }\n\n    // renderLoaded(db: LinkedDataDBStateLoaded) {\n    //     return <LinkedData linkedObjects={db.linkedObjects} fetchLinkedObjects={this.fetchLinkedObjects.bind(this)} />;\n    // }\n\n    // componentDidMount() {\n    //     const db = this.db.get();\n    //     switch (db.status) {\n    //         case DBStatus.NONE:\n    //             this.db.fetchLinkedObjects({ taxonRef: this.props.taxonRef, page: 1, pageSize: 1000 });\n    //     }\n    // }\n\n    // componentDidUpdate(prevProps: Props) {\n    //     if (prevProps.taxonRef.id !== this.props.taxonRef.id ||\n    //         prevProps.taxonRef.namespace !== this.props.taxonRef.namespace ||\n    //         prevProps.taxonRef.timestamp !== this.props.taxonRef.timestamp) {\n\n    //         this.db.fetchLinkedObjects({ taxonRef: this.props.taxonRef, page: 1, pageSize: 1000 });\n    //     }\n    // }\n\n    render() {\n        const db = this.db.get();\n        return <LinkedData\n            linkedObjectsCollection={db.linkedObjectsCollection}\n            setPage={this.fetchLinkedObjects.bind(this)} />;\n        // this.renderLoaded(db);\n        // switch (db.status) {\n        //     case DBStatus.NONE:\n        //         // this.db.fetchLinkedObjects({ taxonRef: this.props.taxonRef, page: 1, pageSize: 1000 });\n        //         return this.renderNone();\n        //     case DBStatus.LOADING:\n        //         return this.renderLoading();\n        //     case DBStatus.ERROR:\n        //         return this.renderError(db);\n        //     case DBStatus.LOADED:\n        //         return this.renderLoaded(db);\n        // }\n    }\n}\n","import { AppConfig } from '@kbase/ui-components';\nimport { StoreState } from '../../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps { }\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import React from 'react';\nimport { Tabs } from 'antd';\nimport TaxonDetail from './TaxonDetail';\nimport TaxonDescription from './TaxonDescription';\nimport LinkedData from './linkedData';\nimport { Taxon } from '../../../types/taxonomy';\n\nexport interface TaxonInfoProps {\n    taxon: Taxon;\n}\n\ninterface TaxonInfoState { }\n\nexport default class TaxonInfo extends React.Component<TaxonInfoProps, TaxonInfoState> {\n    render() {\n        return (\n            <Tabs defaultActiveKey=\"detail\" animated={false} className=\"FullHeight-tabs\">\n                <Tabs.TabPane tab=\"Detail\" key=\"detail\" forceRender={false}>\n                    <div className=\"Col\" style={{ overflowY: 'auto' }}>\n                        <TaxonDetail taxon={this.props.taxon} />\n                    </div>\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Description\" key=\"description\" forceRender={false}>\n                    <TaxonDescription taxon={this.props.taxon} />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Linked Data\" key=\"linkedData\" forceRender={false}>\n                    <div className=\"Col\" style={{ overflowY: 'auto' }}>\n                        <LinkedData taxonRef={this.props.taxon.ref} />\n                    </div>\n                </Tabs.TabPane>\n            </Tabs>\n        );\n    }\n}\n","import React from 'react';\n\nimport { SourceInfo } from '../SourceInfo';\nimport LineageNavigator from '../LineageNavigator';\nimport TaxonSummary from '../TaxonSummary';\nimport { Taxon, TaxonReference } from '../../../types/taxonomy';\nimport { Row, Col } from 'antd';\nimport TaxonInfo from '../taxonInfo/TaxonInfo';\nimport './Taxonomy.css';\n\nexport interface TaxonomyProps {\n    // lineage: Array<Taxon>;\n    selectedTaxon: Taxon;\n    targetTaxon: Taxon;\n    selectTaxonRef: (taxonRef: TaxonReference) => void;\n    navigateToTaxonREf: (taxonRef: TaxonReference) => void;\n    setTitle: (title: string) => void;\n}\n\ninterface TaxonomyState { }\n\nexport default class Taxonomy extends React.Component<TaxonomyProps, TaxonomyState> {\n    renderTaxonInfo() {\n        if (!this.props.selectedTaxon) {\n            return <div>No taxon selected</div>;\n        }\n        return <TaxonInfo taxon={this.props.selectedTaxon} />;\n        // return 'disabled';\n    }\n\n    componentDidMount() {\n        this.props.setTitle('Taxonomy Landing Page for \"' + this.props.targetTaxon.name + '\"');\n    }\n\n    render() {\n        return (\n            <div className=\"Col scrollable Taxonomy\">\n                <div className=\"Col-auto Taxonomy-summary-section\">\n                    <Row>\n                        <Col span={12}>\n                            <TaxonSummary taxon={this.props.targetTaxon} />\n                        </Col>\n                        <Col span={12}>\n                            <SourceInfo />\n                        </Col>\n                    </Row>\n                </div>\n                <div className=\"Row scrollable\">\n                    <div className=\"Col scrollable\" style={{ flex: '0 0 20em' }}>\n                        <LineageNavigator\n                            selectedTaxon={this.props.selectedTaxon}\n                            // lineage={this.props.lineage}\n                            selectTaxonRef={this.props.selectTaxonRef}\n                            targetTaxon={this.props.targetTaxon}\n                            navigateToTaxonRef={this.props.navigateToTaxonREf}\n                        />\n                    </div>\n\n                    <div className=\"Col scrollable\" style={{ marginLeft: '10px' }}>\n                        {this.renderTaxonInfo()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport TaxonDB, { TaxonDBStateLoaded } from './TaxonDB';\nimport { DBStatus, DBStateError } from '../../../lib/DB';\nimport { AppConfig } from '@kbase/ui-components';\nimport Taxonomy from './Taxonomy';\nimport { TaxonReference } from '../../../types/taxonomy';\nimport { Icon } from 'antd';\nimport ErrorView from '../../../components/ErrorView';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    taxonRef: TaxonReference;\n    // taxonID: TaxonID;\n    navigate: (taxonRef: TaxonReference) => void;\n    setTitle: (title: string) => void;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: TaxonDB;\n    currentlyNavigatedTaxonRef: TaxonReference | null;\n    constructor(props: Props) {\n        super(props);\n        this.db = new TaxonDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n        this.currentlyNavigatedTaxonRef = null;\n    }\n\n    selectTaxon(taxonRef: TaxonReference) {\n        return this.db.getSelectedTaxon(taxonRef);\n    }\n\n    navigateToTaxon(taxonRef: TaxonReference) {\n        return this.props.navigate(taxonRef);\n    }\n\n    renderLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderError(db: DBStateError) {\n        // NB this is rendered raw in the container, which is a flex row.\n        return (\n            <div className=\"Col\">\n                <div style={{ width: '50%', margin: '20px auto 0 auto' }}>\n                    <ErrorView error={db.error} />\n                </div>\n            </div>\n        );\n    }\n\n    renderLoaded(db: TaxonDBStateLoaded) {\n        return (\n            <Taxonomy\n                targetTaxon={db.targetTaxon}\n                selectedTaxon={db.selectedTaxon}\n                selectTaxonRef={this.selectTaxon.bind(this)}\n                navigateToTaxonREf={this.navigateToTaxon.bind(this)}\n                setTitle={this.props.setTitle}\n            />\n        );\n    }\n\n    componentDidMount() {\n        this.db.getTargetTaxon(this.props.taxonRef);\n    }\n\n    componentDidUpdate(previousProps: Props) {\n        if (previousProps.taxonRef.id !== this.props.taxonRef.id ||\n            previousProps.taxonRef.timestamp !== this.props.taxonRef.timestamp) {\n            this.db.getTargetTaxon(this.props.taxonRef);\n        }\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                // this.db.getTargetTaxon(this.props.taxonID);\n                return this.renderLoading();\n            case DBStatus.LOADING:\n                return this.renderLoading();\n            case DBStatus.ERROR:\n                return this.renderError(db);\n            case DBStatus.LOADED:\n                return this.renderLoaded(db);\n            // if (this.props.taxonID !== db.targetTaxon.id) {\n            //     this.db.getTargetTaxon(this.props.taxonID);\n            //     return this.renderLoaded(db);\n            // } else {\n            //     return this.renderLoaded(db);\n            // }\n        }\n    }\n}\n","import { AppConfig, sendTitle } from '@kbase/ui-components';\nimport { StoreState } from '../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { navigate } from '../../../redux/actions';\nimport { TaxonReference, taxonomyNamespaceToString } from '../../../types/taxonomy';\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps {\n    navigate: (ref: TaxonReference) => void;\n    setTitle: (title: string) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, props: OwnProps): DispatchProps {\n    return {\n        navigate: (ref: TaxonReference) => {\n            const relationEngineID = [\n                'taxonomy',\n                taxonomyNamespaceToString(ref.namespace),\n                ref.id,\n                String(ref.timestamp)\n            ].join('/');\n            dispatch(navigate(relationEngineID) as any);\n        },\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import { RelationEngineID, StoreState } from '../../redux/store';\n// import { TaxonID } from './redux/store';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { navigate } from '../../redux/actions';\nimport { connect } from 'react-redux';\nimport Taxonomy from './main';\nimport { sendTitle } from '@kbase/ui-components';\n\nexport interface OwnProps {\n    // taxonID: TaxonID;\n}\n\nexport interface StateProps {\n    // taxonID: TaxonID;\n}\n\nexport interface DispatchProps {\n    navigate: (relationEngineID: RelationEngineID) => void;\n    setTitle: (title: string) => void;\n    // load: (taxonID: TaxonID) => void;\n}\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    return {};\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        navigate: (relationEngineId: RelationEngineID) => {\n            dispatch(navigate(relationEngineId) as any);\n        },\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        }\n        // load: (taxonID: TaxonID) => {\n        //     dispatch(load(taxonID) as any);\n        // }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Taxonomy);\n","import { DynamicServiceClient } from \"@kbase/ui-lib\";\n\nexport interface GetParentsParams {\n    ns: string;\n    id: string;\n    ts: number;\n}\n\nexport interface GetParentsResult {\n    terms: Array<TermBrief>\n}\n\nexport interface GetChildrenParams {\n    ns: string;\n    id: string;\n    ts: number;\n}\n\nexport interface GetChildrenResult {\n    terms: Array<TermBrief>\n}\n\nexport interface GetTermParams {\n    ns: string;\n    id: string;\n    ts: number;\n}\n\nexport interface Synonym {\n    pred: string;\n    val: string;\n    xrefs: Array<XRef>\n}\n\nexport interface XRef {\n    val: string;\n}\n\n// export interface Termx {\n//     ns: string;\n//     id: string;\n//     ts: number;\n//     name: string;\n//     scientific_name: string;\n//     relation: string;\n//     synonyms: Array<Synonym>;\n//     goID?: string;\n//     commnent: string;\n//     definition: string;\n// }\n\n// doesn't include the underscore fields\n// TODO: the api should not return any underscore\n// fields.\nexport interface Term {\n    namespace: string;\n    id: string;\n    alt_ids: Array<string>;\n    name: string;\n    comments: Array<string>;\n    def: {\n        val: string;\n        xrefs: Array<string>;\n    };\n    created: number;\n    expired: number;\n    subsets: Array<string>;\n    synonyms: Array<Synonym>;\n    type: string;\n    xrefs: Array<XRef>;\n\n    first_version: string;\n    last_version: string;\n    release_created: number;\n    release_expired: number;\n}\n\nexport interface TermBrief {\n    ns: string;\n    id: string;\n    ts: number;\n    name: string;\n    scientific_name: string;\n    relation: string;\n}\n\nexport interface GetTermResult {\n    term: Term,\n    ts: number\n    // ignore the stats\n}\n\nexport interface GetRelatedObjectsParams {\n    ns: string;\n    id: string;\n    ts: number;\n}\n\nexport interface GetRelatedObjectsResult {\n\n}\n\nexport default class OntologyAPIClient extends DynamicServiceClient {\n    static module: string = 'ontology_re_api';\n\n    async getParents({ ns, id, ts }: { ns: string, id: string, ts: number }): Promise<GetParentsResult> {\n        const params: GetParentsParams = {\n            ns, id, ts\n        };\n        const [result] = await this.callFunc<[GetParentsParams], [GetParentsResult]>('get_parents', [\n            params\n        ]);\n        return result;\n    }\n\n    async getTerm({ ns, id, ts }: { ns: string, id: string, ts: number }): Promise<GetTermResult> {\n        const params: GetTermParams = {\n            ns, id, ts\n        }\n        const [result] = await this.callFunc<[GetTermParams], [GetTermResult]>('get_term', [\n            params\n        ]);\n        return result;\n    }\n\n    async getChildren({ ns, id, ts }: { ns: string, id: string, ts: number }): Promise<GetChildrenResult> {\n        const params: GetChildrenParams = {\n            ns, id, ts\n        };\n        const [result] = await this.callFunc<[GetChildrenParams], [GetChildrenResult]>('get_children', [\n            params\n        ]);\n        return result;\n    }\n\n    async getRelatedObjects({ ns, id, ts }: { ns: string, id: string, ts: number }): Promise<GetRelatedObjectsResult> {\n        const params: GetRelatedObjectsParams = {\n            ns, id, ts\n        };\n        const [result] = await this.callFunc<[GetRelatedObjectsParams], [GetRelatedObjectsResult]>('get_children', [\n            params\n        ]);\n        return result;\n    }\n}","import OntologyAPIClient, { Term } from './OntologyAPIClient';\nimport { OntologyReference, OntologyNamespace, OntologyTerm, OntologySource, GOOntologyTerm } from '../../../types/ontology';\nimport { RelationEngineCollection } from '../../../types';\n\nexport interface GetTermParams {\n    ref: OntologyReference\n}\n\nexport interface GetTermResult {\n    term: OntologyTerm;\n}\n\nexport function ontologyNamespaceToString(namespace: OntologyNamespace): string {\n    switch (namespace) {\n        case OntologyNamespace.GO:\n            return 'go_ontology';\n    }\n}\n\nexport function stringToOntologyNamespace(ns: string): OntologyNamespace {\n    switch (ns) {\n        case 'go_ontology':\n            return OntologyNamespace.GO\n        default:\n            throw new Error('Unknown ontology namespace: ' + ns);\n    }\n}\n\nexport function rawTermToTerm(term: Term, ts: number): OntologyTerm {\n    const namespace = stringToOntologyNamespace('go');\n\n    switch (namespace) {\n        case OntologyNamespace.GO:\n            const temp: GOOntologyTerm = {\n                type: OntologySource.GO,\n                ref: {\n                    collection: RelationEngineCollection.ONTOLOGY,\n                    namespace: OntologyNamespace.GO, // TODO: stringToOntologyNamespace(term.ns),\n                    id: term.id,\n                    timestamp: ts\n                },\n                namespace: term.namespace,\n                comment: term.comments,\n                definition: term.def.val,\n                goID: term.id,\n                isObsolete: false, // ignored for now, \n                name: term.name,\n                synonyms: {\n                    exact: [],\n                    narrow: [],\n                    broad: [],\n                    related: []\n                }, // TODO:\n            };\n            return temp;\n    }\n\n\n}\n\nexport default class OntologyModel {\n    ontologyClient: OntologyAPIClient;\n    token: string;\n    url: string;\n    constructor({ token, url }: { token: string; url: string }) {\n        this.token = token;\n        this.url = url;\n        this.ontologyClient = new OntologyAPIClient({ token, url });\n    }\n\n    async getTerm({ ref }: GetTermParams): Promise<GetTermResult> {\n        const client = new OntologyAPIClient({\n            token: this.token,\n            url: this.url\n        });\n\n        const result = await client.getTerm({\n            ns: ontologyNamespaceToString(ref.namespace),\n            id: ref.id,\n            ts: ref.timestamp\n        })\n\n        return {\n            term: rawTermToTerm(result.term, result.ts)\n        };\n\n    }\n}","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../../../lib/DB';\nimport { OntologyTerm, OntologyReference } from '../../../types/ontology';\nimport { AppConfig } from '@kbase/ui-components';\nimport OntologyModel from '../lib/model';\n\nexport type OntologyDBStateNone = DBStateNone;\nexport type OntologyDBStateLoading = DBStateLoading;\nexport type OntologyDBStateError = DBStateError;\nexport interface OntologyDBStateLoaded extends DBStateLoaded {\n    targetTerm: OntologyTerm;\n    selectedTerm: OntologyTerm;\n}\n\nexport type OntologyDBState = OntologyDBStateNone | OntologyDBStateLoading | OntologyDBStateLoaded | OntologyDBStateError;\n\nexport interface OntologyDBProps extends DBProps<OntologyDBState> {\n    token: string;\n    config: AppConfig;\n}\n\nexport default class OntologyDB extends DB<OntologyDBState> {\n    props: OntologyDBProps;\n    constructor(props: OntologyDBProps) {\n        super(props);\n        this.props = props;\n    }\n\n    async getTargetTerm(termRef: OntologyReference) {\n        this.set((state: OntologyDBState) => {\n            return {\n                ...state,\n                status: DBStatus.LOADING\n            };\n        });\n\n        const client = new OntologyModel({\n            token: this.props.token,\n            url: this.props.config.services.ServiceWizard.url\n        });\n\n        try {\n\n            const { term } = await client.getTerm({\n                ref: termRef\n            });\n\n            this.set((state: OntologyDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    targetTerm: term,\n                    selectedTerm: term\n                }\n            });\n        } catch (ex) {\n            this.set((state: OntologyDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.ERROR,\n                    error: ex.message\n                };\n            });\n        }\n    }\n\n    getSelectedTerm(termRef: OntologyReference) {\n        this.set((state: OntologyDBState) => {\n            return {\n                ...state,\n                status: DBStatus.LOADING\n            };\n        });\n\n        // const client = new OntologyModel({\n        //     token: this.props.token,\n        //     url: this.props.config.services.ServiceWizard.url\n        // })\n    }\n}","import React from 'react';\nimport { OntologyReference, OntologyTermBrief, ontologyNamespaceToString } from '../../types/ontology';\nimport { Tooltip, Icon } from 'antd';\nimport './OntologyTerm.css';\n\nexport interface Props {\n    term: OntologyTermBrief;\n    isActive: boolean;\n    selectTermRef: (ref: OntologyReference) => void;\n    navigateToTermRef: (ref: OntologyReference) => void;\n}\n\ninterface State {\n    hovering: boolean;\n}\n\nexport default class OntologyTerm extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            hovering: false\n        };\n    }\n    clickTerm() {\n        this.props.selectTermRef(this.props.term.ref);\n    }\n    clickNavigateToTerm() {\n        const hash = [\n            'review',\n            'ontology',\n            ontologyNamespaceToString(this.props.term.ref.namespace),\n            this.props.term.ref.id,\n            String(this.props.term.ref.timestamp)\n        ].join('/');\n        // const hash = `review/${this.props.term.}`;\n        // TODO: use the integration api?\n        if (window.parent) {\n            window.parent.location.hash = hash;\n        } else {\n            window.location.hash = hash;\n        }\n        // window.history.pushState({}, 'my title', `/#review/${this.props.taxon.id}`);\n        // this.props.navigateToTaxonID(this.props.taxon.id);\n    }\n\n    onMouseEnter(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: true });\n    }\n\n    onMouseLeave(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: false });\n    }\n\n    renderTerm() {\n        return <div className=\"OntologyTerm-term\" onClick={this.clickNavigateToTerm.bind(this)}>\n            <div className=\"OntologyTerm-name\">\n                {this.props.term.name}\n            </div>\n\n        </div>;\n        // <div className=\"OntologyTerm-id\">\n        //         {this.props.term.ref.id}\n        //     </div>\n    }\n\n    renderOver() {\n        return (\n            <React.Fragment>\n                {this.renderTerm()}\n                <div className=\"OntologyTerm-inspector\" onClick={this.clickTerm.bind(this)}>\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderActive() {\n        return (\n            <React.Fragment>\n                {this.renderTerm()}\n                <div className=\"OntologyTerm-inspector\">\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderNormal() {\n        return this.renderTerm();\n    }\n\n    renderItem() {\n        if (this.props.isActive) {\n            return this.renderActive();\n        }\n        if (this.state.hovering) {\n            return this.renderOver();\n        } else {\n            return this.renderNormal();\n        }\n    }\n\n    render() {\n        const term = this.props.term;\n        const classNames = ['OntologyTerm'];\n        if (this.props.isActive) {\n            const classNames = ['OntologyTerm'];\n            classNames.push('OntologyTerm-active');\n        }\n\n        const tooltipTitle = (\n            <div>\n                <div style={{ borderBottom: '1px solid silver' }}>{term.name}</div>\n                {term.ref.id}\n            </div>\n        );\n\n        return (\n            <Tooltip title={tooltipTitle} placement=\"right\">\n                <div\n                    className={classNames.join(' ')}\n                    key={this.props.term.ref.id}\n                    onMouseEnter={this.onMouseEnter.bind(this)}\n                    onMouseLeave={this.onMouseLeave.bind(this)}\n                >\n                    {this.renderItem()}\n                </div>\n            </Tooltip>\n        );\n    }\n}\n","import React from 'react';\nimport { OntologyReference, OntologyTermRelatedBrief, ontologyNamespaceToString } from '../../../types/ontology';\nimport { Tooltip, Icon } from 'antd';\nimport './Term.css';\n\nexport interface Props {\n    term: OntologyTermRelatedBrief;\n    isActive: boolean;\n    selectTermRef: (termRef: OntologyReference) => void;\n    navigateToTermRef: (termRef: OntologyReference) => void;\n}\n\ninterface State {\n    hovering: boolean;\n}\n\nexport default class OntologyItem extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            hovering: false\n        };\n    }\n    clickTerm() {\n        this.props.selectTermRef(this.props.term.ref);\n    }\n    clickNavigateToTerm() {\n        const hash = [\n            'review',\n            'ontology',\n            ontologyNamespaceToString(this.props.term.ref.namespace),\n            String(this.props.term.ref.timestamp)\n        ].join('/');\n        // const hash = `review/${this.props.term.ref.id}`;\n        // TODO: use the integration api?\n        if (window.parent) {\n            window.parent.location.hash = hash;\n        } else {\n            window.location.hash = hash;\n        }\n        // window.history.pushState({}, 'my title', `/#review/${this.props.taxon.id}`);\n        // this.props.navigateToTaxonID(this.props.taxon.id);\n    }\n\n    onMouseEnter(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: true });\n    }\n\n    onMouseLeave(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: false });\n    }\n\n    renderOver() {\n        return (\n            <React.Fragment>\n                <div className=\"OntologyTermRelatedBrief-name\" onClick={this.clickNavigateToTerm.bind(this)}>\n                    {this.props.term.name}\n                </div>\n                <div className=\"OntologyTermRelatedBrief-inspector\" onClick={this.clickTerm.bind(this)}>\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderActive() {\n        return (\n            <React.Fragment>\n                <div className=\"OntologyTermRelatedBrief-name\" onClick={this.clickNavigateToTerm.bind(this)}>\n                    {this.props.term.name}\n                </div>\n                <div className=\"OntologyTermRelatedBrief-inspector\">\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderNormal() {\n        return (\n            <React.Fragment>\n                <div className=\"OntologyTermRelatedBrief-name\">{this.props.term.name}</div>\n            </React.Fragment>\n        );\n    }\n\n    renderItem() {\n        if (this.props.isActive) {\n            return this.renderActive();\n        }\n        if (this.state.hovering) {\n            return this.renderOver();\n        } else {\n            return this.renderNormal();\n        }\n    }\n\n    render() {\n        const term = this.props.term;\n        const classNames = ['OntologyTermRelatedBrief'];\n        if (this.props.isActive) {\n            const classNames = ['OntologyTermRelatedBrief'];\n            classNames.push('OntologyTermRelatedBrief-active');\n        }\n\n        const tooltipTitle = (\n            <div>\n                <div style={{ borderBottom: '1px solid silver' }}>{term.name}</div>\n            </div>\n        );\n\n        return (\n            <Tooltip title={tooltipTitle} placement=\"right\">\n                <div\n                    className={classNames.join(' ')}\n                    key={this.props.term.ref.id}\n                    onMouseEnter={this.onMouseEnter.bind(this)}\n                    onMouseLeave={this.onMouseLeave.bind(this)}\n                >\n                    {this.renderItem()}\n                </div>\n            </Tooltip>\n        );\n    }\n}\n","import React from 'react';\nimport { OntologyReference, OntologyTermRelatedBrief } from '../../../types/ontology';\nimport './style.css';\nimport Term from './Term';\nimport { Empty } from 'antd';\n\nexport interface Props {\n    terms: Array<OntologyTermRelatedBrief>;\n    // maxItems: number;\n    totalItems: number;\n    selectedTermRef: OntologyReference | null;\n    selectTermRef: (termRef: OntologyReference) => void;\n    navigateToTermRef: (termRef: OntologyReference) => void;\n}\n\ninterface State { }\n\nexport default class OntologyList extends React.Component<Props, State> {\n    selectTerm(termRef: OntologyReference) {\n        this.props.selectTermRef(termRef);\n    }\n    navigateToTerm(termRef: OntologyReference) {\n        this.props.navigateToTermRef(termRef);\n    }\n    renderItemsPlain() {\n        return this.props.terms.map((term) => {\n            const isActive = this.props.selectedTermRef === term.ref;\n            return (\n                <Term\n                    term={term}\n                    isActive={isActive}\n                    selectTermRef={this.selectTerm.bind(this)}\n                    key={term.ref.id}\n                    navigateToTermRef={this.navigateToTerm.bind(this)}\n                />\n            );\n        });\n    }\n    renderNoItems() {\n        return <Empty description=\"No Children\" image={Empty.PRESENTED_IMAGE_SIMPLE} />;\n    }\n    render() {\n        if (this.props.terms.length === 0) {\n            return this.renderNoItems();\n        }\n        return this.renderItemsPlain();\n    }\n}\n","import React from 'react';\nimport { OntologyReference, OntologyTermRelatedBrief, ontologyNamespaceToString } from '../../../types/ontology';\nimport { Tooltip, Icon } from 'antd';\nimport './Term.css';\n\nexport interface Props {\n    term: OntologyTermRelatedBrief;\n    isActive: boolean;\n    selectTermRef: (ref: OntologyReference) => void;\n    navigateToTermRef: (ref: OntologyReference) => void;\n}\n\ninterface State {\n    hovering: boolean;\n}\n\nexport default class OntologyItem extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            hovering: false\n        };\n    }\n    clickTerm() {\n        this.props.selectTermRef(this.props.term.ref);\n    }\n    clickNavigateToTerm() {\n        const hash = [\n            'review',\n            'ontology',\n            ontologyNamespaceToString(this.props.term.ref.namespace),\n            String(this.props.term.ref.timestamp)\n        ].join('/');\n        // const hash = `review/${this.props.term.id}`;\n        // TODO: use the integration api?\n        if (window.parent) {\n            window.parent.location.hash = hash;\n        } else {\n            window.location.hash = hash;\n        }\n        // window.history.pushState({}, 'my title', `/#review/${this.props.taxon.id}`);\n        // this.props.navigateToTaxonID(this.props.taxon.id);\n    }\n\n    onMouseEnter(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: true });\n    }\n\n    onMouseLeave(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: false });\n    }\n\n    renderOver() {\n        return (\n            <React.Fragment>\n                <div className=\"OntologyTermRelatedBrief-name\" onClick={this.clickNavigateToTerm.bind(this)}>\n                    {this.props.term.name}\n                </div>\n                <div className=\"OntologyTermRelatedBrief-inspector\" onClick={this.clickTerm.bind(this)}>\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderActive() {\n        return (\n            <React.Fragment>\n                <div className=\"OntologyTermRelatedBrief-name\" onClick={this.clickNavigateToTerm.bind(this)}>\n                    {this.props.term.name}\n                </div>\n                <div className=\"OntologyTermRelatedBrief-inspector\">\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderNormal() {\n        return (\n            <React.Fragment>\n                <div className=\"OntologyTermRelatedBrief-name\">{this.props.term.name}</div>\n            </React.Fragment>\n        );\n    }\n\n    renderItem() {\n        if (this.props.isActive) {\n            return this.renderActive();\n        }\n        if (this.state.hovering) {\n            return this.renderOver();\n        } else {\n            return this.renderNormal();\n        }\n    }\n\n    render() {\n        const term = this.props.term;\n        const classNames = ['OntologyTermRelatedBrief'];\n        if (this.props.isActive) {\n            const classNames = ['OntologyTermRelatedBrief'];\n            classNames.push('OntologyTermRelatedBrief-active');\n        }\n\n        const tooltipTitle = (\n            <div>\n                <div style={{ borderBottom: '1px solid silver' }}>{term.name}</div>\n            </div>\n        );\n\n        return (\n            <Tooltip title={tooltipTitle} placement=\"right\">\n                <div\n                    className={classNames.join(' ')}\n                    key={this.props.term.ref.id}\n                    onMouseEnter={this.onMouseEnter.bind(this)}\n                    onMouseLeave={this.onMouseLeave.bind(this)}\n                >\n                    {this.renderItem()}\n                </div>\n            </Tooltip>\n        );\n    }\n}\n","import React from 'react';\nimport { OntologyReference, OntologyTermRelatedBrief } from '../../../types/ontology';\nimport './style.css';\nimport Term from './Term';\nimport { Empty } from 'antd';\n\nexport interface Props {\n    terms: Array<OntologyTermRelatedBrief>;\n    // maxItems: number;\n    totalItems: number;\n    selectedTermRef: OntologyReference | null;\n    selectTermRef: (termRef: OntologyReference) => void;\n    navigateToTermRef: (termRef: OntologyReference) => void;\n}\n\ninterface State { }\n\nexport default class OntologyList extends React.Component<Props, State> {\n    selectTerm(termRef: OntologyReference) {\n        this.props.selectTermRef(termRef);\n    }\n    navigateToTerm(termRef: OntologyReference) {\n        this.props.navigateToTermRef(termRef);\n    }\n    renderItemsPlain() {\n        return this.props.terms.map((term) => {\n            const isActive = this.props.selectedTermRef === term.ref;\n            return (\n                <Term\n                    term={term}\n                    isActive={isActive}\n                    selectTermRef={this.selectTerm.bind(this)}\n                    key={term.ref.id}\n                    navigateToTermRef={this.navigateToTerm.bind(this)}\n                />\n            );\n        });\n    }\n    renderNoItems() {\n        return <Empty description=\"No Children\" image={Empty.PRESENTED_IMAGE_SIMPLE} />;\n    }\n    render() {\n        if (this.props.terms.length === 0) {\n            return this.renderNoItems();\n        }\n        return this.renderItemsPlain();\n    }\n}\n","import React from 'react';\nimport './style.css';\nimport OntologyItem from '../OntologyTerm';\nimport { OntologyTermBrief, OntologyRelation, OntologyReference, OntologyTermRelatedBrief, OntologyNamespace } from '../../../types/ontology';\nimport Children from '../Children';\nimport Parents from '../Parents';\nimport { RelationEngineCollection } from '../../../types';\n\nexport interface NavProps {\n}\n\ninterface NavState {\n}\n\nexport default class Nav extends React.Component<NavProps, NavState> {\n    selectTermRef(termRef: OntologyReference) {\n        console.log('selecting', termRef);\n    }\n    navigateToTermRef(termRef: OntologyReference) {\n        console.log('navigating to ', termRef);\n    }\n\n    render() {\n        const timestamp = Date.now();\n        const term: OntologyTermBrief = {\n            ref: {\n                collection: RelationEngineCollection.ONTOLOGY,\n                namespace: OntologyNamespace.GO,\n                id: 'GO:0046294',\n                timestamp\n            },\n            // type: OntologySource.GO,\n            name: 'aldehyde catabolic process',\n            goID: 'GO:0046294'\n        }\n        const children: Array<OntologyTermRelatedBrief> = [\n            {\n                ref: {\n                    collection: RelationEngineCollection.ONTOLOGY,\n                    namespace: OntologyNamespace.GO,\n                    id: 'GO:0043276',\n                    timestamp\n                },\n                relation: OntologyRelation.IS_A,\n                // id: 'go_ontology/GO:0043276',\n                name: 'anoikis',\n                goID: 'GO:0043276'\n            },\n            {\n                ref: {\n                    collection: RelationEngineCollection.ONTOLOGY,\n                    namespace: OntologyNamespace.GO,\n                    id: 'GO:0008637',\n                    timestamp\n                },\n                relation: OntologyRelation.PART_OF,\n                // id: 'go_ontology/GO:0008637',\n                name: 'apoptotic',\n                // type: OntologySource.GO,\n                goID: 'GO:0008637'\n            }\n        ]\n        const parents: Array<OntologyTermRelatedBrief> = [\n            {\n                ref: {\n                    collection: RelationEngineCollection.ONTOLOGY,\n                    namespace: OntologyNamespace.GO,\n                    id: 'GO:0012501',\n                    timestamp\n                },\n                relation: OntologyRelation.IS_A,\n                // id: 'go_ontology/GO:0012501',\n                name: 'programmed cell death',\n                // type: OntologySource.GO,\n                goID: 'GO:0012501'\n            }\n        ]\n        return <div className=\"Col scrollable OntologyNav\">\n            <div className=\"Nav-box Nav-box-auto\">\n                <div className=\"Col Nav-box-title\">\n                    parents\n                </div>\n                <div className=\"Col Nav-box-content\">\n                    <Parents\n                        terms={parents}\n                        totalItems={parents.length}\n                        selectedTermRef={null}\n                        selectTermRef={this.selectTermRef.bind(this)}\n                        navigateToTermRef={this.navigateToTermRef.bind(this)}\n                    />\n                </div>\n            </div>\n            <div className=\"Nav-box Nav-box-auto\">\n                <div className=\"Col Nav-box-title\">\n                    selected\n                </div>\n                <div className=\"Col Nav-box-content\">\n                    <OntologyItem\n                        term={term}\n                        isActive={false}\n                        selectTermRef={this.selectTermRef.bind(this)}\n                        navigateToTermRef={this.navigateToTermRef.bind(this)} />\n                </div>\n            </div>\n            <div className=\"Nav-box Nav-box-fill\">\n                <div className=\"Col Nav-box-title\">\n                    children\n                </div>\n                <div className=\"Col Nav-box-content\">\n                    <Children\n                        terms={children}\n                        totalItems={children.length}\n                        selectedTermRef={null}\n                        selectTermRef={this.selectTermRef.bind(this)}\n                        navigateToTermRef={this.navigateToTermRef.bind(this)}\n                    />\n                </div>\n            </div>\n        </div >\n    }\n}","import React from 'react';\nimport { OntologySource, GOOntologyTerm, OntologyTerm } from '../../types/ontology';\n\nexport interface Props {\n    term: OntologyTerm;\n    newWindow: boolean;\n}\n\ninterface State {\n}\n\nexport default class TermLink extends React.Component<Props, State> {\n    renderGOLink(term: GOOntologyTerm) {\n        const href = `http://amigo.geneontology.org/amigo/term/${term.goID}`;\n        const target = this.props.newWindow ? '_blank' : '_parent';\n        return (\n            <a href={href} target={target}>\n                {term.ref.id}\n            </a>\n        )\n    }\n\n    render() {\n        const term = this.props.term;\n        switch (term.type) {\n            case (OntologySource.GO):\n                return this.renderGOLink(term);\n        }\n    }\n}","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../../../../lib/DB';\nimport { LinkedObject, OntologyReference } from '../../../../types/ontology';\nimport { AppConfig } from '@kbase/ui-components';\n\nexport type LinkedObjectsDBStateNone = DBStateNone;\nexport type LinkedObjectsDBStateLoading = DBStateLoading;\nexport type LinkedObjectsDBStateError = DBStateError;\n\nexport interface LinkedObjectsDBStateLoaded extends DBStateLoaded {\n    linkedObjects: Array<LinkedObject>\n}\n\nexport type LinkedObjectsDBState = LinkedObjectsDBStateNone | LinkedObjectsDBStateLoading | LinkedObjectsDBStateError | LinkedObjectsDBStateLoaded;\n\nexport interface LinkedObjectsProps extends DBProps<LinkedObjectsDBState> {\n    token: string;\n    config: AppConfig;\n}\n\nexport default class LinkedObjectsDB extends DB<LinkedObjectsDBState> {\n    props: LinkedObjectsProps;\n    constructor(props: LinkedObjectsProps) {\n        super(props);\n        this.props = props;\n    }\n    async getLinkedObjects(termRef: OntologyReference) {\n        try {\n            this.set((state: LinkedObjectsDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADING\n                }\n            });\n\n            // do the call here when it is available\n\n            const linkedObjects: Array<LinkedObject> = [\n                {\n                    object: {\n                        workspaceID: 43747,\n                        id: 4,\n                        version: 1\n                    },\n                    type: {\n                        module: 'KBaseGenomes',\n                        name: 'Genome'\n                    },\n                    scientificName: 'Escherichia coli',\n                    feature: 'CF61_RS00005'\n                },\n                {\n                    object: {\n                        workspaceID: 43747,\n                        id: 4,\n                        version: 1\n                    },\n                    type: {\n                        module: 'KBaseGenomes',\n                        name: 'Genome'\n                    },\n                    scientificName: 'Escherichia coli',\n                    feature: 'CF61_RS00005'\n                },\n                {\n                    object: {\n                        workspaceID: 43747,\n                        id: 4,\n                        version: 1\n                    },\n                    type: {\n                        module: 'KBaseGenomes',\n                        name: 'Genome'\n                    },\n                    scientificName: 'Escherichia coli',\n                    feature: 'CF61_RS00005'\n                },\n                {\n                    object: {\n                        workspaceID: 43747,\n                        id: 4,\n                        version: 1\n                    },\n                    type: {\n                        module: 'KBaseGenomes',\n                        name: 'Genome'\n                    },\n                    scientificName: 'Escherichia coli',\n                    feature: 'CF61_RS00005'\n                }\n            ]\n\n            this.set((state: LinkedObjectsDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    linkedObjects\n                }\n            });\n        } catch (ex) {\n            this.set((state: LinkedObjectsDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    error: {\n                        code: 'not-found',\n                        source: 'LinkedObjectsDB.getLinkedObjects',\n                        message: ex.message\n                    }\n                }\n            });\n        }\n    }\n\n}\n","import React from 'react';\nimport './style.css';\nimport { Table } from 'antd';\nimport { LinkedObject } from '../../../../types/ontology';\n\nexport interface Props {\n    linkedObjects: Array<LinkedObject>;\n}\n\ninterface State {\n\n}\n\nexport default class LinkedObjects extends React.Component<Props, State> {\n    renderTable() {\n        return <Table\n            dataSource={this.props.linkedObjects}\n            className=\"KBaseAntdOverride-remove-table-border ScrollingFlexTable\"\n            size=\"small\"\n            pagination={false}\n            scroll={{ y: '100%' }}\n            // rowKey=\"name\"\n            bordered={false}\n        >\n            <Table.Column\n                dataIndex={\"scientificName\"}\n                title=\"Scientific Name\"\n                width=\"40%\"\n            />\n            <Table.Column\n                dataIndex={\"type.name\"}\n                title=\"Type\"\n                width=\"30%\"\n            />\n            <Table.Column\n                dataIndex={\"feature\"}\n                title=\"Feature\"\n                width=\"30%\"\n            />\n        </Table>\n    }\n    renderNone() {\n        return (\n            <p style={{ fontStyle: 'italic' }}>\n                No objects use this term.\n            </p>\n        )\n    }\n    render() {\n        if (this.props.linkedObjects.length === 0) {\n            return this.renderNone();\n        }\n        return this.renderTable();\n    }\n}","import React from 'react';\nimport LinkedObjectsDB, { LinkedObjectsDBStateLoaded } from './LinkedObjectsDB';\nimport { DBStatus, DBStateError } from '../../../../lib/DB';\n\nimport { AppConfig } from '@kbase/ui-components';\nimport View from './view';\nimport { OntologyReference } from '../../../../types/ontology';\nimport { Icon } from 'antd';\nimport ErrorView from '../../../../components/ErrorView';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    termRef: OntologyReference;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: LinkedObjectsDB;\n    constructor(props: Props) {\n        super(props);\n        this.db = new LinkedObjectsDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n    }\n\n    renderLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderError(db: DBStateError) {\n        return <ErrorView error={db.error} />\n    }\n\n    renderLoaded(db: LinkedObjectsDBStateLoaded) {\n        return (\n            <View\n                linkedObjects={db.linkedObjects}\n            />\n        );\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                this.db.getLinkedObjects(this.props.termRef);\n                return this.renderLoading();\n            case DBStatus.LOADING:\n                return this.renderLoading();\n            case DBStatus.ERROR:\n                return this.renderError(db);\n            case DBStatus.LOADED:\n                return this.renderLoaded(db);\n        }\n    }\n}\n","import { AppConfig } from '@kbase/ui-components';\nimport { StoreState } from '../../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps { }\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import React from 'react';\nimport { FlexTabs } from '@kbase/ui-components';\nimport './style.css';\nimport { OntologyTerm, Synonym } from '../../../types/ontology';\nimport TermLink from '../TermLink';\nimport LinkedObjects from './LinkedObjects';\n\nexport interface DetailProps {\n    term: OntologyTerm\n}\n\ninterface DetailState {\n\n}\n\nexport default class Detail extends React.Component<DetailProps, DetailState> {\n    renderSynonyms(synonyms: Array<Synonym>) {\n        if (synonyms.length === 0) {\n            return <i>-</i>;\n        }\n        return synonyms.map((s, index) => {\n            return (\n                <div key={String(index)}>\n                    {s}\n                </div>\n            )\n        });\n    }\n    renderDetail() {\n        return (\n            <div className=\"InfoTable DetailTable\">\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        ID\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        <TermLink term={this.props.term} newWindow={true} />\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Name\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.props.term.name}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Definition\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.props.term.definition}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Comment\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.props.term.comment || <i>-</i>}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Synonyms\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\">\n                                exact\n                                </div>\n                            <div className=\"InfoTable-dataCol\">\n                                {this.renderSynonyms(this.props.term.synonyms.exact)}\n                            </div>\n                        </div>\n\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\">\n                                narrow\n                                </div>\n                            <div className=\"InfoTable-dataCol\">\n                                {this.renderSynonyms(this.props.term.synonyms.narrow)}\n                            </div>\n                        </div>\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\">\n                                broad\n                                </div>\n                            <div className=\"InfoTable-dataCol\">\n                                {this.renderSynonyms(this.props.term.synonyms.broad)}\n                            </div>\n                        </div>\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\">\n                                related\n                                </div>\n                            <div className=\"InfoTable-dataCol\">\n                                {this.renderSynonyms(this.props.term.synonyms.broad)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    renderGraph() {\n        return (\n            <div>\n                graph here...\n            </div>\n        )\n    }\n    renderLinkedObjects() {\n\n        return (\n            <LinkedObjects termRef={this.props.term.ref} />\n        )\n    }\n    renderMetadata() {\n        return (\n            <div>\n                render metadata here...\n            </div>\n        )\n    }\n\n    render() {\n        const tabs = [\n            {\n                tab: 'detail',\n                title: 'Detail',\n                component: this.renderDetail()\n            },\n            // {\n            //     tab: 'graph',\n            //     title: 'Graph',\n            //     component: this.renderGraph()\n            // },\n            {\n                tab: 'linked',\n                title: 'Linked Objects',\n                component: this.renderLinkedObjects()\n            },\n            // {\n            //     tab: 'metadata',\n            //     title: 'Metadata',\n            //     component: this.renderMetadata()\n            // }\n        ]\n        return (\n            <FlexTabs tabs={tabs} />\n        )\n    }\n}","import React from 'react';\n\nexport interface Props {\n\n}\n\ninterface State {\n\n}\n\nexport default class SourceInfo extends React.Component<Props, State> {\n    render() {\n        return (\n            <div className=\"Row\">\n                <div className=\"Col-auto\">\n                    <img src=\"images/go-logo.png\" style={{ height: '64px' }} alt=\"Gene Ontology Logo\" />\n                </div>\n                <div className=\"Col\">\n                    <div className=\"InfoTable\">\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                                Source\n                            </div>\n                            <div className=\"InfoTable-dataCol\">\n                                <a\n                                    href=\"http://geneontology.org/\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    Gene Ontology (GO)\n                                </a>\n                            </div>\n                        </div>\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                                Version\n                            </div>\n                            <div className=\"InfoTable-dataCol\">SOME VERSION</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { OntologyTerm } from '../../../types/ontology';\n\nexport interface Props {\n    term: OntologyTerm\n}\n\ninterface State {\n\n}\n\nexport default class TermSummary extends React.Component<Props, State> {\n    render() {\n        return (\n            <div className=\"InfoTable\">\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                        ID\n                    </div>\n                    <div className=\"InfoTable-dataCol\">{this.props.term.goID}</div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                        Name\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.props.term.name}\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { OntologyReference, GOOntologyTerm, OntologySource, OntologyNamespace, OntologyTerm } from '../../../types/ontology';\nimport './style.css';\nimport Nav from '../Nav';\nimport Detail from '../Detail';\nimport { RelationEngineCollection } from '../../../types';\nimport { Row, Col } from 'antd';\nimport SourceInfo from './SourceInfo';\nimport TermSummary from './TermSummary';\n\nexport interface Props {\n    // termRef: OntologyReference;\n    targetTerm: OntologyTerm;\n    selectedTerm: OntologyTerm;\n    selectTerm: (termRef: OntologyReference) => void;\n    navigate: (termRef: OntologyReference) => void;\n    setTitle: (title: string) => void;\n}\n\ninterface State { }\n\nexport default class OntologyView extends React.Component<Props, State> {\n\n    renderLayout() {\n        // FAKE IT FOR NOW\n        const term: GOOntologyTerm = {\n            type: OntologySource.GO,\n            // relation: OntologyRelation.IS_A,\n            ref: {\n                collection: RelationEngineCollection.ONTOLOGY,\n                namespace: OntologyNamespace.GO,\n                id: 'GO:0046294',\n                timestamp: Date.now()\n            },\n            // id: 'go_ontology/GO:0046294',\n            goID: 'GO:0046294',\n            name: 'formaldehyde catabolic process',\n            definition: 'The chemical reactions and pathways resulting in the breakdown of formaldehyde (methanal, H2C=O), the simplest aldehyde. Source: GOC:ai',\n            comment: [],\n            namespace: 'biological_process',\n            isObsolete: false,\n            synonyms: {\n                exact: [\n                    'formaldehyde breakdown',\n                    'formaldehyde catabolism',\n                    'formaldehyde degradation',\n                    'methanal catabolic process',\n                    'methanal catabolism'\n                ],\n                narrow: [],\n                broad: [],\n                related: []\n            }\n        }\n        return (\n            <div className=\"Col scrollable Taxonomy\">\n                <div className=\"Col-auto Ontology-summary-section\">\n                    <Row>\n                        <Col span={12}>\n                            <TermSummary term={term} />\n                        </Col>\n                        <Col span={12}>\n                            <SourceInfo />\n                        </Col>\n                    </Row>\n                </div>\n                <div className=\"Row scrollable\">\n                    <div className=\"Col scrollable\" style={{ flex: '0 0 20em' }}>\n                        <Nav />\n                    </div>\n\n                    <div className=\"Col scrollable\" style={{ marginLeft: '10px' }}>\n                        <Detail term={term} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        this.props.setTitle('ONTOLOGY LANDING PAGE');\n    }\n\n    render() {\n        return this.renderLayout();\n    }\n}\n","import React from 'react';\nimport OntologyDB, { OntologyDBStateLoaded } from './OntologyDB';\nimport { DBStatus, DBStateError } from '../../../lib/DB';\nimport { AppConfig } from '@kbase/ui-components';\nimport View from './view';\nimport { Icon } from 'antd';\nimport ErrorView from '../../../components/ErrorView';\nimport { OntologyReference } from '../../../types/ontology';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    termRef: OntologyReference;\n    // taxonID: TaxonID;\n    navigate: (termRef: OntologyReference) => void;\n    setTitle: (title: string) => void;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: OntologyDB;\n    currentlyNavigatedOntologyRef: OntologyReference | null;\n    constructor(props: Props) {\n        super(props);\n        this.db = new OntologyDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n        this.currentlyNavigatedOntologyRef = null;\n    }\n\n    selectTerm(termRef: OntologyReference) {\n        return this.db.getSelectedTerm(termRef);\n    }\n\n    navigateToTerm(termRef: OntologyReference) {\n        return this.props.navigate(termRef);\n    }\n\n    renderLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderError(db: DBStateError) {\n        // NB this is rendered raw in the container, which is a flex row.\n        return (\n            <div className=\"Col\">\n                <div style={{ width: '50%', margin: '20px auto 0 auto' }}>\n                    <ErrorView error={db.error} />\n                </div>\n            </div>\n        );\n    }\n\n    renderLoaded(db: OntologyDBStateLoaded) {\n        return (\n            <View\n                targetTerm={db.targetTerm}\n                selectedTerm={db.selectedTerm}\n                selectTerm={this.selectTerm.bind(this)}\n                navigate={this.navigateToTerm.bind(this)}\n                setTitle={this.props.setTitle}\n            />\n        );\n    }\n\n    componentDidMount() {\n        this.db.getTargetTerm(this.props.termRef);\n    }\n\n    componentDidUpdate(previousProps: Props) {\n        // if (previousProps.termRef.id !== this.props.termRef.id ||\n        //     previousProps.termRef.timestamp !== this.props.termRef.timestamp) {\n        //     this.db.getTargetTerm(this.props.termRef);\n        // }\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                // this.db.getTargetTaxon(this.props.taxonID);\n                return this.renderLoading();\n            case DBStatus.LOADING:\n                return this.renderLoading();\n            case DBStatus.ERROR:\n                return this.renderError(db);\n            case DBStatus.LOADED:\n                return this.renderLoaded(db);\n            // if (this.props.taxonID !== db.targetTaxon.id) {\n            //     this.db.getTargetTaxon(this.props.taxonID);\n            //     return this.renderLoaded(db);\n            // } else {\n            //     return this.renderLoaded(db);\n            // }\n        }\n    }\n}\n","import { AppConfig, sendTitle } from '@kbase/ui-components';\nimport { StoreState } from '../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { navigate } from '../../../redux/actions';\nimport { OntologyReference } from '../../../types/ontology';\nimport { ontologyNamespaceToString } from '../lib/model';\n\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps {\n    navigate: (ref: OntologyReference) => void;\n    setTitle: (title: string) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, props: OwnProps): DispatchProps {\n    return {\n        navigate: (ref: OntologyReference) => {\n            const relationEngineID = [\n                'ontology',\n                ontologyNamespaceToString(ref.namespace),\n                ref.id,\n                String(ref.timestamp)\n            ].join('/');\n            dispatch(navigate(relationEngineID) as any);\n        },\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import { RelationEngineID, StoreState } from '../../redux/store';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { navigate } from '../../redux/actions';\nimport { connect } from 'react-redux';\nimport Main from './Main';\nimport { sendTitle } from '@kbase/ui-components';\n\nexport interface OwnProps {\n\n}\n\nexport interface StateProps {\n\n}\n\nexport interface DispatchProps {\n    navigate: (relationEngineID: RelationEngineID) => void;\n    setTitle: (title: string) => void;\n}\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    return {};\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        navigate: (relationEngineId: RelationEngineID) => {\n            dispatch(navigate(relationEngineId) as any);\n        },\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Main);\n","import React from 'react';\nimport { RootState } from '@kbase/ui-components';\nimport {\n    RelationEngineID,\n    Navigation,\n    ViewType,\n    NavigationSome\n} from '../../redux/store';\nimport Taxonomy from '../../landingPages/taxonomy';\nimport OntologyView from '../../landingPages/ontology';\n\nexport interface DispatcherProps {\n    token: string | null;\n    rootState: RootState;\n    // view: RelationEngineView;\n    navigation: Navigation;\n    trigger: number;\n    navigate: (relationEngineID: RelationEngineID) => void;\n}\n\ninterface DispatcherState { }\n\nexport class Dispatcher extends React.Component<DispatcherProps, DispatcherState> {\n    renderUnauthorized() {\n        return <div>Sorry, not authorized. Please log in first.</div>;\n    }\n\n    renderRootState() {\n        switch (this.props.rootState) {\n            case RootState.NONE:\n                return '';\n            case RootState.HOSTED:\n                return '';\n            case RootState.DEVELOP:\n                return '';\n            case RootState.ERROR:\n                return 'error';\n        }\n    }\n\n    renderNavigationNone() {\n        return <div>none</div>;\n    }\n\n    // renderNavigationLoading(view: RelationEngineViewLoading) {\n    //     return <Loading message=\"Loading view...\" />;\n    // }\n\n    // renderNavigationLoaded(view: RelationEngineViewLoaded) {\n    //     // This is currently how we dispatch to the type-specific\n    //     // landing page.\n    //     switch (view.relationEngineNodeType) {\n    //         case RelationEngineNodeType.TAXON:\n    //             return <Taxonomy taxonID={view.relationEngineID} />;\n    //     }\n    // }\n\n    // renderNavigationError(view: RelationEngineViewError) {\n    //     return <Alert type=\"error\" message={`View Error: ${view.message}`} />;\n    // }\n\n    renderNavigationSome(navigation: NavigationSome) {\n        // This is currently how we dispatch to the type-specific\n        // landing page.\n        switch (navigation.type) {\n            case ViewType.TAXONOMY:\n                return <Taxonomy taxonRef={navigation.ref} />;\n            case ViewType.ONTOLOGY:\n                return <OntologyView termRef={navigation.ref} />;\n        }\n    }\n\n    renderNavigation() {\n        switch (this.props.navigation.type) {\n            case ViewType.NONE:\n                return this.renderNavigationNone();\n            default:\n                return this.renderNavigationSome(this.props.navigation);\n            // case ViewStatus.LOADING:\n            //     return this.renderNavigationLoading(this.props.view);\n            // case ViewStatus.LOADED:\n            //     return this.renderNavigationLoaded(this.props.view);\n            // case ViewStatus.ERROR:\n            //     return this.renderNavigationError(this.props.view);\n        }\n    }\n\n    parseHash(hash: string): { path: Array<string>; params: { relationEngineID: string } } {\n        const hashRe = /^#(.*?)\\/(.*)$/;\n        const m = hashRe.exec(hash);\n\n        if (!m) {\n            throw new Error('Invalid path');\n        }\n\n        // Just for now...\n        // TODO: for real\n\n        const [, path, relationEngineID] = m;\n\n        return {\n            path: [path],\n            params: { relationEngineID }\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.rootState === RootState.DEVELOP) {\n            // Navigate on change of the hash\n            window.addEventListener('hashchange', (ev: HashChangeEvent) => {\n                const url = new URL(ev.newURL);\n                const hash = url.hash;\n                if (!hash) {\n                    throw new Error('no hash!');\n                }\n                const {\n                    params: { relationEngineID }\n                } = this.parseHash(hash);\n                this.props.navigate(relationEngineID);\n            });\n\n            // First time here, we also want to navigate based on the\n            // hash, or if empty (the default when a dev session starts)\n            // use some default interesting taxon id.\n            const hash = window.location.hash;\n            if (hash) {\n                const {\n                    params: { relationEngineID }\n                } = this.parseHash(hash);\n                this.props.navigate(relationEngineID);\n            } else {\n                // TODO: remove?\n                this.props.navigate('taxonomy/ncbi_taxonomy/562');\n            }\n        }\n    }\n\n    render() {\n        if (!this.props.token) {\n            return this.renderUnauthorized();\n        }\n        return (\n            <div className=\"Col scrollable\">\n                <div className=\"Row-auto\">{this.renderRootState()}</div>\n                <div className=\"Row  scrollable\">{this.renderNavigation()}</div>\n            </div>\n        );\n    }\n}\n","import { StoreState, RelationEngineID, Navigation } from '../../redux/store';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { connect } from 'react-redux';\nimport { Dispatcher } from './Dispatcher';\nimport { RootState } from '@kbase/ui-components';\nimport { navigate } from '../../redux/actions';\n\ninterface OwnProps { }\n\ninterface StateProps {\n    token: string | null;\n    rootState: RootState;\n    // view: RelationEngineView;\n    // viewState: ViewStatus;\n    navigation: Navigation;\n    trigger: number;\n}\n\ninterface DispatchProps {\n    navigate: (relationEngineID: RelationEngineID) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        root: { state: rootState },\n        navigation,\n        trigger\n    } = state;\n\n    // Auth integration.\n    let token;\n    if (!userAuthorization) {\n        token = null;\n    } else {\n        token = userAuthorization.token;\n    }\n\n    return { token, rootState, navigation, trigger };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        navigate: (relationEngineID: RelationEngineID) => {\n            dispatch(navigate(relationEngineID) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Dispatcher);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createReduxStore } from './redux/store';\nimport { AppBase, AuthGate } from '@kbase/ui-components';\nimport './App.css';\nimport Dispatcher from './components/dispatcher';\nimport { Unsubscribe } from 'redux';\nimport { navigate } from './redux/actions';\n\nconst store = createReduxStore();\n\ninterface AppProps { }\n\ninterface AppState { }\n\nexport default class App<AppProps, AppState> extends React.Component {\n    storeUnsubscribe: Unsubscribe | null;\n    constructor(props: AppProps) {\n        super(props);\n        this.storeUnsubscribe = null;\n    }\n    componentDidMount() {\n        let last: {\n            view: string | null;\n            params: { [key: string]: string };\n        } = {\n            view: null,\n            params: {}\n        };\n        this.storeUnsubscribe = store.subscribe(() => {\n            const state = store.getState();\n            if (!state) {\n                return;\n            }\n            const {\n                app: {\n                    runtime: { navigation }\n                },\n                auth: { userAuthorization }\n            } = state;\n\n            // This is a bit of a cheat.\n            if (!userAuthorization) {\n                return;\n            }\n\n            const view = navigation.view;\n            const params = navigation.params as { [key: string]: string };\n\n            if (\n                view !== last.view ||\n                last.params === null ||\n                Object.keys(params).some((key) => {\n                    return params[key] !== last.params[key];\n                })\n            ) {\n                last.params = params;\n                last.view = view;\n                // TODO: store may change but there is not navigation yet.\n                if (params['relationEngineID']) {\n                    store.dispatch(navigate(params['relationEngineID']) as any);\n                }\n            }\n        });\n    }\n    componentWillUnmount() {\n        if (this.storeUnsubscribe) {\n            this.storeUnsubscribe();\n        }\n    }\n    render() {\n        return (\n            <Provider store={store}>\n                <AppBase>\n                    <AuthGate required={true}>\n                        <div className=\"App Col scrollable\">\n                            <Dispatcher />\n                        </div>\n                    </AuthGate>\n                </AppBase>\n            </Provider>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}