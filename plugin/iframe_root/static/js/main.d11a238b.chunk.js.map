{"version":3,"sources":["redux/actions.ts","redux/reducers.ts","redux/store.ts","components/landingPages/taxonomy/lib/DB.ts","components/Loading.tsx","components/landingPages/taxonomy/redux/store.ts","components/landingPages/taxonomy/lib/TaxonAPIClient.ts","components/landingPages/taxonomy/lib/model.ts","components/landingPages/taxonomy/main/TaxonDB.ts","components/landingPages/taxonomy/SourceInfo.tsx","components/landingPages/taxonomy/TaxonItem.tsx","components/landingPages/taxonomy/taxonChildren/TaxonChildrenDB.ts","components/landingPages/taxonomy/TaxonList.tsx","components/landingPages/taxonomy/taxonChildren/TaxonChildren.tsx","components/landingPages/taxonomy/taxonChildren/data.tsx","components/landingPages/taxonomy/taxonChildren/index.ts","components/landingPages/taxonomy/lineage/LineageDB.ts","components/landingPages/taxonomy/lineage/Lineage.tsx","components/landingPages/taxonomy/lineage/data.tsx","components/landingPages/taxonomy/lineage/index.ts","components/landingPages/taxonomy/LineageNavigator.tsx","components/landingPages/taxonomy/TaxonSummary.tsx","components/landingPages/taxonomy/taxonInfo/TaxonDetailNCBI.tsx","components/landingPages/taxonomy/taxonInfo/TaxonDetail.tsx","components/landingPages/taxonomy/lib/props.ts","components/Wikipedia.tsx","components/landingPages/taxonomy/lib/Wikipedia.ts","components/landingPages/taxonomy/taxonInfo/TaxonDescription.tsx","components/landingPages/taxonomy/linkedData/LinkedDataDB.ts","components/landingPages/taxonomy/linkedData/LinkedData.tsx","components/landingPages/taxonomy/linkedData/data.tsx","components/landingPages/taxonomy/linkedData/index.ts","components/landingPages/taxonomy/taxonInfo/TaxonInfo.tsx","components/landingPages/taxonomy/main/Taxonomy.tsx","components/landingPages/taxonomy/main/data.tsx","components/landingPages/taxonomy/main/index.ts","components/landingPages/taxonomy/index.ts","components/dispatcher/Dispatcher.tsx","components/dispatcher/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppActions","navigate","relationEngineID","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","getState","_relationEngineID$spl","_relationEngineID$spl2","collection","id","wrap","_context","prev","next","type","NAVIGATE_START","split","slicedToArray","navigation","ViewType","TAXONOMY","join","NAVIGATE_SUCCESS","stop","_x","_x2","apply","this","arguments","navigateSuccess","state","action","_objectSpread","trigger","Date","now","RelationEngineNodeType","ViewStatus","reducer","baseState","baseReducer","makeInitialStoreState","store_objectSpread","makeBaseStoreState","NONE","DBStatus","Loading","react_default","createElement","className","spin","size","props","message","React","Component","TaxonomySource","LoadingStatus","DB","classCallCheck","db","onUpdate","data","initialData","updateFun","forceComponentUpdate","TaxonomyAPIClient","taxonID","callFunc","result","offset","limit","searchTerm","search_text","taxon_id","DynamicServiceClient","module","TaxonomyModel","token","url","taxonomyClient","TaxonAPIClient","createClass","key","value","_getLineage","taxons","getLineage","sent","results","map","taxonResult","isBiological","scientific_name","NCBI","_id","name","rank","ncbiID","NCBI_taxon_id","geneticCode","parseInt","gencode","aliases","_ref2","category","abrupt","_getChildren","_callee2","options","taxa","_context2","getChildren","_ref3","total_count","_x3","_getTaxon","_callee3","taxon","_context3","getTaxon","count","Error","_ref4","_x4","_getLinkedObjects","_callee4","_context4","getAssociatedWorkspaceObjects","console","log","linkedAt","objectID","workspaceID","version","_x5","_x6","TaxonDB","_this","possibleConstructorReturn","getPrototypeOf","call","set","TaxonDB_objectSpread","status","LOADING","client","config","services","ServiceWizard","LOADED","targetTaxon","selectedTaxon","error","t0","ERROR","SourceInfo","_React$Component","inherits","src","style","height","alt","width","href","target","TaxonItem","selectTaxonID","fixedID","replace","hash","concat","window","parent","location","classNames","isActive","push","tooltipTitle","borderBottom","tooltip","title","placement","onClick","clickTaxon","bind","onDoubleClick","clickNavigateToTaxon","serviceWizardURL","page","pageSize","TaxonChildrenDB_objectSpread","totalCount","total","TaxonList","navigateToTaxonID","selectedTaxonID","TaxonItem_TaxonItem","selectTaxon","navigateToTaxon","empty","description","image","PRESENTED_IMAGE_SIMPLE","length","renderNoItems","renderItemsPlain","TaxonChildren","fetchChildren","icon","Intl","NumberFormat","useGrouping","format","currentItem","lastItem","term","disabled","marginBottom","input","Search","placeholder","onSearch","doSearch","Fragment","TaxonList_TaxonList","totalItems","maxItems","es_alert","renderTaxaNone","renderTaxaLoading","renderTaxaLoaded","renderTaxaError","pagination","showLessItems","hideOnSinglePage","defaultPageSize","current","onChange","changePage","renderTitle","renderSearch","renderPagination","renderTaxa","renderChildren","Data","forceUpdate","TaxonChildren_TaxonChildren","get","connect","userAuthorization","auth","app","DataComponent","LineageDB","LineageDB_objectSpread","lineage","Lineage","Lineage_Lineage","renderLoading","renderError","renderLoaded","LineageNavigator","taxonId","param","taxonomy_lineage","selectedId","taxonomy_taxonChildren","renderLineage","renderTargetTaxon","TaxonSummary","nameStyle","fontStyle","geneticCodesMap","geneticCodes","Array","ensureGeneticCodes","reduce","label","Map","TaxonDetailNCBI","stringSorter","b","fixedA","fixedB","localeCompare","table","dataSource","scroll","y","rowKey","bordered","Column","dataIndex","defaultSortOrder","sorter","rel","renderAliases","renderTaxonDetail","TaxonDetail","TaxonDetailNCBI_TaxonDetailNCBI","getProp","obj","propPath","defaultValue","TypeError","temp","i","undefined","AsyncComponentLoadingState","NotFound","WIKIPEDIA_API_URL","Wikipedia","proposedTerm","chars","validChar","filter","char","exec","lookupTerm","scrubTerm","getWikipediaInfo","then","imageUrl","pageUrl","introText","pageId","matchingTerms","exactMatch","getPage","wikiResponse","Promise","all","_this2","getImage","parse","pageid","getPageInfo","pageInfo","terms","resolve","reject","fetchPage","apiUrl","URL","query","searchParams","fetch","toString","method","headers","accept","json","code","pop","ex","catch","err","apiURL","String","wikipediaClient","canceled","WikipediaClient","wikipediaInfo","content","marked","overflow","dangerouslySetInnerHTML","__html","color","fontSize","textAlign","display","flexDirection","flex","renderMatch","alignSelf","marginLeft","renderWikipediaLogoCredit","paddingRight","marginRight","overflowY","renderArticle","renderImage","setState","findTerm","updateInfo","Loading_Loading","renderWikipediaInfo","renderNone","TaxonDescription","components_Wikipedia_Wikipedia","renderTaxonDescription","notBiological","LinkedDataDB","LinkedDataDB_objectSpread","getLinkedObjects","linkedObjects","LinkedData","fetchLinkedObjects","LinkedData_LinkedData","TaxonInfo","tabs","defaultActiveKey","animated","TabPane","tab","forceRender","TaxonDetail_TaxonDetail","TaxonDescription_TaxonDescription","linkedData","Taxonomy","TaxonInfo_TaxonInfo","setTitle","row","col","span","TaxonSummary_TaxonSummary","SourceInfo_SourceInfo","LineageNavigator_LineageNavigator","renderTaxonInfo","getSelectedTaxon","Taxonomy_Taxonomy","getTargetTaxon","sendTitle","ownProps","relationEngineId","Dispatcher","rootState","RootState","HOSTED","DEVELOP","view","relationEngineNodeType","TAXON","taxonomy","renderNavigationNone","renderNavigationSome","m","_m","path","params","addEventListener","ev","newURL","parseHash","renderRootState","renderNavigation","renderUnauthorized","root","store","createStore","compose","applyMiddleware","thunk","App","storeSubscription","last","subscribe","runtime","keys","some","es","lib","dispatcher","Boolean","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d11a238b.chunk.js","sourcesContent":["import { Action } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { StoreState, RelationEngineID, NavigationSome, ViewType } from './store';\n// import * as uiLib from '@kbase/ui-lib';\n\nexport enum AppActions {\n    NAVIGATE = 'kbase-ui-plugin-landing-pages/navigate',\n    NAVIGATE_START = 'kbase-ui-plugin-landing-pages/navigate/start',\n    NAVIGATE_SUCCESS = 'kbase-ui-plugin-landing-pages/navigate/success',\n    NAVIGATE_ERROR = 'kbase-ui-plugin-landing-pages/navigate/error'\n}\n\nexport interface Navigate extends Action<AppActions.NAVIGATE> {\n    type: AppActions.NAVIGATE;\n    relationEngineID: RelationEngineID;\n}\n\nexport interface NavigateStart extends Action<AppActions.NAVIGATE_START> {\n    type: AppActions.NAVIGATE_START;\n}\n\nexport interface NavigateSuccess extends Action<AppActions.NAVIGATE_SUCCESS> {\n    type: AppActions.NAVIGATE_SUCCESS;\n    navigation: NavigationSome;\n    // relationEngineID: RelationEngineID;\n    // relationEngineNodeType: RelationEngineNodeType;\n    // viewType: ViewType;\n    // view: LandingPageView;\n}\n\nexport interface NavigateError extends Action<AppActions.NAVIGATE_ERROR> {\n    type: AppActions.NAVIGATE_ERROR;\n    message: string;\n}\n\nexport function navigateStart(): NavigateStart {\n    return {\n        type: AppActions.NAVIGATE_START\n    };\n}\n\nexport function navigateSuccess(\n    navigation: NavigationSome\n    // viewType: ViewType,\n    // relationEngineID: RelationEngineID\n    // relationEngineNodeType: RelationEngineNodeType,\n\n    // view: LandingPageView\n): NavigateSuccess {\n    return {\n        type: AppActions.NAVIGATE_SUCCESS,\n        navigation\n        // relationEngineID,\n        // relationEngineNodeType,\n        // viewType\n        // view\n    };\n}\n\nexport function navigate(relationEngineID: RelationEngineID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(navigateStart());\n\n        // TODO: when there is an api call \"get_node_info\" we can replace the\n        // node type determination code below.\n\n        // window.location.hash;\n\n        // We know, for now, that the node id is <collection/id>\n        const [collection, id] = relationEngineID.split(':');\n        // console.log('in navigate...', relationEngineID);\n        switch (collection) {\n            case 'ncbi_taxon':\n                // const view: TaxonomyView = {\n                //     status: ViewStatus.NONE\n                // };\n                dispatch(navigateSuccess({ type: ViewType.TAXONOMY, relationEngineID: [collection, id].join('/') }));\n            // dispatch(uiLib.navigate({ view: 'taxonomy', params: { relationEngineID } }));\n        }\n    };\n}\n","import { Action, Reducer } from 'redux';\nimport { baseReducer } from '@kbase/ui-lib';\nimport { BaseStoreState } from '@kbase/ui-lib';\nimport { StoreState } from './store';\nimport { AppActions, NavigateSuccess } from './actions';\n\nfunction navigateSuccess(state: StoreState, action: NavigateSuccess): StoreState {\n    // console.log('sick of the success?', action);\n    return {\n        ...state,\n        // view: {\n        //     status: ViewStatus.LOADED,\n        //     relationEngineID: action.relationEngineID,\n        //     relationEngineNodeType: action.relationEngineNodeType,\n        //     viewType: action.viewType,\n        //     currentView: action.view\n        // }\n        navigation: action.navigation,\n        trigger: Date.now()\n    };\n}\n\n// function navigateStart(state: StoreState, action: NavigateStart): StoreState {\n//     return {\n//         ...state,\n//         view: {\n//             status: ViewStatus.LOADING\n//         }\n//     };\n// }\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    const baseState = baseReducer(state as BaseStoreState, action);\n    if (baseState) {\n        return baseState as StoreState;\n    }\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        // case AppActions.NAVIGATE_START:\n        //     return navigateStart(state, action as NavigateStart);\n        case AppActions.NAVIGATE_SUCCESS:\n            return navigateSuccess(state, action as NavigateSuccess);\n    }\n    return state;\n};\n\nexport default reducer;\n","import { BaseStoreState, makeBaseStoreState } from '@kbase/ui-lib';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducers';\n\nimport { TaxonomyStoreState } from '../components/landingPages/taxonomy/redux/store';\n\nexport enum ViewType {\n    NONE,\n    TAXONOMY,\n    ONTOLOGY\n}\n\nexport type RelationEngineID = string;\nexport enum RelationEngineNodeType {\n    TAXON,\n    ONTOLOGY_TERM\n}\n\nexport enum ViewStatus {\n    NONE,\n    LOADING,\n    LOADED,\n    ERROR\n}\n\nexport interface RelationEngineViewBase {\n    status: ViewStatus;\n}\n\nexport interface RelationEngineViewNone {\n    status: ViewStatus.NONE;\n}\n\nexport interface RelationEngineViewLoading {\n    status: ViewStatus.LOADING;\n}\n\nexport interface RelationEngineViewLoaded {\n    status: ViewStatus.LOADED;\n    relationEngineID: RelationEngineID;\n    relationEngineNodeType: RelationEngineNodeType;\n    viewType: ViewType;\n    currentView: LandingPageView;\n}\n\nexport interface RelationEngineViewError {\n    status: ViewStatus.ERROR;\n    message: string;\n}\n\nexport type RelationEngineView =\n    | RelationEngineViewNone\n    | RelationEngineViewLoading\n    | RelationEngineViewLoaded\n    | RelationEngineViewError;\n\nexport interface LandingPageStoreState {}\n\n// VIEW STATE\n\nexport interface ViewStateNone<T> {\n    status: ViewStatus.NONE;\n}\n\nexport interface ViewStateLoading<T> {\n    status: ViewStatus.LOADING;\n    type: T;\n}\n\nexport interface ViewStateError<T> {\n    status: ViewStatus.ERROR;\n    error: string;\n    type: T;\n}\n\nexport interface ViewStateLoaded<T, S> {\n    status: ViewStatus.LOADED;\n    type: T;\n    state: S;\n}\nexport type ViewState<T, S> = ViewStateNone<T> | ViewStateLoading<T> | ViewStateLoaded<T, S> | ViewStateError<T>;\n\nexport type TaxonomyView = ViewState<ViewType.TAXONOMY, TaxonomyStoreState>;\n\nexport interface NavigationBase {\n    type: ViewType;\n    relationEngineID: RelationEngineID;\n}\n\nexport interface NavigationNone {\n    type: ViewType.NONE;\n}\n\nexport interface NavigationTaxonomy {\n    type: ViewType.TAXONOMY;\n    relationEngineID: RelationEngineID;\n}\n\nexport type NavigationSome = NavigationTaxonomy;\nexport type Navigation = NavigationNone | NavigationSome;\n\n// export interface ViewState<T, S> {\n//     type: T;\n//     state: S;\n// }\n\nexport type LandingPageView = TaxonomyView;\n\n// STORE STATE type definition\nexport interface StoreState extends BaseStoreState {\n    // viewer: TaxonView | null;\n    // view: RelationEngineView;\n    navigation: Navigation;\n    trigger: number;\n}\n\n// Store Construction\nexport function makeInitialStoreState(): StoreState {\n    const baseStoreState = makeBaseStoreState();\n    return {\n        ...baseStoreState,\n        // viewer: null,\n        navigation: {\n            type: ViewType.NONE\n        },\n        trigger: 0\n    };\n}\n\nexport function createReduxStore() {\n    return createStore(reducer, makeInitialStoreState(), compose(applyMiddleware(thunk)));\n}\n","export interface DBProps<T> {\n    onUpdate: () => void;\n    initialData: T;\n}\n\nexport interface TheDB<T> {\n    data: T;\n}\n\nexport enum DBStatus {\n    NONE,\n    LOADING,\n    LOADED,\n    ERROR\n}\n\nexport interface DBStateNone {\n    status: DBStatus.NONE;\n}\n\nexport interface DBStateLoading {\n    status: DBStatus.LOADING;\n}\n\nexport interface DBStateLoaded {\n    status: DBStatus.LOADED;\n}\n\nexport interface DBStateError {\n    status: DBStatus.ERROR;\n    message: string;\n}\n\nexport default class DB<T> {\n    db: TheDB<T>;\n    onUpdate: () => void;\n    constructor(props: DBProps<T>) {\n        this.onUpdate = props.onUpdate;\n        this.db = {\n            data: props.initialData\n        };\n    }\n\n    forceComponentUpdate() {\n        this.onUpdate();\n    }\n\n    set(updateFun: (state: T) => T) {\n        this.db.data = updateFun(this.db.data);\n        this.forceComponentUpdate();\n    }\n\n    get(): T {\n        return this.db.data;\n    }\n}\n","import React from 'react';\nimport { Spin } from 'antd';\nimport './Loading.css';\n\nexport interface Props {\n    message: string;\n}\n\ninterface State {}\n\nexport default class Loading extends React.Component<Props, State> {\n    render() {\n        return (\n            <div className=\"Loading-box\">\n                <Spin size=\"large\" />\n                <br />\n                {this.props.message}\n            </div>\n        );\n    }\n}\n","export type TaxonID = string;\n\n/**\n *\n */\nexport interface TaxonBase {\n    name: string;\n    id: string;\n    rank: string;\n    isBiological: boolean;\n}\n\nexport enum TaxonomySource {\n    NCBI,\n    GTDB\n}\n\nexport interface TaxonAlias {\n    category: string;\n    name: string;\n}\n\nexport interface NCBITaxon extends TaxonBase {\n    type: TaxonomySource.NCBI;\n    ncbiID: number;\n    geneticCode: number;\n    aliases: Array<TaxonAlias>;\n}\n\nexport interface GTDBTaxon extends TaxonBase {\n    type: TaxonomySource.GTDB;\n}\n\nexport type Taxon = NCBITaxon | GTDBTaxon;\n\nexport enum LoadingStatus {\n    NONE,\n    LOADING,\n    LOADED,\n    ERROR\n}\n\nexport interface NoneState {\n    status: LoadingStatus.NONE;\n}\n\nexport interface LoadingState {\n    status: LoadingStatus.LOADING;\n}\n\nexport interface ErrorState {\n    status: LoadingStatus.ERROR;\n    message: string;\n}\n\nexport interface LoadedState {\n    status: LoadingStatus.LOADED;\n}\n\nexport interface MainLoadedState extends LoadedState {\n    selectedTaxonID: TaxonID;\n    selectedTaxon: Taxon;\n    targetTaxon: Taxon;\n}\n\nexport type MainState = NoneState | LoadingState | ErrorState | MainLoadedState;\n\ntype State = NoneState | LoadedState | LoadingState | ErrorState;\n\nexport interface TaxonomyStoreState {\n    taxonomy: {\n        main: MainState;\n    };\n}\n\n// export function makeInitialStoreState(): TaxonomyStoreState {\n//     return {\n//         taxonomy: {\n//             main: {\n//                 state: {\n//                     status: LoadingStatus.NONE\n//                 }\n//             }\n//         }\n//     };\n// }\n\n// export function createReduxStore() {\n//     return createStore(reducer, makeInitialStoreState(), compose(applyMiddleware(thunk)));\n// }\n","import { DynamicServiceClient, DynamicServiceClientParams } from '@kbase/ui-lib';\n\ninterface TaxonomyAPIParams extends DynamicServiceClientParams {}\n\ntype TaxonID = string;\n\ninterface GetAncestorsParams {\n    id: TaxonID;\n}\n\ninterface GetDescendentsParams {\n    id: TaxonID;\n}\n\ninterface GetTaxonParams {\n    id: TaxonID;\n}\n\n// interface GetTaxonResultSuccess {\n//     count: true;\n//     taxon: Taxon;\n// }\n\n// interface GetTaxonResultNotFound {\n//     found: false;\n// }\n\n// type GetTaxonResult = GetTaxonResultSuccess | GetTaxonResultNotFound;\n\ninterface TaxonAlias {\n    canonical: Array<string>;\n    category: string;\n    name: string;\n}\n\ninterface TaxonResult {\n    NCBI_taxon_id: number;\n    _id: string;\n    _key: string;\n    _rev: string;\n    aliases: Array<TaxonAlias>;\n    canonical_scientific_name: Array<string>;\n    gencode: string;\n    rank: string;\n    scientific_name: string;\n}\n\ninterface GetTaxonResult {\n    count: number;\n    cursor_id: number | null;\n    has_more: false;\n    stats: {\n        executionTime: number;\n        filtered: number;\n        httpRequests: number;\n        scannedFull: number;\n        scannedIndex: number;\n        writesExecuted: number;\n        writesIgnored: number;\n    };\n    results: Array<TaxonResult>;\n}\n\ninterface GetLineageResult {\n    stats: {\n        executionTime: number;\n        filtered: number;\n        httpRequests: number;\n        scannedFull: number;\n        scannedIndex: number;\n        writesExecuted: number;\n        writesIgnored: number;\n    };\n    results: Array<TaxonResult>;\n}\n\ninterface GetChildrenResult {\n    stats: {\n        executionTime: number;\n        filtered: number;\n        httpRequests: number;\n        scannedFull: number;\n        scannedIndex: number;\n        writesExecuted: number;\n        writesIgnored: number;\n    };\n    results: Array<TaxonResult>;\n    total_count: number;\n}\nexport interface Stats {\n    executionTime: number;\n    filtered: number;\n    httpRequests: number;\n    scannedFull: number;\n    scannedIndex: number;\n    writesExecuted: number;\n    writesIgnored: number;\n}\nexport interface GetAssociatedWorkspaceObjectsResultResult {\n    edge: {\n        _id: string;\n        assigned_by: string;\n        updated_at: number;\n    };\n    taxon: {\n        _id: string;\n        rank: string;\n        scientific_name: string;\n        updated_at: number;\n    };\n}\n\nexport interface GetAssociatedWorkspaceObjectsResult {\n    results: Array<GetAssociatedWorkspaceObjectsResultResult>;\n    stats: Stats;\n}\n\nexport default class TaxonomyAPIClient extends DynamicServiceClient {\n    static module: string = 'taxonomy_re_api';\n\n    async getLineage(taxonID: TaxonID): Promise<GetLineageResult> {\n        const [result] = await this.callFunc<[GetLineageResult]>('get_lineage', [\n            {\n                id: taxonID\n            }\n        ]);\n        return result;\n    }\n\n    async getChildren({\n        taxonID,\n        offset,\n        limit,\n        searchTerm\n    }: {\n        taxonID: TaxonID;\n        offset: number;\n        limit: number;\n        searchTerm: string;\n    }): Promise<GetChildrenResult> {\n        const [result] = await this.callFunc<[GetChildrenResult]>('get_children', [\n            {\n                id: taxonID,\n                offset,\n                limit,\n                search_text: searchTerm\n            }\n        ]);\n        return result;\n    }\n\n    async getTaxon(taxonID: TaxonID): Promise<GetTaxonResult> {\n        const [result] = await this.callFunc<[GetTaxonResult]>('get_taxon', [\n            {\n                id: taxonID\n            }\n        ]);\n        return result;\n    }\n\n    async getAssociatedWorkspaceObjects(\n        taxon_id: TaxonID,\n        offset: number,\n        limit: number\n    ): Promise<GetAssociatedWorkspaceObjectsResult> {\n        const [result] = await this.callFunc<[GetAssociatedWorkspaceObjectsResult]>('get_associated_ws_objects', [\n            {\n                taxon_id,\n                limit,\n                offset\n            }\n        ]);\n        return result;\n    }\n}\n","import { TaxonID, Taxon, TaxonomySource, NCBITaxon } from '../redux/store';\nimport TaxonAPIClient from './TaxonAPIClient';\n\n// const INITIAL_BATCH_SIZE = 100;\n// const BATCH_SIZE = 1000;\n// const TOTAL_LIMIT = 10000;\n// const PARALLELISM = 2;\n\nexport interface GetChildrenOptions {\n    offset: number;\n    limit: number;\n    searchTerm: string;\n}\n\nexport interface LinkedObject {\n    linkedAt: number;\n    workspaceID: number;\n    objectID: number;\n    version: number;\n}\n\nexport interface GetLinkedObjectsOptions {\n    offset: number;\n    limit: number;\n}\n\nexport class TaxonomyModel {\n    taxonomyClient: TaxonAPIClient;\n    constructor({ token, url }: { token: string; url: string }) {\n        this.taxonomyClient = new TaxonAPIClient({ token, url });\n    }\n\n    async getLineage(taxonID: TaxonID): Promise<Array<Taxon>> {\n        const result = await this.taxonomyClient.getLineage(taxonID);\n        // TODO: should be conditional based on the source of the taxonomy??\n        const taxons: Array<NCBITaxon> = result.results.map((taxonResult) => {\n            let isBiological: boolean;\n            if (taxonResult.scientific_name === 'root' || taxonResult.scientific_name === 'cellular organisms') {\n                isBiological = false;\n            } else {\n                isBiological = true;\n            }\n            return {\n                type: TaxonomySource.NCBI,\n                id: taxonResult._id,\n                name: taxonResult.scientific_name,\n                rank: taxonResult.rank,\n                ncbiID: taxonResult.NCBI_taxon_id,\n                geneticCode: parseInt(taxonResult.gencode),\n                aliases: taxonResult.aliases.map(({ name, category }) => {\n                    return {\n                        name,\n                        category\n                    };\n                }),\n                isBiological\n            };\n        });\n        return taxons;\n    }\n\n    async getChildren(taxonID: TaxonID, options: GetChildrenOptions): Promise<[Array<Taxon>, number]> {\n        const result = await this.taxonomyClient.getChildren({\n            taxonID,\n            offset: options.offset,\n            limit: options.limit,\n            searchTerm: options.searchTerm\n        });\n\n        const taxa = result.results.map((taxonResult) => {\n            let isBiological: boolean;\n            if (taxonResult.scientific_name === 'root' || taxonResult.scientific_name === 'cellular organisms') {\n                isBiological = false;\n            } else {\n                isBiological = true;\n            }\n            return {\n                type: TaxonomySource.NCBI,\n                id: taxonResult._id,\n                name: taxonResult.scientific_name,\n                rank: taxonResult.rank,\n                ncbiID: taxonResult.NCBI_taxon_id,\n                geneticCode: parseInt(taxonResult.gencode),\n                aliases: taxonResult.aliases.map(({ name, category }) => {\n                    return {\n                        name,\n                        category\n                    };\n                }),\n                isBiological\n            };\n        });\n        return [taxa, result.total_count];\n    }\n\n    // async getChildrenx(taxonID: TaxonID, options: GetChildrenOptions): Promise<[Array<Taxon>, number, number]> {\n    //     // Loop over results until done!\n    //     // Get the first batch. In the majority of cases, this will be it.\n\n    //     const getBatch = async (batch: number, batchSize: number): Promise<[Array<Taxon>, number]> => {\n    //         const offset = batch * batchSize;\n    //         const result = await this.taxonomyClient.getChildren({\n    //             taxonID,\n    //             offset,\n    //             limit: batchSize\n    //         });\n\n    //         const taxa = result.results.map((taxonResult) => {\n    //             let isBiological: boolean;\n    //             if (taxonResult.scientific_name === 'root' || taxonResult.scientific_name === 'cellular organisms') {\n    //                 isBiological = false;\n    //             } else {\n    //                 isBiological = true;\n    //             }\n    //             return {\n    //                 type: TaxonomySource.NCBI,\n    //                 id: taxonResult._id,\n    //                 name: taxonResult.scientific_name,\n    //                 rank: taxonResult.rank,\n    //                 ncbiID: taxonResult.NCBI_taxon_id,\n    //                 geneticCode: parseInt(taxonResult.gencode),\n    //                 aliases: taxonResult.aliases.map(({ name, category }) => {\n    //                     return {\n    //                         name,\n    //                         category\n    //                     };\n    //                 }),\n    //                 isBiological\n    //             };\n    //         });\n    //         return [taxa, result.total_count];\n    //     };\n\n    //     const [taxa, totalCount] = await getBatch(0, INITIAL_BATCH_SIZE);\n\n    //     if (totalCount <= taxa.length) {\n    //         return [taxa, totalCount, totalCount];\n    //     }\n\n    //     // Here we cap the total results requested to TOTAL_LIMIT\n    //     let totalLimit = Math.min(totalCount, TOTAL_LIMIT);\n\n    //     // How many batches do we need to fetch?\n    //     const totalBatchCount = Math.ceil((totalLimit - INITIAL_BATCH_SIZE) / BATCH_SIZE);\n\n    //     // In order to avoid overwhelming the service, we need to limit the\n    //     // # of concurrent requests.\n    //     const iterations = Math.ceil(totalBatchCount / PARALLELISM);\n\n    //     console.log('BATCHES', totalBatchCount, iterations);\n\n    //     let result = taxa;\n\n    //     console.log('taxa', taxa);\n\n    //     for (let iter = 0; iter < iterations; iter += 1) {\n    //         const pendingBatches: Array<Promise<[Array<Taxon>, number]>> = [];\n\n    //         const batchCount = Math.min(PARALLELISM, totalBatchCount - iter * PARALLELISM);\n\n    //         console.log(`iter ${iter}`);\n\n    //         for (let batch = 0; batch < batchCount; batch += 1) {\n    //             const offset = iter * PARALLELISM + batch;\n    //             const batchSize = Math.min(BATCH_SIZE, totalLimit - offset * BATCH_SIZE);\n    //             console.log('BATCH SIZE', batchSize, iter, batch, totalLimit - offset * BATCH_SIZE);\n    //             pendingBatches.push(getBatch(offset, batchSize));\n    //             // const [nextResult] = await getBatch(i);\n    //             // console.log('adding another batch', nextResult);\n    //             // result = result.concat(nextResult);\n    //         }\n\n    //         const batches = await Promise.all(pendingBatches);\n\n    //         result = result.concat.apply(\n    //             result,\n    //             batches.map(([taxa, count]) => {\n    //                 return taxa;\n    //             })\n    //         );\n    //     }\n\n    //     return [result, totalCount, totalLimit];\n    // }\n\n    async getTaxon(taxonID: TaxonID): Promise<Taxon> {\n        const result = await this.taxonomyClient.getTaxon(taxonID);\n\n        if (!result.count) {\n            throw new Error('Taxon not found');\n        }\n        const taxonResult = result.results[0];\n        let isBiological: boolean;\n        if (taxonResult.scientific_name === 'root' || taxonResult.scientific_name === 'cellular organisms') {\n            isBiological = false;\n        } else {\n            isBiological = true;\n        }\n        const taxon: Taxon = {\n            type: TaxonomySource.NCBI,\n            id: taxonResult._id,\n            name: taxonResult.scientific_name,\n            rank: taxonResult.rank,\n            ncbiID: taxonResult.NCBI_taxon_id,\n            geneticCode: parseInt(taxonResult.gencode),\n            aliases: taxonResult.aliases.map(({ name, category }) => {\n                return {\n                    name,\n                    category\n                };\n            }),\n            isBiological\n        };\n        return taxon;\n    }\n\n    async getLinkedObjects(taxonID: TaxonID, options: GetLinkedObjectsOptions): Promise<Array<LinkedObject>> {\n        const result = await this.taxonomyClient.getAssociatedWorkspaceObjects(taxonID, options.offset, options.limit);\n\n        console.log('LINKED DATA', result, options);\n\n        return [\n            {\n                linkedAt: 0,\n                objectID: 0,\n                workspaceID: 0,\n                version: 0\n            }\n        ];\n    }\n}\n","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../lib/DB';\nimport { AppConfig } from '@kbase/ui-lib/lib/redux/integration/store';\nimport { Taxon, TaxonID } from '../redux/store';\nimport { TaxonomyModel } from '../lib/model';\n\nexport type TaxonDBStateNone = DBStateNone;\nexport type TaxonDBStateLoading = DBStateLoading;\nexport type TaxonDBStateError = DBStateError;\n\nexport interface TaxonDBStateLoaded extends DBStateLoaded {\n    targetTaxon: Taxon;\n    selectedTaxon: Taxon;\n}\n\nexport type TaxonDBState = TaxonDBStateNone | TaxonDBStateLoading | TaxonDBStateLoaded | TaxonDBStateError;\n\nexport interface TaxonDBProps extends DBProps<TaxonDBState> {\n    token: string;\n    config: AppConfig;\n}\n\n// TODO: make props part of generic\nexport default class TaxonDB extends DB<TaxonDBState> {\n    props: TaxonDBProps;\n    constructor(props: TaxonDBProps) {\n        super(props);\n        this.props = props;\n    }\n    async getTargetTaxon(taxonID: TaxonID) {\n        try {\n            this.set((state: TaxonDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADING\n                };\n            });\n\n            const client = new TaxonomyModel({\n                token: this.props.token,\n                url: this.props.config.services.ServiceWizard.url\n            });\n\n            const taxon = await client.getTaxon(taxonID);\n            this.set((state: TaxonDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    targetTaxon: taxon,\n                    selectedTaxon: taxon\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: TaxonDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    message: ex.message\n                };\n            });\n        }\n    }\n\n    async getSelectedTaxon(taxonID: TaxonID) {\n        try {\n            // this.set((state: TaxonDBState) => {\n            //     return {\n            //         ...state,\n            //         status: DBStatus.LOADING\n            //     };\n            // });\n\n            const client = new TaxonomyModel({\n                token: this.props.token,\n                url: this.props.config.services.ServiceWizard.url\n            });\n\n            const taxon = await client.getTaxon(taxonID);\n            this.set((state: TaxonDBState) => {\n                return {\n                    ...state,\n                    selectedTaxon: taxon\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: TaxonDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    message: ex.message\n                };\n            });\n        }\n    }\n}\n","import React from 'react';\nimport './SourceInfo.css';\n\nexport interface SourceInfoProps {}\n\ninterface SourceInfoState {}\n\nexport class SourceInfo extends React.Component<SourceInfoProps, SourceInfoState> {\n    render() {\n        return (\n            <div className=\"Row\">\n                <div className=\"Col-auto\">\n                    <img src=\"images/ncbi-logo.jpg\" style={{ height: '64px' }} alt=\"NCBI Logo\" />\n                </div>\n                <div className=\"Col\">\n                    <div className=\"InfoTable\">\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                                Source\n                            </div>\n                            <div className=\"InfoTable-dataCol\">\n                                <a href=\"https://www.ncbi.nlm.nih.gov/guide/taxonomy/\" target=\"_blank\">\n                                    NCBI\n                                </a>\n                            </div>\n                        </div>\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                                Version\n                            </div>\n                            <div className=\"InfoTable-dataCol\">SOME VERSION</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Taxon } from './redux/store';\nimport { Tooltip } from 'antd';\nimport './TaxonItem.css';\n\nexport interface Props {\n    taxon: Taxon;\n    isActive: boolean;\n    selectTaxonID: (taxonID: string) => void;\n    navigateToTaxonID: (taxonID: string) => void;\n}\n\ninterface State {}\n\nexport default class TaxonItem extends React.Component<Props, State> {\n    clickTaxon() {\n        this.props.selectTaxonID(this.props.taxon.id);\n    }\n    clickNavigateToTaxon() {\n        const fixedID = this.props.taxon.id.replace('/', ':');\n        const hash = `review/${fixedID}`;\n        // TODO: use the integration api?\n        if (window.parent) {\n            window.parent.location.hash = hash;\n        } else {\n            window.location.hash = hash;\n        }\n        // window.history.pushState({}, 'my title', `/#review/${this.props.taxon.id}`);\n        // this.props.navigateToTaxonID(this.props.taxon.id);\n    }\n    render() {\n        const taxon = this.props.taxon;\n        const classNames = ['TaxonItem'];\n        if (this.props.isActive) {\n            classNames.push('TaxonItem-active');\n        }\n\n        const tooltipTitle = (\n            <div>\n                <div style={{ borderBottom: '1px solid silver' }}>{taxon.name}</div>\n                <div>{taxon.rank}</div>\n            </div>\n        );\n\n        return (\n            <Tooltip title={tooltipTitle} placement=\"right\">\n                <div\n                    className={classNames.join(' ')}\n                    key={this.props.taxon.id}\n                    onClick={this.clickTaxon.bind(this)}\n                    onDoubleClick={this.clickNavigateToTaxon.bind(this)}\n                >\n                    {this.props.taxon.name}\n                </div>\n            </Tooltip>\n        );\n    }\n}\n","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../lib/DB';\nimport { AppConfig } from '@kbase/ui-lib/lib/redux/integration/store';\nimport { Taxon } from '../redux/store';\nimport { TaxonomyModel } from '../lib/model';\n\nexport type TaxonDBStateNone = DBStateNone;\nexport type TaxonDBStateLoading = DBStateLoading;\nexport type TaxonDBStateError = DBStateError;\n\nexport interface TaxonDBStateLoaded extends DBStateLoaded {\n    taxa: Array<Taxon>;\n    total: number;\n    page: number;\n    pageSize: number;\n}\n\nexport type TaxonDBState = TaxonDBStateNone | TaxonDBStateLoading | TaxonDBStateLoaded | TaxonDBStateError;\n\nexport interface TaxonDBProps extends DBProps<TaxonDBState> {\n    token: string;\n    config: AppConfig;\n}\n\nexport default class TaxonDB extends DB<TaxonDBState> {\n    token: string;\n    serviceWizardURL: string;\n    constructor(props: TaxonDBProps) {\n        super(props);\n        this.token = props.token;\n        this.serviceWizardURL = props.config.services.ServiceWizard.url;\n    }\n    // Remember, pages are 1 based; offset is 0 based.\n    // async fetchTaxa(taxonID: TaxonID, page: number, pageSize: number) {\n    //     try {\n    //         this.set((state: TaxonDBState) => {\n    //             return {\n    //                 ...state,\n    //                 status: DBStatus.LOADING\n    //             };\n    //         });\n\n    //         const client = new TaxonomyModel({\n    //             token: this.token,\n    //             url: this.serviceWizardURL\n    //         });\n\n    //         const offset = (page - 1) * pageSize;\n    //         const limit = pageSize;\n\n    //         const [taxa, totalCount] = await client.getChildren(taxonID, {\n    //             offset,\n    //             limit\n    //         });\n    //         this.set((state: TaxonDBState) => {\n    //             return {\n    //                 ...state,\n    //                 status: DBStatus.LOADED,\n    //                 taxa,\n    //                 total: totalCount,\n    //                 page,\n    //                 pageSize\n    //             };\n    //         });\n    //     } catch (ex) {\n    //         console.error('ERROR', ex);\n    //         this.set((state: TaxonDBState) => {\n    //             return {\n    //                 status: DBStatus.ERROR,\n    //                 message: ex.message\n    //             };\n    //         });\n    //     }\n    // }\n\n    async fetchChildren({\n        taxonID,\n        page,\n        pageSize,\n        searchTerm\n    }: {\n        taxonID: string;\n        page: number;\n        pageSize: number;\n        searchTerm: string;\n    }) {\n        try {\n            this.set((state: TaxonDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADING\n                };\n            });\n\n            const client = new TaxonomyModel({\n                token: this.token,\n                url: this.serviceWizardURL\n            });\n\n            const offset = (page - 1) * pageSize;\n            const limit = pageSize;\n\n            const [taxa, totalCount] = await client.getChildren(taxonID, {\n                offset,\n                limit,\n                searchTerm\n            });\n            this.set((state: TaxonDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    taxa,\n                    total: totalCount,\n                    page,\n                    pageSize\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: TaxonDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    message: ex.message\n                };\n            });\n        }\n    }\n}\n","import React from 'react';\nimport { Taxon, TaxonID } from './redux/store';\nimport './TaxonList.css';\nimport TaxonItem from './TaxonItem';\nimport { Empty } from 'antd';\n\nexport interface Props {\n    taxa: Array<Taxon>;\n    maxItems: number;\n    totalItems: number;\n    selectedTaxonID: string | null;\n    selectTaxonID: (taxonID: TaxonID) => void;\n    navigateToTaxonID: (taxonID: TaxonID) => void;\n}\n\ninterface State {}\n\nexport default class TaxonList extends React.Component<Props, State> {\n    selectTaxon(taxonID: TaxonID) {\n        this.props.selectTaxonID(taxonID);\n    }\n    navigateToTaxon(taxonID: TaxonID) {\n        this.props.navigateToTaxonID(taxonID);\n    }\n    renderItemsPlain() {\n        return this.props.taxa.map((taxon) => {\n            const isActive = this.props.selectedTaxonID === taxon.id;\n            return (\n                <TaxonItem\n                    taxon={taxon}\n                    isActive={isActive}\n                    selectTaxonID={this.selectTaxon.bind(this)}\n                    key={taxon.id}\n                    navigateToTaxonID={this.navigateToTaxon.bind(this)}\n                />\n            );\n        });\n    }\n    renderNoItems() {\n        return <Empty description=\"No Children\" image={Empty.PRESENTED_IMAGE_SIMPLE} />;\n    }\n    render() {\n        if (this.props.taxa.length === 0) {\n            return this.renderNoItems();\n        }\n        return this.renderItemsPlain();\n    }\n}\n","import React from 'react';\nimport { Pagination, Icon, Alert, Input } from 'antd';\nimport TaxonList from '../TaxonList';\nimport { TaxonID } from '../redux/store';\nimport { TaxonDBState, TaxonDBStateError, TaxonDBStateLoaded } from './TaxonChildrenDB';\nimport { DBStatus } from '../lib/DB';\nimport './index.css';\n\nconst DEFAULT_PAGE_SIZE = 10;\n\nexport interface Props {\n    db: TaxonDBState;\n    taxonID: TaxonID;\n    selectedTaxonID: TaxonID | null;\n    // taxa: Array<Taxon>;\n    // total: number;\n    selectTaxonID: (taxonID: TaxonID) => void;\n    navigateToTaxonID: (taxonID: TaxonID) => void;\n    fetchChildren: (taxonID: TaxonID, page: number, pageSize: number, searchTerm: string) => void;\n}\n\nexport interface State {}\n\nexport default class TaxonChildren extends React.Component<Props, State> {\n    searchTerm: string;\n    page: number;\n    pageSize: number | null;\n    constructor(props: Props) {\n        super(props);\n        this.searchTerm = '';\n        this.page = 1;\n        this.pageSize = null;\n    }\n    componentDidMount() {\n        this.props.fetchChildren(this.props.taxonID, 1, DEFAULT_PAGE_SIZE, '');\n    }\n    renderTaxaNone() {\n        return <div>None</div>;\n    }\n    renderTaxaLoading() {\n        return <Icon type=\"loading\" />;\n    }\n    renderTitle() {\n        const db = this.props.db;\n        switch (db.status) {\n            case DBStatus.NONE:\n            case DBStatus.LOADING:\n                return <div>Loading...</div>;\n            case DBStatus.ERROR:\n                return <div>ERROR: {db.message}</div>;\n            case DBStatus.LOADED:\n                if (db.total === 0) {\n                    return <div className=\"Col-auto TaxonChildren-box-title\">No Children</div>;\n                }\n\n                const totalCount = Intl.NumberFormat('en-US', {\n                    useGrouping: true\n                }).format(db.total);\n                const currentItem = (db.page - 1) * db.pageSize + 1;\n                const lastItem = currentItem + db.taxa.length - 1;\n\n                return (\n                    <div className=\"Col-auto TaxonChildren-box-title\">\n                        Children ({currentItem}-{lastItem} of {totalCount})\n                    </div>\n                );\n        }\n    }\n    doSearch(term: string) {\n        // console.log('searching: ' + term);\n        this.searchTerm = term;\n        this.props.fetchChildren(this.props.taxonID, this.page, this.pageSize || DEFAULT_PAGE_SIZE, term);\n    }\n    renderSearch() {\n        const disabled =\n            this.props.db.status !== DBStatus.LOADED ||\n            (this.props.db.total <= this.props.db.pageSize && !this.searchTerm);\n        return (\n            <div style={{ marginBottom: '4px' }}>\n                <Input.Search placeholder=\"Search Children\" onSearch={this.doSearch.bind(this)} disabled={disabled} />\n            </div>\n        );\n    }\n    renderTaxaLoaded(db: TaxonDBStateLoaded) {\n        return (\n            <React.Fragment>\n                <TaxonList\n                    taxa={db.taxa}\n                    selectedTaxonID={this.props.selectedTaxonID}\n                    selectTaxonID={this.props.selectTaxonID}\n                    navigateToTaxonID={this.props.navigateToTaxonID}\n                    totalItems={db.total}\n                    maxItems={DEFAULT_PAGE_SIZE}\n                />\n            </React.Fragment>\n        );\n    }\n    renderTaxaError(db: TaxonDBStateError) {\n        return <Alert type=\"error\" message={db.message} />;\n    }\n    renderTaxa() {\n        switch (this.props.db.status) {\n            case DBStatus.NONE:\n                return this.renderTaxaNone();\n            case DBStatus.LOADING:\n                return this.renderTaxaLoading();\n            case DBStatus.LOADED:\n                return this.renderTaxaLoaded(this.props.db);\n            case DBStatus.ERROR:\n                return this.renderTaxaError(this.props.db);\n        }\n    }\n    changePage(page: number, pageSize: number | undefined) {\n        this.page = page;\n        this.pageSize = pageSize || DEFAULT_PAGE_SIZE;\n        this.props.fetchChildren(this.props.taxonID, this.page, this.pageSize, this.searchTerm);\n    }\n    renderPagination() {\n        const db = this.props.db;\n        if (db.status !== DBStatus.LOADED) {\n            return (\n                <Pagination\n                    size=\"small\"\n                    // defaultPageSize={0}\n                    // defaultCurrent={1}\n                    showLessItems={true}\n                    // current={db.page}\n                    hideOnSinglePage={false}\n                    // total={db.total}\n                    // onChange={this.changePage.bind(this)}\n                />\n            );\n        }\n        return (\n            <Pagination\n                size=\"small\"\n                defaultPageSize={db.pageSize}\n                // defaultCurrent={1}\n                showLessItems={true}\n                current={db.page}\n                hideOnSinglePage={false}\n                total={db.total}\n                onChange={this.changePage.bind(this)}\n            />\n        );\n    }\n    renderChildren() {\n        return (\n            <div>\n                {this.renderTitle()}\n                {this.renderSearch()}\n                {this.renderPagination()}\n                {this.renderTaxa()}\n            </div>\n        );\n    }\n\n    render() {\n        return this.renderChildren();\n    }\n}\n","import React from 'react';\nimport TaxonDB from './TaxonChildrenDB';\nimport { DBStatus } from '../lib/DB';\n\nimport { AppConfig } from '@kbase/ui-lib/lib/redux/integration/store';\nimport TaxonChildren from './TaxonChildren';\nimport { TaxonID } from '../redux/store';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    taxonID: TaxonID;\n    selectedTaxonID: TaxonID | null;\n    selectTaxonID: (taxonID: TaxonID) => void;\n    navigateToTaxonID: (taxonID: TaxonID) => void;\n}\n\ninterface State {}\n\nexport default class Data extends React.Component<Props, State> {\n    db: TaxonDB;\n    constructor(props: Props) {\n        super(props);\n        this.db = new TaxonDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n    }\n\n    fetchChildren(taxonID: TaxonID, page: number, pageSize: number, searchTerm: string) {\n        return this.db.fetchChildren({ taxonID, page, pageSize, searchTerm });\n    }\n\n    render() {\n        return (\n            <TaxonChildren\n                db={this.db.get()}\n                taxonID={this.props.taxonID}\n                selectedTaxonID={this.props.selectedTaxonID}\n                selectTaxonID={this.props.selectTaxonID}\n                navigateToTaxonID={this.props.navigateToTaxonID}\n                fetchChildren={this.fetchChildren.bind(this)}\n            />\n        );\n    }\n}\n","import { AppConfig } from '@kbase/ui-lib/lib/redux/integration/store';\nimport { StoreState } from '../../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\n\nexport interface OwnProps {}\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps {}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../lib/DB';\nimport { AppConfig } from '@kbase/ui-lib/lib/redux/integration/store';\nimport { Taxon, TaxonID } from '../redux/store';\nimport { TaxonomyModel } from '../lib/model';\n\nexport type LineageDBStateNone = DBStateNone;\nexport type LineageDBStateLoading = DBStateLoading;\nexport type LineageDBStateError = DBStateError;\n\nexport interface LineageDBStateLoaded extends DBStateLoaded {\n    lineage: Array<Taxon>;\n}\n\nexport type LineageDBState = LineageDBStateNone | LineageDBStateLoading | LineageDBStateLoaded | LineageDBStateError;\n\nexport interface LineageDBProps extends DBProps<LineageDBState> {\n    token: string;\n    config: AppConfig;\n}\n\n// TODO: make props part of generic\nexport default class LineageDB extends DB<LineageDBState> {\n    props: LineageDBProps;\n    constructor(props: LineageDBProps) {\n        super(props);\n        this.props = props;\n    }\n    async getLineage(taxonID: TaxonID) {\n        try {\n            this.set((state: LineageDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADING\n                };\n            });\n\n            const client = new TaxonomyModel({\n                token: this.props.token,\n                url: this.props.config.services.ServiceWizard.url\n            });\n\n            const lineage = await client.getLineage(taxonID);\n            this.set((state: LineageDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    lineage\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: LineageDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    message: ex.message\n                };\n            });\n        }\n    }\n}\n","import React from 'react';\nimport { Taxon, TaxonID } from '../redux/store';\nimport TaxonList from '../TaxonList';\n\nexport interface Props {\n    lineage: Array<Taxon>;\n    selectedTaxonID: TaxonID;\n    selectTaxonID: (taxonID: TaxonID) => void;\n    navigateToTaxonID: (taxonID: TaxonID) => void;\n}\n\ninterface State {}\n\nexport default class Lineage extends React.Component<Props, State> {\n    render() {\n        return (\n            <TaxonList\n                taxa={this.props.lineage}\n                selectedTaxonID={this.props.selectedTaxonID}\n                selectTaxonID={this.props.selectTaxonID}\n                navigateToTaxonID={this.props.navigateToTaxonID}\n                totalItems={this.props.lineage.length}\n                maxItems={10}\n            />\n        );\n    }\n}\n","import React from 'react';\nimport LineageDB, { LineageDBStateLoaded } from './LineageDB';\nimport { DBStatus, DBStateError } from '../lib/DB';\n\nimport { AppConfig } from '@kbase/ui-lib/lib/redux/integration/store';\nimport Lineage from './Lineage';\nimport { TaxonID } from '../redux/store';\nimport { Icon, Alert } from 'antd';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    taxonID: TaxonID;\n    selectedTaxonID: TaxonID;\n    selectTaxonID: (taxonID: TaxonID) => void;\n    navigateToTaxonID: (taxonID: TaxonID) => void;\n}\n\ninterface State {}\n\nexport default class Data extends React.Component<Props, State> {\n    db: LineageDB;\n    constructor(props: Props) {\n        super(props);\n        this.db = new LineageDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n    }\n\n    renderLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderError(db: DBStateError) {\n        return <Alert type=\"error\" message={db.message} />;\n    }\n\n    renderLoaded(db: LineageDBStateLoaded) {\n        return (\n            <Lineage\n                lineage={db.lineage}\n                selectedTaxonID={this.props.selectedTaxonID}\n                selectTaxonID={this.props.selectTaxonID}\n                navigateToTaxonID={this.props.navigateToTaxonID}\n            />\n        );\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                this.db.getLineage(this.props.taxonID);\n                return this.renderLoading();\n            case DBStatus.LOADING:\n                return this.renderLoading();\n            case DBStatus.ERROR:\n                return this.renderError(db);\n            case DBStatus.LOADED:\n                return this.renderLoaded(db);\n        }\n    }\n}\n","import { AppConfig } from '@kbase/ui-lib/lib/redux/integration/store';\nimport { StoreState } from '../../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\n\nexport interface OwnProps {}\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps {}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import React from 'react';\nimport { Taxon, TaxonID } from './redux/store';\nimport { SelectParam } from 'antd/lib/menu';\nimport './LineageNavigator.css';\nimport TaxonItem from './TaxonItem';\nimport TaxonChildren from './taxonChildren';\nimport Lineage from './lineage';\n\nexport interface LineageProps {\n    selectedTaxon: Taxon;\n    targetTaxon: Taxon;\n    selectTaxonID: (taxonID: TaxonID) => void;\n    navigateToTaxonID: (taxonID: TaxonID) => void;\n}\n\ninterface LineageState {}\n\nexport default class LineageNavigator extends React.Component<LineageProps, LineageState> {\n    onClick(taxonId: string) {\n        this.props.selectTaxonID(taxonId);\n        // alert('navigate to ' + taxonId);\n    }\n\n    menuSelected(param: SelectParam) {\n        this.props.selectTaxonID(param.key);\n        // alert('navigate to ' + param.key);\n    }\n\n    clickTaxon(taxon: Taxon) {\n        this.props.selectTaxonID(taxon.id);\n    }\n\n    renderLineage() {\n        return (\n            <Lineage\n                taxonID={this.props.targetTaxon.id}\n                selectedTaxonID={this.props.selectedTaxon.id}\n                selectTaxonID={this.props.selectTaxonID}\n                navigateToTaxonID={this.props.navigateToTaxonID}\n            />\n        );\n        // return 'disabled';\n    }\n\n    renderChildrenCount(count: number) {\n        if (count === 0) {\n            return <div className=\"\">No children</div>;\n        }\n        if (count === 1) {\n            return <div>One child</div>;\n        }\n        return (\n            <div>\n                {Intl.NumberFormat('en-US', {\n                    useGrouping: true\n                }).format(count)}{' '}\n                children\n            </div>\n        );\n    }\n\n    renderChildren() {\n        let selectedId;\n        if (this.props.selectedTaxon) {\n            selectedId = this.props.selectedTaxon.id;\n        } else {\n            selectedId = null;\n        }\n\n        return (\n            <TaxonChildren\n                taxonID={this.props.targetTaxon.id}\n                selectedTaxonID={selectedId}\n                selectTaxonID={this.props.selectTaxonID}\n                navigateToTaxonID={this.props.navigateToTaxonID}\n            />\n        );\n    }\n\n    // renderChildrenxscrolling() {\n    //     let selectedId;\n    //     if (this.props.selectedTaxon) {\n    //         selectedId = this.props.selectedTaxon.id;\n    //     } else {\n    //         selectedId = null;\n    //     }\n\n    //     return (\n    //         <div className=\"scrolling\">\n    //             <TaxonList\n    //                 taxa={this.props.offspring}\n    //                 selectedTaxonID={selectedId}\n    //                 selectTaxonID={this.props.selectTaxonID}\n    //                 navigateToTaxonID={this.props.navigateToTaxonID}\n    //                 totalItems={this.props.totalOffspring}\n    //                 maxItems={10}\n    //             />\n    //         </div>\n    //     );\n    // }\n\n    renderTargetTaxon() {\n        const isActive =\n            (this.props.selectedTaxon && this.props.selectedTaxon.id === this.props.targetTaxon.id) || false;\n\n        return (\n            <TaxonItem\n                taxon={this.props.targetTaxon}\n                isActive={isActive}\n                selectTaxonID={this.props.selectTaxonID}\n                navigateToTaxonID={this.props.navigateToTaxonID}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"Col scrollable\">\n                <div className=\"Col-auto Lineage-box\">\n                    <div className=\"Lineage-box-title\">Lineage</div>\n                    {this.renderLineage()}\n                </div>\n                <div className=\"Col-auto Lineage-box Lineage-target-taxon\">{this.renderTargetTaxon()}</div>\n                <div className=\"Col-auto scrollable Lineage-box\">{this.renderChildren()}</div>\n            </div>\n        );\n    }\n}\n","import React, { CSSProperties } from 'react';\nimport { Taxon } from './redux/store';\n\nexport interface Props {\n    taxon: Taxon;\n}\n\nexport interface State {}\n\nexport default class TaxonSummary extends React.Component<Props, State> {\n    render() {\n        let nameStyle: CSSProperties = {};\n        if (this.props.taxon.rank === 'species') {\n            nameStyle = { fontStyle: 'italic' };\n        }\n        return (\n            <div className=\"InfoTable\">\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                        Name\n                    </div>\n                    <div className=\"InfoTable-dataCol\" style={nameStyle}>\n                        {this.props.taxon.name}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                        Rank\n                    </div>\n                    <div className=\"InfoTable-dataCol\">{this.props.taxon.rank}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { NCBITaxon, TaxonAlias } from '../redux/store';\nimport { Table } from 'antd';\nimport geneticCodes from '../data/geneticCodes.json';\n\n// as Array<[number, string]>\n\ntype GeneticCodes = Array<[number, string]>;\n\nfunction ensureGeneticCodes(geneticCodes: any): GeneticCodes {\n    if (!(geneticCodes instanceof Array)) {\n        throw new Error('Invalid genetic codes file!');\n    }\n\n    return geneticCodes.map(([id, name]) => {\n        if (typeof id !== 'number') {\n            throw new Error('Invalid genetic code id in file');\n        }\n        if (typeof name !== 'string') {\n            throw new Error('Invalid genetic code label in file');\n        }\n        return [id, name];\n    });\n}\n\nconst gc = ensureGeneticCodes(geneticCodes);\n\nconst geneticCodesMap: Map<number, string> = gc.reduce((geneticCodesMap, [id, label]) => {\n    geneticCodesMap.set(id, label);\n    return geneticCodesMap;\n}, new Map<number, string>());\n\nexport interface TaxonDetailProps {\n    taxon: NCBITaxon;\n}\n\ninterface TaxonDetailState {}\n\nexport default class TaxonDetailNCBI extends React.Component<TaxonDetailProps, TaxonDetailState> {\n    renderAliases() {\n        const aliasNameSorter = (a: TaxonAlias, b: TaxonAlias) => {\n            return stringSorter(a.name, b.name);\n        };\n\n        const aliasCategorySorter = (a: TaxonAlias, b: TaxonAlias) => {\n            return stringSorter(a.category, b.category);\n        };\n\n        const stringSorter = (a: string, b: string) => {\n            const fixedA = a.replace(/^[\"']/, '');\n            const fixedB = b.replace(/^[\"']/, '');\n            return fixedA.localeCompare(fixedB);\n        };\n        return (\n            <Table\n                dataSource={this.props.taxon.aliases}\n                className=\"KBaseAntdOverride-remove-table-border\"\n                size=\"small\"\n                // pagination={{ position: 'top' }}\n                pagination={false}\n                scroll={{ y: '25em' }}\n                rowKey=\"name\"\n                bordered={false}\n            >\n                <Table.Column\n                    title=\"Name\"\n                    dataIndex=\"name\"\n                    key=\"name\"\n                    defaultSortOrder=\"ascend\"\n                    sorter={aliasNameSorter}\n                />\n                <Table.Column\n                    title=\"Category\"\n                    dataIndex=\"category\"\n                    key=\"category\"\n                    width=\"20em\"\n                    sorter={aliasCategorySorter}\n                />\n            </Table>\n        );\n    }\n\n    renderTaxonDetail() {\n        const width = '8em';\n        let nameStyle: React.CSSProperties = {};\n        if (this.props.taxon.rank === 'species') {\n            nameStyle.fontStyle = 'italic';\n        }\n        return (\n            <div className=\"InfoTable\">\n                <div className=\"InfoTable-row\" key=\"name\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        Name\n                    </div>\n                    <div className=\"InfoTable-dataCol\" style={nameStyle}>\n                        {this.props.taxon.name}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\" key=\"rank\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        Rank\n                    </div>\n                    <div className=\"InfoTable-dataCol\">{this.props.taxon.rank}</div>\n                </div>\n                <div className=\"InfoTable-row\" key=\"ncbiid\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        NCBI ID\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        <a\n                            href={`https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=info&id=${\n                                this.props.taxon.ncbiID\n                            }`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            {this.props.taxon.ncbiID}\n                        </a>\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\" key=\"genetic-code\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        Genetic Code\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.props.taxon.geneticCode} -{' '}\n                        {geneticCodesMap.get(this.props.taxon.geneticCode) || 'Unknown'}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\" key=\"aliases\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        Aliases\n                    </div>\n                    <div className=\"InfoTable-dataCol\">{this.renderAliases()}</div>\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return <div>{this.renderTaxonDetail()}</div>;\n    }\n}\n","import React from 'react';\nimport { Taxon, TaxonomySource } from '../redux/store';\nimport TaxonDetailNCBI from './TaxonDetailNCBI';\nimport { Alert } from 'antd';\n\nexport interface TaxonDetailProps {\n    taxon: Taxon;\n}\n\ninterface TaxonDetailState {}\n\nexport default class TaxonDetail extends React.Component<TaxonDetailProps, TaxonDetailState> {\n    render() {\n        switch (this.props.taxon.type) {\n            case TaxonomySource.NCBI:\n                return <TaxonDetailNCBI taxon={this.props.taxon} />;\n            default:\n                return <Alert type=\"error\" message=\"This taxon type is not suppported\" />;\n        }\n    }\n}\n","export function getProp<T>(obj: object, propPath: string | Array<string>, defaultValue: any): T {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length; i += 1) {\n        if (temp === undefined || typeof temp !== 'object' || temp === null) {\n            return defaultValue;\n        }\n        temp = temp[propPath[i]];\n    }\n    if (temp === undefined) {\n        return defaultValue;\n    }\n    return temp;\n}\n\nexport function hasProp(obj: object, propPath: string | Array<string>): boolean {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length; i += 1) {\n        if (temp === undefined || typeof temp !== 'object' || temp === null) {\n            return false;\n        }\n        temp = temp[propPath[i]];\n    }\n    if (temp === undefined) {\n        return false;\n    }\n    return true;\n}\n\nexport function setProp(obj: object, propPath: string | Array<string>, value: any) {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    if (propPath.length === 0) {\n        return;\n    }\n    // pop off the last property for setting at the end.\n    const propKey = propPath[propPath.length - 1];\n    let key;\n    // Walk the path, creating empty objects if need be.\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length - 1; i += 1) {\n        key = propPath[i];\n        if (temp[key] === undefined) {\n            temp[key] = {};\n        }\n        obj = temp[key];\n    }\n    // Finally set the property.\n    temp[propKey] = value;\n    return value;\n}\n\nexport function incrProp(obj: object, propPath: string | Array<string>, increment: number): number | undefined {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    if (propPath.length === 0) {\n        return;\n    }\n    increment = increment === undefined ? 1 : increment;\n    const propKey = propPath[propPath.length - 1];\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length - 1; i += 1) {\n        const key = propPath[i];\n        if (temp[key] === undefined) {\n            temp[key] = {};\n        }\n        temp = temp[key];\n    }\n    if (temp[propKey] === undefined) {\n        temp[propKey] = increment;\n    } else {\n        if (typeof temp[propKey] === 'number') {\n            temp[propKey] += increment;\n        } else {\n            throw new Error('Can only increment a number');\n        }\n    }\n    return temp[propKey];\n}\n\nexport function deleteProp(obj: object, propPath: string | Array<string>) {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    if (propPath.length === 0) {\n        return false;\n    }\n    const propKey = propPath[propPath.length - 1];\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length - 1; i += 1) {\n        const key = propPath[i];\n        if (temp[key] === undefined) {\n            // for idempotency, and utility, do not throw error if\n            // the key doesn't exist.\n            return false;\n        }\n        obj = temp[key];\n    }\n    if (temp[propKey] === undefined) {\n        return false;\n    }\n    delete temp[propKey];\n    return true;\n}\n\n// class Props {\n//     constructor(config = {}) {\n//         this.obj = config.data || {};\n//     }\n\n//     getItem(props, defaultValue) {\n//         return getProp(this.obj, props, defaultValue);\n//     }\n\n//     hasItem(propPath) {\n//         return hasProp(this.obj, propPath);\n\n//     }\n\n//     setItem(path, value) {\n//         return setProp(this.obj, path, value);\n//     }\n\n//     incrItem(path, increment) {\n//         return incrProp(this.obj, path, increment);\n//     }\n\n//     deleteItem(path) {\n//         return deleteProp(this.obj, path);\n//     }\n\n//     getRaw() {\n//         return this.obj;\n//     }\n// }\n\n// return Object.freeze({ Props, getProp, hasProp, setProp, incrProp, deleteProp });\n","import React from 'react';\n\nimport WikipediaClient, { WikipediaInfo } from './landingPages/taxonomy/lib/Wikipedia';\nimport marked from 'marked';\nimport { Icon, Alert, Tooltip } from 'antd';\nimport Loading from './Loading';\nimport './Wikipedia.css';\n\nexport interface WikipediaProps {\n    term: string;\n}\n\nenum AsyncComponentLoadingState {\n    NONE,\n    LOADING,\n    LOADED,\n    ERROR\n}\n\ninterface StateNone {\n    state: AsyncComponentLoadingState.NONE;\n}\n\ninterface StateLoading {\n    state: AsyncComponentLoadingState.LOADING;\n}\n\ninterface StateLoaded {\n    state: AsyncComponentLoadingState.LOADED;\n    wikipediaInfo: WikipediaInfo;\n}\n\ninterface StateError {\n    state: AsyncComponentLoadingState.ERROR;\n    error: string;\n}\n\ntype WikipediaState = StateNone | StateLoading | StateLoaded | StateError;\n\nexport default class Wikipedia extends React.Component<WikipediaProps, WikipediaState> {\n    wikipediaClient: WikipediaClient;\n    canceled: boolean;\n    constructor(props: WikipediaProps) {\n        super(props);\n        this.wikipediaClient = new WikipediaClient();\n        this.canceled = false;\n        this.state = {\n            state: AsyncComponentLoadingState.NONE\n        };\n    }\n\n    componentWillUnmount() {\n        this.canceled = true;\n        // this.state = {\n        //     state: AsyncComponentLoadingState.CANCELED\n        // };\n    }\n\n    renderArticle(wikipediaInfo: WikipediaInfo) {\n        const content = marked(wikipediaInfo.introText);\n        return <div style={{ overflow: 'auto' }} dangerouslySetInnerHTML={{ __html: content }} />;\n    }\n\n    renderImage(wikipediaInfo: WikipediaInfo) {\n        if (!wikipediaInfo.imageUrl) {\n            return (\n                <div className=\"Wikipedia-empty-image\">\n                    <div className=\"-content\">Image not found</div>\n                </div>\n            );\n        }\n        return (\n            <div>\n                <img src={wikipediaInfo.imageUrl} style={{ width: '100%' }} alt={`${this.props.term}`} />\n            </div>\n        );\n    }\n\n    renderMatch(wikipediaInfo: WikipediaInfo) {\n        if (wikipediaInfo.exactMatch) {\n            const message = (\n                <React.Fragment>\n                    <Icon type=\"check\" style={{ color: 'green' }} /> Exact match on \"\n                    {wikipediaInfo.matchingTerms.join(' ')}\"\n                </React.Fragment>\n            );\n            return <Alert type=\"success\" message={message} />;\n        } else {\n            const message = (\n                <React.Fragment>\n                    <Icon type=\"warning\" style={{ color: 'orange' }} /> Inexact match on: \"\n                    {wikipediaInfo.matchingTerms.join(' ')}\"\n                </React.Fragment>\n            );\n            return <Alert type=\"warning\" message={message} />;\n        }\n    }\n\n    renderWikipediaLogoCredit() {\n        return (\n            <div>\n                <div style={{ borderBottom: '1px solid gray' }}>Link to the original Wikipedia entry</div>\n                <div style={{ fontSize: '80%' }}>\n                    <p style={{ textAlign: 'center' }}>\n                        credit:\n                        <a\n                            href=\"https://creativecommons.org/licenses/by-sa/3.0/\"\n                            title=\"Creative Commons Attribution-ShareAlike 3.0\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            CC BY-SA 3.0\n                        </a>\n                        <a\n                            href=\"https://en.wikipedia.org/w/index.php?curid=33285413\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Link\n                        </a>\n                    </p>\n                </div>\n            </div>\n        );\n    }\n\n    renderWikipediaInfo(wikipediaInfo: WikipediaInfo) {\n        return (\n            <div className=\"Row scrollable\">\n                <div className=\"Col Col-grow-2 scrollable\">\n                    <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '10px' }}>\n                        <div style={{ flex: '1 1 0px' }}>{this.renderMatch(wikipediaInfo)}</div>\n                        <div style={{ flex: '0 0 auto', alignSelf: 'center', marginLeft: '10px' }}>\n                            <div style={{ height: '32px', textAlign: 'center' }}>\n                                <Tooltip title={this.renderWikipediaLogoCredit()}>\n                                    <a href={wikipediaInfo.pageUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                                        <img\n                                            src=\"images/wikipedia-logo.svg\"\n                                            style={{ height: '100%' }}\n                                            alt=\"Wikipedia Logo\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                            </div>\n                            <div />\n                        </div>\n                    </div>\n                    <div\n                        className=\"scrollable\"\n                        style={{ flex: '2 1 0px', paddingRight: '4px', marginRight: '4px', overflowY: 'auto' }}\n                    >\n                        {this.renderArticle(wikipediaInfo)}\n                    </div>\n                </div>\n\n                <div className=\"Col Col-grow-1\" style={{ flex: '1 1 0px', marginLeft: '10px' }}>\n                    {this.renderImage(wikipediaInfo)}\n                </div>\n            </div>\n        );\n    }\n\n    updateInfo() {\n        const wikipediaClient = new WikipediaClient();\n        const { term } = this.props;\n        this.setState({\n            state: AsyncComponentLoadingState.LOADING\n        });\n        wikipediaClient\n            .findTerm(term)\n            .then((wikipediaInfo) => {\n                if (this.canceled) {\n                    return;\n                }\n                this.setState({\n                    state: AsyncComponentLoadingState.LOADED,\n                    wikipediaInfo\n                });\n            })\n            .catch((err) => {\n                if (this.canceled) {\n                    return;\n                }\n                return this.setState({\n                    state: AsyncComponentLoadingState.ERROR,\n                    error: err.message\n                });\n            });\n    }\n\n    componentDidMount() {\n        this.updateInfo();\n    }\n\n    componentDidUpdate(props: WikipediaProps, state: WikipediaState) {\n        if (props.term !== this.props.term) {\n            this.updateInfo();\n        }\n    }\n\n    renderNone() {\n        return <div />;\n    }\n\n    renderLoading() {\n        return <Loading message=\"Searching Wikipedia...\" />;\n    }\n\n    renderLoaded(state: StateLoaded) {\n        return this.renderWikipediaInfo(state.wikipediaInfo);\n    }\n\n    renderError(state: StateError) {\n        return <Alert type=\"error\" message={state.error} />;\n    }\n\n    render() {\n        if (this.canceled) {\n            return;\n        }\n        switch (this.state.state) {\n            case AsyncComponentLoadingState.NONE:\n                return this.renderNone();\n            case AsyncComponentLoadingState.LOADING:\n                return this.renderLoading();\n            case AsyncComponentLoadingState.LOADED:\n                return this.renderLoaded(this.state);\n            case AsyncComponentLoadingState.ERROR:\n                return this.renderError(this.state);\n        }\n    }\n}\n","import * as props from './props';\n\nexport interface WikipediaInfo {\n    imageUrl: string;\n    pageUrl: string;\n    introText: string;\n    title: string;\n    pageId: number;\n    exactMatch: boolean;\n    matchingTerms: Array<string>;\n}\n\ninterface WikipediaParse {\n    headhtml: Map<string, string>;\n    pageid: number;\n    redirects: Array<string>;\n    text: Map<string, string>;\n    title: string;\n}\n\nclass NotFound extends Error {\n    constructor(message: string) {\n        super(message);\n\n        this.name = 'NotFound';\n    }\n}\n\nconst WIKIPEDIA_API_URL = 'https://en.wikipedia.org/w/api.php';\nconst IMAGE_SIZE = 500;\n\nexport default class Wikipedia {\n    scrubTerm(proposedTerm: string): string {\n        // convervatively, remove all non-alpha characters\n        const chars = proposedTerm.split('');\n        const validChar = /[\\w \\s]/;\n        const newChars = chars.filter((char) => {\n            if (validChar.exec(char)) {\n                return true;\n            }\n            return false;\n        });\n        return newChars.join('');\n    }\n\n    async findTerm(term: string): Promise<WikipediaInfo> {\n        if (!term) {\n            throw new Error('Empty term passed');\n        }\n        const lookupTerm = this.scrubTerm(term);\n        return this.getWikipediaInfo(lookupTerm).then(\n            ({ imageUrl, pageUrl, introText, title, pageId, matchingTerms, exactMatch }) => {\n                // this.imageUrl(imageUrl);\n                // this.pageUrl(url);\n                const fixedIntroText = introText\n                    .replace(/====/g, '####')\n                    .replace(/===/g, '###')\n                    .replace(/==/g, '##')\n                    .replace(/\\n/g, '  \\n');\n\n                return { imageUrl, pageUrl, introText: fixedIntroText, title, pageId, matchingTerms, exactMatch };\n            }\n        );\n    }\n\n    async getWikipediaInfo(term: string): Promise<WikipediaInfo> {\n        return this.getPage(term).then(\n            ({\n                wikiResponse,\n                matchingTerms,\n                exactMatch\n            }: {\n                wikiResponse: any;\n                matchingTerms: Array<string>;\n                exactMatch: boolean;\n            }) => {\n                // this.imageCaption(wikiResponse.parse.title);\n                return Promise.all([\n                    this.getImage({ size: IMAGE_SIZE, pageId: wikiResponse.parse.pageid }),\n                    this.getPageInfo({ pageId: wikiResponse.parse.pageid })\n                ]).then(([imageUrl, pageInfo]) => {\n                    return {\n                        imageUrl: imageUrl,\n                        pageUrl: pageInfo.url,\n                        introText: pageInfo.introText,\n                        title: wikiResponse.parse.title,\n                        pageId: wikiResponse.parse.pageid,\n                        matchingTerms,\n                        exactMatch\n                    };\n                });\n            }\n        );\n    }\n\n    // see: https://www.mediawiki.org/wiki/API:Main_page\n    // https://en.wikipedia.org/w/api.php?action=help&modules=parse\n    async getPage(term: string): Promise<{ wikiResponse: any; matchingTerms: Array<string>; exactMatch: boolean }> {\n        const terms = term.split(/\\s+/);\n        let matchingTerms: Array<string>;\n        let exactMatch = true;\n        return new Promise((resolve, reject) => {\n            const fetchPage = (terms: Array<string>) => {\n                if (terms.length === 0) {\n                    reject(new NotFound('No Wikipedia page found matching \"' + term + '\"'));\n                    // resolve(null);\n                }\n                // const http = new HttpClient.HttpClient();\n                // const header = new HttpClient.HttpHeader({\n                //     accept: 'application/json'\n                // });\n                const apiUrl = new URL(WIKIPEDIA_API_URL);\n                const query = apiUrl.searchParams;\n                query.set('action', 'parse');\n                query.set('format', 'json');\n                query.set('prop', 'text|headhtml');\n                query.set('section', '0');\n                query.set('redirects', '');\n                query.set('page', terms.join(' '));\n                const headers = {\n                    accept: 'application/json'\n                };\n                // must set this to enable cors\n                query.set('origin', '*');\n                fetch(apiUrl.toString(), {\n                    method: 'GET',\n                    headers\n                })\n                    .then((result) => {\n                        switch (result.status) {\n                            case 200:\n                                try {\n                                    return result.json().then((wikiResponse) => {\n                                        if (wikiResponse.error) {\n                                            if (wikiResponse.error.code === 'missingtitle') {\n                                                terms.pop();\n                                                exactMatch = false;\n                                                fetchPage(terms);\n                                                return null;\n                                            } else {\n                                                console.error('wikipedia api error', wikiResponse);\n                                                reject(new Error('Wikipedia api error: ' + wikiResponse.error.code));\n                                            }\n                                        } else {\n                                            matchingTerms = terms;\n                                            resolve({\n                                                wikiResponse,\n                                                matchingTerms,\n                                                exactMatch\n                                            });\n                                        }\n                                    });\n                                } catch (ex) {\n                                    reject(new Error('Error parsing wikipedia response: ' + ex.message));\n                                }\n                                break;\n                            default:\n                                const message = 'Unexpected response from wikipedia api: ' + result.status;\n                                console.error(message, result);\n                                reject(new Error(message));\n                        }\n                    })\n                    .catch((err) => {\n                        reject(err);\n                    });\n            };\n            fetchPage(terms);\n        });\n    }\n\n    async getPageInfo({ pageId }: { pageId: string }): Promise<any> {\n        const apiURL = new URL(WIKIPEDIA_API_URL);\n        const query = apiURL.searchParams;\n        query.set('action', 'query');\n        query.set('pageids', pageId);\n        query.set('prop', 'info|extracts');\n        query.set('explaintext', 'true');\n        query.set('inprop', 'url');\n        query.set('origin', '*');\n        query.set('format', 'json');\n\n        // const http = new HttpClient.HttpClient();\n        return fetch(apiURL.toString(), {\n            method: 'GET'\n        }).then((result) => {\n            switch (result.status) {\n                case 200:\n                    try {\n                        return result.json().then((wikiResponse) => {\n                            return {\n                                url: props.getProp<string>(\n                                    wikiResponse,\n                                    ['query', 'pages', String(pageId), 'fullurl'],\n                                    null\n                                ),\n                                introText: props.getProp<string>(\n                                    wikiResponse,\n                                    ['query', 'pages', String(pageId), 'extract'],\n                                    null\n                                )\n                            };\n                        });\n                    } catch (ex) {\n                        console.error('error getting page info', ex.message);\n                        throw ex;\n                    }\n                default:\n                    var message = 'Unexpected response from wikipedia api: ' + result.status;\n                    console.error(message, result);\n                    throw new Error(message);\n            }\n        });\n    }\n\n    async getImage({ size, pageId }: { size: number; pageId: number }): Promise<string> {\n        const apiURL = new URL(WIKIPEDIA_API_URL);\n        const query = apiURL.searchParams;\n        query.set('action', 'query');\n        query.set('format', 'json');\n        query.set('prop', 'pageimages');\n        query.set('pithumbsize', String(size));\n        query.set('pageids', String(pageId));\n        query.set('origin', '*');\n        const headers = {\n            accept: 'application/json'\n        };\n\n        return fetch(apiURL.toString(), {\n            method: 'GET',\n            headers\n        })\n            .then((result) => {\n                switch (result.status) {\n                    case 200:\n                        try {\n                            return result.json().then((wikiResponse) => {\n                                return props.getProp<string>(\n                                    wikiResponse,\n                                    ['query', 'pages', String(pageId), 'thumbnail', 'source'],\n                                    null\n                                );\n                            });\n                        } catch (ex) {\n                            throw new Error('Error parsing wikipedia response: ' + ex.message);\n                        }\n                    default:\n                        var message = 'Unexpected response from wikipedia api: ' + result.status;\n                        console.error(message, result);\n                        throw new Error(message);\n                }\n            })\n            .catch((err) => {\n                const message = 'Error getting image from wikipedia: ' + err.message;\n                console.error(message, err);\n                throw new Error('Error getting image from wikipedia: ' + err.message);\n            });\n    }\n}\n","import React from 'react';\nimport { Taxon } from '../redux/store';\nimport Wikipedia from '../../../Wikipedia';\n\nexport interface TaxonDescriptionProps {\n    taxon: Taxon;\n}\n\ninterface TaxonDescriptionState {}\n\nexport default class TaxonDescription extends React.Component<TaxonDescriptionProps, TaxonDescriptionState> {\n    renderTaxonDescription() {\n        return <Wikipedia term={this.props.taxon.name} />;\n    }\n\n    /**\n     * Intercept nodes which don't have a widely known biological association with\n     * the node name (\"scientific name\"), and for which a wikipedia lookup would not\n     * be very useful.\n     */\n    notBiological() {\n        switch (this.props.taxon.name) {\n            case 'root':\n                return (\n                    <div>\n                        <p>This taxon is the topmost node in the NCBI Taxonomy tree.</p>\n                    </div>\n                );\n            case 'cellular organisms':\n                return (\n                    <div>\n                        <p>This taxon represents all cellular organisms.</p>\n                    </div>\n                );\n            default:\n                return (\n                    <div>\n                        <p>Unknown non-biological taxon.</p>\n                    </div>\n                );\n        }\n    }\n\n    render() {\n        if (this.props.taxon.isBiological) {\n            return <div className=\"Col scrollable\">{this.renderTaxonDescription()}</div>;\n        }\n        return this.notBiological();\n    }\n}\n","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../lib/DB';\nimport { AppConfig } from '@kbase/ui-lib/lib/redux/integration/store';\nimport { TaxonomyModel, LinkedObject } from '../lib/model';\n\nexport type LinkedDataDBStateNone = DBStateNone;\nexport type LinkedDataDBStateLoading = DBStateLoading;\nexport type LinkedDataDBStateError = DBStateError;\n\nexport interface LinkedDataDBStateLoaded extends DBStateLoaded {\n    linkedObjects: Array<LinkedObject>;\n    page: number;\n    pageSize: number;\n}\n\nexport type LinkedDataDBState =\n    | LinkedDataDBStateNone\n    | LinkedDataDBStateLoading\n    | LinkedDataDBStateLoaded\n    | LinkedDataDBStateError;\n\nexport interface LinkedDataDBProps extends DBProps<LinkedDataDBState> {\n    token: string;\n    config: AppConfig;\n}\n\nexport default class LinkedDataDB extends DB<LinkedDataDBState> {\n    token: string;\n    serviceWizardURL: string;\n    constructor(props: LinkedDataDBProps) {\n        super(props);\n        this.token = props.token;\n        this.serviceWizardURL = props.config.services.ServiceWizard.url;\n    }\n\n    async fetchLinkedObjects({ taxonID, page, pageSize }: { taxonID: string; page: number; pageSize: number }) {\n        try {\n            this.set((state: LinkedDataDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADING\n                };\n            });\n\n            const client = new TaxonomyModel({\n                token: this.token,\n                url: this.serviceWizardURL\n            });\n\n            const offset = (page - 1) * pageSize;\n            const limit = pageSize;\n\n            const linkedObjects = await client.getLinkedObjects(taxonID, {\n                offset,\n                limit\n            });\n            this.set((state: LinkedDataDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    linkedObjects,\n                    page,\n                    pageSize\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: LinkedDataDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    message: ex.message\n                };\n            });\n        }\n    }\n}\n","import React from 'react';\nimport { LinkedObject } from '../lib/model';\n\nexport interface Props {\n    linkedObjects: Array<LinkedObject>;\n}\n\ninterface State {}\n\nexport default class LinkedData extends React.Component<Props, State> {\n    render() {\n        return <div>Coming soon...</div>;\n    }\n}\n","import React from 'react';\nimport LinkedDataDB, { LinkedDataDBStateError, LinkedDataDBStateLoaded } from './LinkedDataDB';\nimport { DBStatus } from '../lib/DB';\n\nimport { AppConfig } from '@kbase/ui-lib/lib/redux/integration/store';\nimport LinkedData from './LinkedData';\nimport { TaxonID } from '../redux/store';\nimport { Icon, Alert } from 'antd';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    taxonID: TaxonID;\n}\n\ninterface State {}\n\nexport default class Data extends React.Component<Props, State> {\n    db: LinkedDataDB;\n    constructor(props: Props) {\n        super(props);\n        this.db = new LinkedDataDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n    }\n\n    fetchLinkedData(taxonID: TaxonID, page: number, pageSize: number) {\n        return this.db.fetchLinkedObjects({ taxonID, page, pageSize });\n    }\n\n    renderNone() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderError(db: LinkedDataDBStateError) {\n        return <Alert type=\"error\" message={db.message} />;\n    }\n\n    renderLoaded(db: LinkedDataDBStateLoaded) {\n        return <LinkedData linkedObjects={db.linkedObjects} />;\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                this.db.fetchLinkedObjects({ taxonID: this.props.taxonID, page: 1, pageSize: 1000 });\n                return this.renderNone();\n            case DBStatus.LOADING:\n                return this.renderLoading();\n            case DBStatus.ERROR:\n                return this.renderError(db);\n            case DBStatus.LOADED:\n                return this.renderLoaded(db);\n        }\n    }\n}\n","import { AppConfig } from '@kbase/ui-lib/lib/redux/integration/store';\nimport { StoreState } from '../../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\n\nexport interface OwnProps {}\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps {}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import React from 'react';\nimport { Tabs } from 'antd';\nimport TaxonDetail from './TaxonDetail';\nimport TaxonDescription from './TaxonDescription';\nimport LinkedData from '../linkedData';\nimport { Taxon } from '../redux/store';\n\nexport interface TaxonInfoProps {\n    taxon: Taxon;\n}\n\ninterface TaxonInfoState {}\n\nexport default class TaxonInfo extends React.Component<TaxonInfoProps, TaxonInfoState> {\n    render() {\n        return (\n            <Tabs defaultActiveKey=\"detail\" animated={false} className=\"FullHeight-tabs\">\n                <Tabs.TabPane tab=\"Detail\" key=\"detail\" forceRender={false}>\n                    <TaxonDetail taxon={this.props.taxon} />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Description\" key=\"description\" forceRender={false}>\n                    <TaxonDescription taxon={this.props.taxon} />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Linked Data\" key=\"linkedData\" forceRender={false}>\n                    <LinkedData taxonID={this.props.taxon.id} />\n                </Tabs.TabPane>\n            </Tabs>\n        );\n    }\n}\n","import React from 'react';\n\nimport { SourceInfo } from '../SourceInfo';\nimport LineageNavigator from '../LineageNavigator';\nimport TaxonSummary from '../TaxonSummary';\nimport { Taxon, TaxonID } from '../redux/store';\nimport { Row, Col } from 'antd';\nimport TaxonInfo from '../taxonInfo/TaxonInfo';\nimport './Taxonomy.css';\n\nexport interface TaxonomyProps {\n    // lineage: Array<Taxon>;\n    selectedTaxon: Taxon;\n    targetTaxon: Taxon;\n    selectTaxonID: (taxonID: TaxonID) => void;\n    navigateToTaxonID: (taxonID: TaxonID) => void;\n    setTitle: (title: string) => void;\n}\n\ninterface TaxonomyState {}\n\nexport default class Taxonomy extends React.Component<TaxonomyProps, TaxonomyState> {\n    renderTaxonInfo() {\n        if (!this.props.selectedTaxon) {\n            return <div>No taxon selected</div>;\n        }\n        return <TaxonInfo taxon={this.props.selectedTaxon} />;\n        // return 'disabled';\n    }\n\n    componentDidMount() {\n        this.props.setTitle('Taxonomy Landing Page for \"' + this.props.targetTaxon.name + '\"');\n    }\n\n    render() {\n        return (\n            <div className=\"Col scrollable Taxonomy\">\n                <div className=\"Col-auto Taxonomy-summary-section\">\n                    <Row>\n                        <Col span={12}>\n                            <TaxonSummary taxon={this.props.targetTaxon} />\n                        </Col>\n                        <Col span={12}>\n                            <SourceInfo />\n                        </Col>\n                    </Row>\n                </div>\n                <div className=\"Row scrollable\">\n                    <div className=\"Col scrollable\" style={{ flex: '0 0 20em' }}>\n                        <LineageNavigator\n                            selectedTaxon={this.props.selectedTaxon}\n                            // lineage={this.props.lineage}\n                            selectTaxonID={this.props.selectTaxonID}\n                            targetTaxon={this.props.targetTaxon}\n                            navigateToTaxonID={this.props.navigateToTaxonID}\n                        />\n                    </div>\n\n                    <div className=\"Col scrollable\" style={{ marginLeft: '10px' }}>\n                        {this.renderTaxonInfo()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport TaxonDB, { TaxonDBStateLoaded } from './TaxonDB';\nimport { DBStatus, DBStateError } from '../lib/DB';\n\nimport { AppConfig } from '@kbase/ui-lib/lib/redux/integration/store';\nimport Taxonomy from './Taxonomy';\nimport { TaxonID } from '../redux/store';\nimport { Icon, Alert } from 'antd';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    taxonID: TaxonID;\n    navigate: (taxonID: TaxonID) => void;\n    setTitle: (title: string) => void;\n}\n\ninterface State {}\n\nexport default class Data extends React.Component<Props, State> {\n    db: TaxonDB;\n    constructor(props: Props) {\n        super(props);\n        this.db = new TaxonDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n    }\n\n    selectTaxon(taxonID: TaxonID) {\n        return this.db.getSelectedTaxon(taxonID);\n    }\n\n    navigateToTaxon(taxonID: TaxonID) {\n        return this.props.navigate(taxonID);\n    }\n\n    renderLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderError(db: DBStateError) {\n        return <Alert type=\"error\" message={db.message} />;\n    }\n\n    renderLoaded(db: TaxonDBStateLoaded) {\n        return (\n            <Taxonomy\n                targetTaxon={db.targetTaxon}\n                selectedTaxon={db.selectedTaxon}\n                selectTaxonID={this.selectTaxon.bind(this)}\n                navigateToTaxonID={this.navigateToTaxon.bind(this)}\n                setTitle={this.props.setTitle}\n            />\n        );\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                this.db.getTargetTaxon(this.props.taxonID);\n                return this.renderLoading();\n            case DBStatus.LOADING:\n                return this.renderLoading();\n            case DBStatus.ERROR:\n                return this.renderError(db);\n            case DBStatus.LOADED:\n                if (this.props.taxonID !== db.targetTaxon.id) {\n                    this.db.getTargetTaxon(this.props.taxonID);\n                    return this.renderLoaded(db);\n                } else {\n                    return this.renderLoaded(db);\n                }\n        }\n    }\n}\n","import { AppConfig } from '@kbase/ui-lib/lib/redux/integration/store';\nimport { StoreState, RelationEngineID } from '../../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { navigate } from '../../../../redux/actions';\nimport { sendTitle } from '@kbase/ui-lib';\n\nexport interface OwnProps {}\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps {\n    navigate: (id: RelationEngineID) => void;\n    setTitle: (title: string) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, props: OwnProps): DispatchProps {\n    return {\n        navigate: (id: RelationEngineID) => {\n            dispatch(navigate(id) as any);\n        },\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import { RelationEngineID, StoreState } from '../../../redux/store';\n// import { TaxonID } from './redux/store';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { navigate } from '../../../redux/actions';\nimport { connect } from 'react-redux';\nimport Taxonomy from './main';\nimport { sendTitle } from '@kbase/ui-lib';\n\nexport interface OwnProps {\n    // taxonID: TaxonID;\n}\n\nexport interface StateProps {\n    // taxonID: TaxonID;\n}\n\nexport interface DispatchProps {\n    navigate: (relationEngineID: RelationEngineID) => void;\n    setTitle: (title: string) => void;\n    // load: (taxonID: TaxonID) => void;\n}\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    return {};\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        navigate: (relationEngineId: RelationEngineID) => {\n            dispatch(navigate(relationEngineId) as any);\n        },\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        }\n        // load: (taxonID: TaxonID) => {\n        //     dispatch(load(taxonID) as any);\n        // }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Taxonomy);\n","import React from 'react';\nimport { RootState } from '@kbase/ui-lib/lib/redux/root/store';\nimport {\n    RelationEngineViewLoading,\n    RelationEngineViewLoaded,\n    RelationEngineViewError,\n    RelationEngineID,\n    RelationEngineNodeType,\n    Navigation,\n    ViewType,\n    NavigationSome\n} from '../../redux/store';\nimport Loading from '../Loading';\nimport { Alert } from 'antd';\nimport Taxonomy from '../landingPages/taxonomy';\n\nexport interface DispatcherProps {\n    token: string | null;\n    rootState: RootState;\n    // view: RelationEngineView;\n    navigation: Navigation;\n    trigger: number;\n    navigate: (relationEngineID: RelationEngineID) => void;\n}\n\ninterface DispatcherState {}\n\nexport class Dispatcher extends React.Component<DispatcherProps, DispatcherState> {\n    renderUnauthorized() {\n        return <div>Sorry, not authorized. Please log in first.</div>;\n    }\n\n    renderRootState() {\n        switch (this.props.rootState) {\n            case RootState.NONE:\n                return '';\n            case RootState.HOSTED:\n                return '';\n            case RootState.DEVELOP:\n                return 'develop';\n            case RootState.ERROR:\n                return 'error';\n        }\n    }\n\n    renderNavigationNone() {\n        return <div>none</div>;\n    }\n\n    renderNavigationLoading(view: RelationEngineViewLoading) {\n        return <Loading message=\"Loading view...\" />;\n    }\n\n    renderNavigationLoaded(view: RelationEngineViewLoaded) {\n        // This is currently how we dispatch to the type-specific\n        // landing page.\n        switch (view.relationEngineNodeType) {\n            case RelationEngineNodeType.TAXON:\n                return <Taxonomy taxonID={view.relationEngineID} />;\n        }\n    }\n\n    renderNavigationError(view: RelationEngineViewError) {\n        return <Alert type=\"error\" message={`View Error: ${view.message}`} />;\n    }\n\n    renderNavigationSome(navigation: NavigationSome) {\n        // This is currently how we dispatch to the type-specific\n        // landing page.\n        switch (navigation.type) {\n            case ViewType.TAXONOMY:\n                return <Taxonomy taxonID={navigation.relationEngineID} />;\n        }\n    }\n\n    renderNavigation() {\n        switch (this.props.navigation.type) {\n            case ViewType.NONE:\n                return this.renderNavigationNone();\n            default:\n                return this.renderNavigationSome(this.props.navigation);\n            // case ViewStatus.LOADING:\n            //     return this.renderNavigationLoading(this.props.view);\n            // case ViewStatus.LOADED:\n            //     return this.renderNavigationLoaded(this.props.view);\n            // case ViewStatus.ERROR:\n            //     return this.renderNavigationError(this.props.view);\n        }\n    }\n\n    parseHash(hash: string): { path: Array<string>; params: { relationEngineID: string } } {\n        const hashRe = /^#(.*?)\\/(.*)$/;\n        const m = hashRe.exec(hash);\n\n        if (!m) {\n            throw new Error('Invalid path');\n        }\n\n        // Just for now...\n        // TODO: for real\n\n        const [, path, relationEngineID] = m;\n\n        return {\n            path: [path],\n            params: { relationEngineID }\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.rootState === RootState.DEVELOP) {\n            window.addEventListener('hashchange', (ev: HashChangeEvent) => {\n                const url = new URL(ev.newURL);\n                const hash = url.hash;\n                if (!hash) {\n                    throw new Error('no hash!');\n                }\n                const {\n                    params: { relationEngineID }\n                } = this.parseHash(hash);\n                this.props.navigate(relationEngineID);\n                // console.log('hash?', hash);\n            });\n            const hash = window.location.hash;\n            // console.log('hash?', hash);\n            if (hash) {\n                const {\n                    params: { relationEngineID }\n                } = this.parseHash(hash);\n                // console.log('nav to ', relationEngineID);\n                this.props.navigate(relationEngineID);\n            } else {\n                // TODO: remove?\n                this.props.navigate('ncbi_taxon:562');\n            }\n        }\n    }\n\n    render() {\n        if (!this.props.token) {\n            return this.renderUnauthorized();\n        }\n        return (\n            <div className=\"Col scrollable\">\n                <div className=\"Row-auto\">{this.renderRootState()}</div>\n                <div className=\"Row  scrollable\">{this.renderNavigation()}</div>\n            </div>\n        );\n    }\n}\n","import { StoreState, RelationEngineID, Navigation } from '../../redux/store';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { connect } from 'react-redux';\nimport { Dispatcher } from './Dispatcher';\nimport { RootState } from '@kbase/ui-lib/lib/redux/root/store';\nimport { navigate } from '../../redux/actions';\n\ninterface OwnProps {}\n\ninterface StateProps {\n    token: string | null;\n    rootState: RootState;\n    // view: RelationEngineView;\n    // viewState: ViewStatus;\n    navigation: Navigation;\n    trigger: number;\n}\n\ninterface DispatchProps {\n    navigate: (relationEngineID: RelationEngineID) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        root: { state: rootState },\n        navigation,\n        trigger\n    } = state;\n\n    // Auth integration.\n    let token;\n    if (!userAuthorization) {\n        token = null;\n    } else {\n        token = userAuthorization.token;\n    }\n\n    return { token, rootState, navigation, trigger };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        navigate: (relationEngineID: RelationEngineID) => {\n            dispatch(navigate(relationEngineID) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Dispatcher);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createReduxStore } from './redux/store';\nimport { AppBase } from '@kbase/ui-lib';\nimport './App.css';\nimport Dispatcher from './components/dispatcher';\nimport { Unsubscribe } from 'redux';\nimport { navigate } from './redux/actions';\n\nconst store = createReduxStore();\n\ninterface AppProps {}\n\ninterface AppState {}\n\nexport default class App<AppProps, AppState> extends React.Component {\n    storeSubscription: Unsubscribe | null;\n    constructor(props: AppProps) {\n        super(props);\n        this.storeSubscription = null;\n    }\n    componentDidMount() {\n        let last: {\n            view: string | null;\n            params: { [key: string]: string };\n        } = {\n            view: null,\n            params: {}\n        };\n        this.storeSubscription = store.subscribe(() => {\n            const state = store.getState();\n            if (!state) {\n                return;\n            }\n            const {\n                app: {\n                    runtime: { navigation }\n                }\n            } = state;\n\n            const view = navigation.view;\n            const params = navigation.params as { [key: string]: string };\n\n            // console.log('store changed', navigation);\n\n            if (\n                view !== last.view ||\n                last.params === null ||\n                Object.keys(params).some((key) => {\n                    return params[key] !== last.params[key];\n                })\n            ) {\n                last.params = params;\n                last.view = view;\n                // console.log('yahoo', view, params);\n                // TODO: store may change but there is not navigation yet.\n                if (params['relationEngineID']) {\n                    store.dispatch(navigate(params['relationEngineID']) as any);\n                }\n            }\n        });\n    }\n    render() {\n        return (\n            <Provider store={store}>\n                <AppBase>\n                    <div className=\"App Col scrollable\">\n                        <Dispatcher />\n                    </div>\n                </AppBase>\n            </Provider>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}