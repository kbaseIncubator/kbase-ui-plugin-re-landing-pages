{"version":3,"sources":["redux/store/view.ts","lib/RelationEngineAPIClient.ts","types/index.ts","types/taxonomy.ts","types/ontology.ts","redux/actions/index.ts","redux/reducers/index.ts","redux/store/index.ts","lib/DB.ts","landingPages/taxonomy/lib/model.ts","landingPages/taxonomy/lib/TaxonAPIClient.ts","landingPages/taxonomy/main/TaxonDB.ts","landingPages/taxonomy/SourceInfo.tsx","landingPages/taxonomy/TaxonItem.tsx","landingPages/taxonomy/taxonChildren/TaxonChildrenDB.ts","landingPages/taxonomy/TaxonList.tsx","components/ErrorView.tsx","landingPages/taxonomy/taxonChildren/TaxonChildren.tsx","landingPages/taxonomy/taxonChildren/data.tsx","landingPages/taxonomy/taxonChildren/index.ts","landingPages/taxonomy/lineage/LineageDB.ts","landingPages/taxonomy/lineage/Lineage.tsx","landingPages/taxonomy/lineage/data.tsx","landingPages/taxonomy/lineage/index.ts","landingPages/taxonomy/LineageNavigator.tsx","landingPages/taxonomy/TaxonSummary.tsx","landingPages/taxonomy/taxonInfo/TaxonDetailNCBI.tsx","landingPages/taxonomy/taxonInfo/TaxonDetail.tsx","landingPages/taxonomy/lib/props.ts","components/Wikipedia.tsx","landingPages/taxonomy/lib/Wikipedia.ts","components/Loading.tsx","lib/DB2.ts","landingPages/taxonomy/taxonInfo/TaxonDescription.tsx","landingPages/taxonomy/taxonInfo/linkedData/LinkedDataDB.ts","landingPages/taxonomy/taxonInfo/linkedData/view.tsx","landingPages/taxonomy/taxonInfo/linkedData/data.tsx","landingPages/taxonomy/taxonInfo/linkedData/index.ts","landingPages/taxonomy/taxonInfo/TaxonInfo.tsx","landingPages/taxonomy/main/Taxonomy.tsx","landingPages/taxonomy/main/data.tsx","landingPages/taxonomy/main/index.ts","landingPages/taxonomy/index.ts","landingPages/ontology/lib/OntologyAPIClient.ts","landingPages/ontology/lib/model.ts","landingPages/ontology/Main/OntologyDB.ts","landingPages/ontology/TermLink.tsx","landingPages/ontology/Detail/LinkedObjects/LinkedObjectsDB.ts","landingPages/ontology/Detail/LinkedObjects/view.tsx","landingPages/ontology/Detail/LinkedObjects/data.tsx","landingPages/ontology/Detail/LinkedObjects/index.ts","landingPages/ontology/Children/ChildrenDB.ts","landingPages/ontology/Children/view.tsx","landingPages/ontology/Children/data.tsx","landingPages/ontology/Children/index.ts","landingPages/ontology/AncestorGraph/AncestorGraphDB.ts","landingPages/ontology/AncestorGraph/NetworkGraph.tsx","landingPages/ontology/AncestorGraph/view.tsx","landingPages/ontology/AncestorGraph/data.tsx","landingPages/ontology/AncestorGraph/index.ts","landingPages/ontology/Detail/index.tsx","landingPages/ontology/Main/SourceInfo.tsx","landingPages/ontology/Main/TermSummary.tsx","landingPages/ontology/Main/view.tsx","landingPages/ontology/Main/data.tsx","landingPages/ontology/Main/index.ts","landingPages/ontology/index.ts","components/dispatcher/Dispatcher.tsx","components/dispatcher/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SyncViewStatus","AsyncViewStatus","ViewType","RelationEngineAPIClient","relationEngineID","classRe","taxonomyRe","ontologyRe","Promise","resolve","reject","m","exec","collection","rest","length","Error","timestamp","namespace","id","timestampString","parseInt","Date","now","created","expired","getTime","DynamicServiceClient","module","ObjectClass","LoadingStatus","RelationEngineCollection","TaxonomyNamespace","OntologyNamespace","OntologySource","OntologyRelation","GOSynonymScope","AppActions","relationEngineCollectionToString","TAXONOMY","ONTOLOGY","taxonomyNamespaceToString","NCBI","GTDB","stringToTaxonomyNamespace","stringToOntologyNamespace","GO","ontologyNamespaceToString","navigateSuccess","navigation","type","NAVIGATE_SUCCESS","navigate","dispatch","getState","a","NAVIGATE_START","userAuthorization","auth","url","app","config","services","ServiceWizard","reClient","token","getNodeInfo","nodeInfo","ref","console","error","message","NAVIGATE_ERROR","state","action","trigger","RelationEngineNodeType","ViewStatus","reducer","baseState","baseReducer","makeInitialStoreState","makeBaseStoreState","NONE","view","status","DBStatus","WorkspaceType","DB","props","db","stopped","onUpdate","this","data","initialData","updateFun","forceComponentUpdate","TaxonomyAPIClient","ns","ts","params","callFunc","result","offset","limit","searchTerm","search_text","taxon_ns","taxon_id","log","TaxonomyModel","taxonomyClient","TaxonAPIClient","taxonRef","getLineage","taxons","results","map","taxonResult","isBiological","scientific_name","name","rank","ncbiID","NCBI_taxon_id","geneticCode","gencode","aliases","category","options","getChildren","taxa","total_count","getTaxon","taxon","getAssociatedWorkspaceObjects","linkedObjects","workspaceType","title","ws_obj","workspace","narr_name","NARRATIVE","refdata_source","REFDATA","UNKNOWN","linkedAt","edge","updated_at","objectID","object_id","workspaceID","workspace_id","version","objectName","createdAt","epoch","workspaceUpdatedAt","module_name","type_name","majorVersion","maj_ver","minorVersion","min_ver","totalCount","TaxonDB","set","LOADING","client","LOADED","targetTaxon","selectedTaxon","ERROR","code","source","SourceInfo","className","src","style","height","alt","width","href","target","rel","React","Component","TaxonItem","hovering","selectTaxonRef","hash","String","join","window","parent","location","ev","setState","Fragment","onClick","clickNavigateToTaxon","bind","clickTaxon","isActive","renderActive","renderOver","renderNormal","classNames","push","tooltipTitle","borderBottom","placement","key","onMouseEnter","onMouseLeave","renderItem","TaxonChildrenDB","serviceWizardURL","page","pageSize","RELOADING","total","TaxonList","navigateToTaxonRef","index","selectedTaxonRef","selectTaxon","navigateToTaxon","description","image","PRESENTED_IMAGE_SIMPLE","renderNoItems","renderItemsPlain","ErrorView","color","renderMessage","TaxonChildren","fetchChildren","Intl","NumberFormat","useGrouping","format","currentItem","lastItem","size","renderTitleLoaded","renderTitleReLoading","term","disabled","marginBottom","Search","placeholder","onSearch","doSearch","totalItems","maxItems","tip","renderTaxaLoaded","renderTaxaNone","renderTaxaLoading","renderTaxaReLoading","renderTaxaError","showLessItems","hideOnSinglePage","defaultPageSize","current","onChange","changePage","renderPaginationNone","renderPaginationLoading","renderPaginationError","renderPaginationLoaded","renderPaginationReLoading","renderTitle","renderSearch","renderPagination","renderTaxa","renderChildren","Data","forceUpdate","get","renderError","renderSuccess","connect","DataComponent","LineageDB","lineage","Lineage","renderLoading","renderLoaded","LineageNavigator","count","selectedRef","overflowY","renderLineage","renderTargetTaxon","TaxonSummary","nameStyle","fontStyle","geneticCodesMap","geneticCodes","Array","ensureGeneticCodes","reduce","label","Map","TaxonDetailNCBI","stringSorter","b","fixedA","replace","fixedB","localeCompare","dataSource","pagination","scroll","y","rowKey","bordered","Column","dataIndex","defaultSortOrder","sorter","renderAliases","renderTaxonDetail","TaxonDetail","getProp","obj","propPath","defaultValue","split","TypeError","temp","i","undefined","AsyncComponentLoadingState","NotFound","WIKIPEDIA_API_URL","Wikipedia","proposedTerm","chars","validChar","filter","char","lookupTerm","scrubTerm","getWikipediaInfo","then","imageUrl","pageUrl","introText","pageId","matchingTerms","exactMatch","getPage","wikiResponse","all","getImage","parse","pageid","getPageInfo","pageInfo","terms","fetchPage","apiUrl","URL","query","searchParams","fetch","toString","method","headers","accept","json","pop","ex","catch","err","apiURL","Loading","DBCollectionStatus","wikipediaClient","canceled","WikipediaClient","wikipediaInfo","content","marked","overflow","dangerouslySetInnerHTML","__html","fontSize","textAlign","display","flexDirection","flex","renderMatch","alignSelf","marginLeft","renderWikipediaLogoCredit","paddingRight","marginRight","renderArticle","renderImage","findTerm","updateInfo","renderWikipediaInfo","renderNone","TaxonDescription","renderTaxonDescription","notBiological","SortDirection","AsyncTask","taskFun","hasResult","LinkedDataDB","currentTask","cancel","task","getLinkedObjects","linkedObjectsCollection","newTask","run","isCanceled","sort","LinkedData","setPage","filters","column","sortColumn","sortDirection","direction","ASCENDING","DESCENDING","stringToSortDirection","order","updateView","previousProps","isLoading","linkedObject","position","loading","onChangeTable","render","typeID","headerStyle","tooltip","DateTimeFormat","renderLinkedObjects","lastTaxonRef","fetchLinkedObjects","queryLinkedObjects","TaxonInfo","defaultActiveKey","animated","TabPane","tab","forceRender","Taxonomy","setTitle","span","navigateToTaxonREf","renderTaxonInfo","currentlyNavigatedTaxonRef","getSelectedTaxon","margin","getTargetTaxon","sendTitle","ownProps","relationEngineId","OntologyAPIClient","ids","termNodeToTerm","comments","definition","def","val","goID","isObsolete","synonyms","exact","synonym","pred","narrow","broad","related","stringToTermRelation","relationString","IS_A","PART_OF","HAS_PART","REGULATES","POSITIVELY_REGULATES","NEGATIVELY_REGULATES","OCCURS_IN","ENDS_DURING","HAPPENS_DURING","relationToString","relation","relatedTermToTerm","relatedTerm","OntologyModel","ontologyClient","getTerms","getParents","item","getAssociatedWSObjects","features","forEach","genomeWithFeatures","feature","featureID","feature_id","relatedAt","objectRef","getHierarchicalAncestors","relations","some","r","from","to","relationsMap","nodes","has","isRoot","termsGraph","values","OntologyDB","termRef","getTerm","targetTerm","selectedTerm","TermLink","newWindow","renderGOLink","LinkedObjectsDB","getRelatedFeatures","LinkedObjects","row","origin","search","renderTable","ParentsDB","OntologyList","renderRelation","renderItemsTable","currentlyNavigatedOntologyRef","getChildrenTerms","AncestorGraphDB","getAncestorGraph","node","graph","NetworkGraph","networkGraphNode","graphNode","network","createRef","DataSet","add","isTerm","border","shape","edges","e","arrows","layout","hierarchical","enabled","sortMethod","nodeSpacing","physics","highlight","background","top","right","bottom","left","Network","on","nodeID","selectNodeID","selectedNodeID","selectNodes","mountGraph","addEventListener","onResize","graphHeight","clientHeight","setSize","redraw","AncestorGraph","termNode","rowSelection","fixed","hideDefaultSelections","selectedRowKeys","cursor","selectGraphNode","isSelected","Detail","s","comment","index2","renderComments","renderAllSynonyms","renderSynonyms","Children","tabs","component","renderGraph","renderDetail","justifyContent","TermSummary","OntologyView","renderLayout","setSelectedTerm","selectTerm","navigateToTerm","getTargetTerm","Main","Dispatcher","rootState","RootState","HOSTED","DEVELOP","renderNavigationNone","renderNavigationSome","path","newURL","parseHash","renderRootState","renderNavigation","renderUnauthorized","root","store","createStore","compose","applyMiddleware","thunk","App","storeUnsubscribe","last","subscribe","runtime","Object","keys","required","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+iDAWYA,EAqDAC,EAiCAC,E,sKAtFAF,O,eAAAA,I,mBAAAA,I,kBAAAA,M,cAqDAC,O,eAAAA,I,qBAAAA,I,mBAAAA,I,kBAAAA,M,cAiCAC,O,eAAAA,I,uBAAAA,I,wBAAAA,M,iBCzDSC,E,6NAECC,G,kFACRC,EAAU,gBACVC,EAAa,mCACbC,EAAa,mC,kBACZ,IAAIC,SAA6B,SAACC,EAASC,GAC9C,IAAIC,EAAIN,EAAQO,KAAKR,GACrB,GAAKO,EAAL,CAFyD,MAM5BA,EAN4B,mBAMhDE,EANgD,KAMpCC,EANoC,KAQzD,OAAQD,GACJ,IAAK,YAAY,WAEb,GADAF,EAAIL,EAAWM,KAAKE,GACpB,CAIiB,IAAbH,EAAEI,QACFL,EAAO,IAAIM,MAAM,+BAAiCZ,EAAmB,MAPrD,IAUhBa,EAVgB,EASuBN,EATvB,mBASXO,EATW,KASAC,EATA,KASIC,EATJ,KAiBpB,OAHIH,EAHCG,EAGWC,SAASD,EAAiB,IAF1BE,KAAKC,MAKbL,GACJ,IAAK,gBAWD,YAVAT,EAAQ,CACJ,CACII,WAAY,WACZK,UAAWA,EACXC,GAAIA,EACJF,YACAO,QAASF,KAAKC,MACdE,QAAS,IAAIH,KAAK,KAAM,EAAG,GAAGI,aAI1C,QACIhB,EAAO,IAAIM,MAAM,oCAAsCE,EAAY,YA5BvER,EAAO,IAAIM,MAAM,qBAHR,GAmCb,MACJ,IAAK,WAED,KADAL,EAAIJ,EAAWK,KAAKE,IAGhB,YADAJ,EAAO,IAAIM,MAAM,qBAHzB,IAOQC,EAPR,EAM+CN,EAN/C,mBAMaO,EANb,KAMwBC,EANxB,KAM4BC,EAN5B,KAaI,OAJIH,EADAG,EACYC,SAASD,GAETE,KAAKC,MAEbL,GACJ,IAAK,KAWD,YAVAT,EAAQ,CACJ,CACII,WAAY,WACZK,YACAC,KACAF,YACAO,QAASF,KAAKC,MACdE,QAAS,IAAIH,KAAK,KAAM,EAAG,GAAGI,aAI1C,QAEI,YADAhB,EAAO,IAAIM,MAAM,iCAAmCE,EAAY,MAG5E,QACIR,EAAO,IAAIM,MAAJ,qBAAwBH,EAAxB,uCAzEXH,EAAO,IAAIM,MAAM,8BAAgCZ,Q,uGATZuB,wBAAhCxB,EACVyB,OAAiB,sB,ICVhBC,EAKAC,EAwBAC,EC1DAC,ECEAC,EAmCAC,EAGAC,EAoDAC,ECpFAC,E,SHKZ,YAAiCrB,OAkD1B,SAASsB,EAAiCzB,GAC7C,OAAQA,GACJ,KAAKkB,EAAyBQ,SAC1B,MAAO,WACX,KAAKR,EAAyBS,SAC1B,MAAO,YC/DZ,SAASC,EAA0BvB,GACtC,OAAQA,GACJ,KAAKc,EAAkBU,KACnB,MAAO,gBACX,KAAKV,EAAkBW,KACnB,MAAO,QAIZ,SAASC,EAA0B1B,GACtC,OAAQA,GACJ,IAAK,gBACD,OAAOc,EAAkBU,KAC7B,IAAK,OACD,OAAOV,EAAkBW,KAC7B,QACI,MAAM,IAAI3B,MAAM,2BAA6BE,EAAY,MCf9D,SAAS2B,EAA0B3B,GACtC,OAAQA,GACJ,IAAK,KACD,OAAOe,EAAkBa,GAC7B,QACI,MAAM,IAAI9B,MAAM,qCAAuCE,IAI5D,SAAS6B,EAA0B7B,GACtC,OAAQA,GACJ,KAAKe,EAAkBa,GACnB,MAAO,MC6BZ,SAASE,EACZC,GAEA,MAAO,CACHC,KAAMb,EAAWc,iBACjBF,cAID,SAASG,EAAShD,GACrB,8CAAO,WAAOiD,EAAmDC,GAA1D,2BAAAC,EAAA,yDACHF,EAvBG,CACHH,KAAMb,EAAWmB,iBAqBd,EAYCF,IARQG,EAJT,EAICC,KAAQD,kBAIqBE,EAR9B,EAKCC,IACIC,OACIC,SACIC,cAAiBJ,IAM5BF,EAdF,wDAkBGO,EAAW,IAAI7D,EAAwB,CACzCwD,MACAM,MAAOR,EAAkBQ,QApB1B,kBAwB0BD,EAASE,YAAY9D,GAxB/C,mCAwBQ+D,EAxBR,UAyBSA,EAAStD,WAzBlB,OA0BU,aA1BV,QAkDU,aAlDV,gCA+BSwC,EAASL,EAAgB,CACrBE,KAAMhD,EAASqC,SACf6B,IAAK,CACDvD,WAAYkB,EAAyBQ,SACrCrB,UAAW0B,EAA0BuB,EAASjD,WAC9CC,GAAIgD,EAAShD,GACbF,UAAWkD,EAASlD,cArCrC,oCAmDSoC,EAASL,EAAgB,CACrBE,KAAMhD,EAASsC,SACf4B,IAAK,CACDvD,WAAYkB,EAAyBS,SACrCtB,UAAW2B,EAA0BsB,EAASjD,WAC9CC,GAAIgD,EAAShD,GACbF,UAAWkD,EAASlD,cAzDrC,+EA+DCoD,QAAQC,MAAM,QAAd,MACAjB,GAjFkBkB,EAiFK,KAAGA,QAhF3B,CACHrB,KAAMb,EAAWmC,eACjBD,aAcG,kCAjBJ,IAAuBA,IAiBnB,qBAAP,qDAAM,G,8NCtDV,SAASvB,EAAgByB,EAAmBC,GACxC,O,yVAAO,CAAP,GACOD,EADP,CASIxB,WAAYyB,EAAOzB,WACnB0B,QAASrD,KAAKC,S,SJeVM,O,uBAAAA,I,wBAAAA,M,cAKAC,O,eAAAA,I,qBAAAA,I,mBAAAA,I,kBAAAA,M,cAwBAC,O,uBAAAA,I,wBAAAA,M,cC1DAC,O,eAAAA,I,gBAAAA,M,cCEAC,O,YAAAA,M,cAmCAC,O,YAAAA,M,cAGAC,K,6BAAAA,E,mCAAAA,E,qCAAAA,E,uCAAAA,E,4DAAAA,E,4DAAAA,E,sCAAAA,E,0CAAAA,E,iDAAAA,M,cAoDAC,O,iBAAAA,I,mBAAAA,I,iBAAAA,I,sBAAAA,M,cCpFAC,K,kDAAAA,E,8DAAAA,E,kEAAAA,E,+DAAAA,M,KCmBZ,ICfYuC,EAKAC,ED2BGC,EAjB0C,SAACL,EAA+BC,GACrF,IAAMK,EAAYC,sBAAYP,EAAyBC,GACvD,GAAIK,EACA,OAAOA,EAEX,IAAKN,EACD,OAAOA,EAEX,OAAQC,EAAOxB,MAGX,KAAKb,EAAWc,iBACZ,OAAOH,EAAgByB,EAAOC,GAEtC,OAAOD,G,8NCuEJ,SAASQ,IAEZ,O,yVAAO,IADgBC,+BACvB,CAGIjC,WAAY,CACRC,KAAMhD,EAASiF,MAEnBR,QAAS,EACTS,KAAM,CACFC,OAAQpF,EAAgBkF,S,SA9GxBP,O,iBAAAA,I,kCAAAA,M,cAKAC,O,eAAAA,I,qBAAAA,I,mBAAAA,I,kBAAAA,M,sBCRAS,E,kBAAAA,O,eAAAA,I,qBAAAA,I,mBAAAA,I,yBAAAA,I,kBAAAA,M,SCWAC,EDkBSC,E,WAIjB,WAAYC,GAAoB,yBAHhCC,QAG+B,OAF/BC,aAE+B,OAD/BC,cAC+B,EAC3BC,KAAKD,SAAWH,EAAMG,SACtBC,KAAKH,GAAK,CACNI,KAAML,EAAMM,aAEhBF,KAAKF,SAAU,E,mEAIXE,KAAKF,SAGTE,KAAKD,a,0BAGLI,GACAH,KAAKH,GAAGI,KAAOE,EAAUH,KAAKH,GAAGI,MACjCD,KAAKI,yB,4BAIL,OAAOJ,KAAKH,GAAGI,O,6BAIfD,KAAKF,SAAU,M,KEkGFO,G,yTAGEC,E,EAAAA,GAAIhF,E,EAAAA,GAAIiF,E,EAAAA,GACjBC,EAA2B,CAC7BF,KAAIhF,KAAIiF,M,SAEWP,KAAKS,SAAiD,cAAe,CACxFD,I,0CADGE,E,uBAGAA,G,mRAIPJ,E,EAAAA,GACAhF,E,EAAAA,GACAiF,E,EAAAA,GACAI,E,EAAAA,OACAC,E,EAAAA,MACAC,E,EAAAA,W,SASuBb,KAAKS,SAAmD,eAAgB,CAC3F,CACIH,KAAIhF,KAAIiF,KACRI,SACAC,QACAE,YAAaD,K,0CALdH,E,uBAQAA,G,4QAGMJ,E,EAAAA,GAAIhF,E,EAAAA,GAAIiF,E,EAAAA,GACfC,EAAyB,CAC3BF,KAAIhF,KAAIiF,M,SAEWP,KAAKS,SAA6C,YAAa,CAClFD,I,0CADGE,E,uBAGAA,G,qSAIPK,E,EAAAA,SACAC,E,EAAAA,SACAT,E,EAAAA,GACAI,E,EAAAA,OACAC,E,EAAAA,MAQMJ,EAA8C,CAChDO,WAAUC,WAAUT,KAAIK,QAAOD,U,SAEZX,KAAKS,SAAuF,4BAA6B,CAC5ID,I,0CADGE,E,KAGPlC,QAAQyC,IAAI,aAAcP,G,kBACnBA,G,4GArEgC5E,wBAA1BuE,GACVtE,OAAiB,kB,SDlJhB2D,O,qBAAAA,I,yBAAAA,I,sBAAAA,M,KA6BL,IAAMwB,GAAb,WAEI,cAA6D,IAA/C9C,EAA8C,EAA9CA,MAAON,EAAuC,EAAvCA,IAAuC,yBAD5DqD,oBAC4D,EACxDnB,KAAKmB,eAAiB,IAAIC,GAAe,CAAEhD,QAAON,QAH1D,gGAMqBuD,GANrB,sFAQYhG,EACAgG,EADAhG,UAAWC,EACX+F,EADW/F,GAAIF,EACfiG,EADejG,UAR3B,SAU6B4E,KAAKmB,eAAeG,WAAW,CAChDhB,GAAI1D,EAA0BvB,GAC9BC,KACAiF,GAAInF,IAbhB,cAUcsF,EAVd,OAgBca,EAA2Bb,EAAOc,QAAQC,KAAI,SAACC,GACjD,IAAIC,EAMJ,OAJIA,EADgC,SAAhCD,EAAYE,iBAA8D,uBAAhCF,EAAYE,gBAKnD,CACHrD,IAAK,CACDvD,WAAYkB,EAAyBQ,SACrCrB,UAAWc,EAAkBU,KAC7BvB,GAAIoG,EAAYpG,GAChBF,UAAWsF,EAAOH,IAEtBsB,KAAMH,EAAYE,gBAClBE,KAAMJ,EAAYI,KAClBC,OAAQL,EAAYM,cACpBC,YAAazG,SAASkG,EAAYQ,SAClCC,QAAST,EAAYS,QAAQV,KAAI,YAC7B,MAAO,CACHI,KAFiD,EAArBA,KAG5BO,SAHiD,EAAfA,aAM1CT,mBAxChB,kBA2CeJ,GA3Cf,kLA8CsBF,EAA0BgB,GA9ChD,sFAgDYhH,EACAgG,EADAhG,UAAWC,EACX+F,EADW/F,GAAIF,EACfiG,EADejG,UAhD3B,SAmD6B4E,KAAKmB,eAAemB,YAAY,CACjDhC,GAAI1D,EAA0BvB,GAC9BC,KACAiF,GAAInF,EACJuF,OAAQ0B,EAAQ1B,OAChBC,MAAOyB,EAAQzB,MACfC,WAAYwB,EAAQxB,aAzDhC,cAmDcH,EAnDd,OA4Dc6B,EAAyB7B,EAAOc,QAAQC,KAAI,SAACC,GAC/C,IAAIC,EAMJ,OAJIA,EADgC,SAAhCD,EAAYE,iBAA8D,uBAAhCF,EAAYE,gBAKnD,CACHrD,IAAK,CACDvD,WAAYkB,EAAyBQ,SACrCrB,UAAWc,EAAkBU,KAC7BvB,GAAIoG,EAAYpG,GAChBF,UAAWsF,EAAOH,IAEtBsB,KAAMH,EAAYE,gBAClBE,KAAMJ,EAAYI,KAClBC,OAAQL,EAAYM,cACpBC,YAAazG,SAASkG,EAAYQ,SAClCC,QAAST,EAAYS,QAAQV,KAAI,YAC7B,MAAO,CACHI,KAFiD,EAArBA,KAG5BO,SAHiD,EAAfA,aAM1CT,mBApFhB,kBAuFe,CAACY,EAAM7B,EAAO8B,cAvF7B,iLAoLmBnB,GApLnB,0FAsLYhG,EACAgG,EADAhG,UAAWC,EACX+F,EADW/F,GAAIF,EACfiG,EADejG,UAtL3B,SAyL6B4E,KAAKmB,eAAesB,SAAS,CAC9CnC,GAAI1D,EAA0BvB,GAC9BC,KACAiF,GAAInF,IA5LhB,cAyLcsF,EAzLd,OAkMcgB,EAAchB,EAAOc,QAAQ,GAG/BG,EADgC,SAAhCD,EAAYE,iBAA8D,uBAAhCF,EAAYE,gBAQpDc,EAAe,CACjBnE,IAAK,CACDvD,WAAYkB,EAAyBQ,SACrCrB,UAAWc,EAAkBU,KAC7BvB,GAAIoG,EAAYpG,GAChBF,UAAWsF,EAAOH,IAEtBsB,KAAMH,EAAYE,gBAClBE,KAAMJ,EAAYI,KAClBC,OAAQL,EAAYM,cACpBC,YAAazG,SAASkG,EAAYQ,SAClCC,QAAST,EAAYS,QAAQV,KAAI,YAC7B,MAAO,CACHI,KAFiD,EAArBA,KAG5BO,SAHiD,EAAfA,aAM1CT,gBA7NZ,kBA+Nee,GA/Nf,uLAkO2BrB,EAA0BgB,GAlOrD,kFAmOc7B,EAAS,CACXO,SAAUnE,EAA0ByE,EAAShG,WAC7C2F,SAAUK,EAAS/F,GACnBiF,GAAIc,EAASjG,UACbuF,OAAQ0B,EAAQ1B,OAChBC,MAAOyB,EAAQzB,OAxO3B,SA0O6BZ,KAAKmB,eAAewB,8BAA8BnC,GA1O/E,cA0OcE,EA1Od,OA4OckC,EAAgBlC,EAAOc,QAAQC,KAAI,SAACf,GACtC,IAAImC,EACAC,EAWJ,OAVIpC,EAAOqC,OAAOC,UAAUC,WACxBJ,EAAgBnD,EAAcwD,UAC9BJ,EAAQpC,EAAOqC,OAAOC,UAAUC,WACzBvC,EAAOqC,OAAOC,UAAUG,gBAC/BN,EAAgBnD,EAAc0D,QAC9BN,EAAQpC,EAAOqC,OAAOC,UAAUG,eAAiB,oBAEjDN,EAAgBnD,EAAc2D,QAC9BP,EAAQ,0BAEL,CACHQ,SAAU5C,EAAO6C,KAAKC,WACtBC,SAAU/C,EAAOqC,OAAOW,UACxBC,YAAajD,EAAOqC,OAAOa,aAC3BC,QAASnD,EAAOqC,OAAOc,QACvBC,WAAYpD,EAAOqC,OAAOlB,KAC1BkC,UAAWrD,EAAOqC,OAAOiB,MACzBC,mBAAoBvD,EAAOqC,OAAOS,WAClCnG,KAAM,CACFtB,OAAQ2E,EAAOqC,OAAO1F,KAAK6G,YAC3BrC,KAAMnB,EAAOqC,OAAO1F,KAAK8G,UACzBC,aAAc1D,EAAOqC,OAAO1F,KAAKgH,QACjCC,aAAc5D,EAAOqC,OAAO1F,KAAKkH,SAErC1B,gBACAC,YAxQhB,kBA2Qe,CACHF,gBACA4B,WAAY9D,EAAO8B,cA7Q/B,gH,ikBE7BqBiC,G,YAEjB,WAAY7E,GAAsB,IAAD,8BAC7B,4CAAMA,KAFVA,WACiC,EAE7B,EAAKA,MAAQA,EAFgB,E,qHAIZyB,G,yFAEbrB,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEIY,OAAQC,EAASkF,aAInBC,EAAS,IAAI1D,GAAc,CAC7B9C,MAAO4B,KAAKJ,MAAMxB,MAClBN,IAAKkC,KAAKJ,MAAM5B,OAAOC,SAASC,cAAcJ,M,SAG9B8G,EAAOnC,SAASpB,G,OAA9BqB,E,OACN1C,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEIY,OAAQC,EAASoF,OACjBC,YAAapC,EACbqC,cAAerC,O,gDAIvBlE,QAAQC,MAAM,QAAd,MACAuB,KAAK0E,KAAI,SAAC9F,GACN,MAAO,CACHY,OAAQC,EAASuF,MACjBvG,MAAO,CACHwG,KAAM,YACNC,OAAQ,yBACRxG,QAAS,KAAGA,a,gMAOT2C,G,yFASTuD,EAAS,IAAI1D,GAAc,CAC7B9C,MAAO4B,KAAKJ,MAAMxB,MAClBN,IAAKkC,KAAKJ,MAAM5B,OAAOC,SAASC,cAAcJ,M,SAG9B8G,EAAOnC,SAASpB,G,OAA9BqB,E,OACN1C,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEImG,cAAerC,O,gDAIvBlE,QAAQC,MAAM,QAAd,MACAuB,KAAK0E,KAAI,SAAC9F,GACN,MAAO,CACHY,OAAQC,EAASuF,MACjBvG,MAAO,CACHwG,KAAM,YACNC,OAAQ,2BACRxG,QAAS,KAAGA,a,qHAzECiB,G,sCCfxBwF,I,OAAb,iLAEQ,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKC,IAAI,uBAAuBC,MAAO,CAAEC,OAAQ,QAAUC,IAAI,eAEnE,yBAAKJ,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,qBAAqBE,MAAO,CAAEG,MAAO,QAApD,UAGA,yBAAKL,UAAU,qBACX,uBACIM,KAAK,+CACLC,OAAO,SACPC,IAAI,uBAHR,UASR,yBAAKR,UAAU,iBACX,yBAAKA,UAAU,qBAAqBE,MAAO,CAAEG,MAAO,QAApD,WAGA,yBAAKL,UAAU,qBAAf,wBA3B5B,GAAgCS,IAAMC,Y,yBCUjBC,I,mBACjB,WAAYnG,GAAe,IAAD,8BACtB,4CAAMA,KACDhB,MAAQ,CACToH,UAAU,GAHQ,E,0EAOtBhG,KAAKJ,MAAMqG,eAAejG,KAAKJ,MAAM8C,MAAMnE,O,6CAI3C,IAAM2H,EAAO,CACT,SACAzJ,EAAiCuD,KAAKJ,MAAM8C,MAAMnE,IAAIvD,YACtD4B,EAA0BoD,KAAKJ,MAAM8C,MAAMnE,IAAIlD,WAC/C2E,KAAKJ,MAAM8C,MAAMnE,IAAIjD,GACrB6K,OAAOnG,KAAKJ,MAAM8C,MAAMnE,IAAInD,YAC9BgL,KAAK,KAGHC,OAAOC,OACPD,OAAOC,OAAOC,SAASL,KAAOA,EAE9BG,OAAOE,SAASL,KAAOA,I,mCAMlBM,GACTxG,KAAKyG,SAAS,CAAET,UAAU,M,mCAGjBQ,GACTxG,KAAKyG,SAAS,CAAET,UAAU,M,mCAI1B,OACI,kBAAC,IAAMU,SAAP,KACI,yBAAKtB,UAAU,iBAAiBuB,QAAS3G,KAAK4G,qBAAqBC,KAAK7G,OACnEA,KAAKJ,MAAM8C,MAAMb,MAEtB,yBAAKuD,UAAU,sBAAsBuB,QAAS3G,KAAK8G,WAAWD,KAAK7G,OAC/D,uBAAM3C,KAAK,oB,qCAOvB,OACI,kBAAC,IAAMqJ,SAAP,KACI,yBAAKtB,UAAU,iBAAiBuB,QAAS3G,KAAK4G,qBAAqBC,KAAK7G,OACnEA,KAAKJ,MAAM8C,MAAMb,MAEtB,yBAAKuD,UAAU,uBACX,uBAAM/H,KAAK,oB,qCAOvB,OACI,kBAAC,IAAMqJ,SAAP,KACI,yBAAKtB,UAAU,kBAAkBpF,KAAKJ,MAAM8C,MAAMb,S,mCAM1D,OAAI7B,KAAKJ,MAAMmH,SACJ/G,KAAKgH,eAEZhH,KAAKpB,MAAMoH,SACJhG,KAAKiH,aAELjH,KAAKkH,iB,+BAKhB,IAAMxE,EAAQ1C,KAAKJ,MAAM8C,MACnByE,EAAa,CAAC,aAChBnH,KAAKJ,MAAMmH,UACXI,EAAWC,KAAK,oBAGpB,IAAMC,EACF,6BACI,yBAAK/B,MAAO,CAAEgC,aAAc,qBAAuB5E,EAAMb,MACzD,6BAAMa,EAAMZ,OAIpB,OACI,wBAASgB,MAAOuE,EAAcE,UAAU,SACpC,yBACInC,UAAW+B,EAAWf,KAAK,KAC3BoB,IAAKxH,KAAKJ,MAAM8C,MAAMnE,IAAIjD,GAC1BmM,aAAczH,KAAKyH,aAAaZ,KAAK7G,MACrC0H,aAAc1H,KAAK0H,aAAab,KAAK7G,OAEpCA,KAAK2H,mB,GAzGa9B,IAAMC,Y,mlBC0BxB8B,G,YAGjB,WAAYhI,GAAsB,IAAD,8BAC7B,4CAAMA,KAHVxB,WAEiC,IADjCyJ,sBACiC,EAE7B,EAAKzJ,MAAQwB,EAAMxB,MACnB,EAAKyJ,iBAAmBjI,EAAM5B,OAAOC,SAASC,cAAcJ,IAH/B,E,yNAiD7BuD,E,EAAAA,SACAyG,E,EAAAA,KACAC,E,EAAAA,SACAlH,E,EAAAA,W,SAQIb,KAAK0E,KAAI,SAAC9F,GACN,OAAIA,EAAMY,SAAWC,EAASoF,OACnB,MACAjG,EADP,CAEIY,OAAQC,EAASuI,YAGd,MACApJ,EADP,CAEIY,OAAQC,EAASkF,aAKvBC,EAAS,IAAI1D,GAAc,CAC7B9C,MAAO4B,KAAK5B,MACZN,IAAKkC,KAAK6H,mBAGRlH,GAAUmH,EAAO,GAAKC,EACtBnH,EAAQmH,E,SAEmBnD,EAAOtC,YAAYjB,EAAU,CAC1DV,SACAC,QACAC,e,mCAHG0B,E,KAAMiC,E,KAKbxE,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEIY,OAAQC,EAASoF,OACjBtC,OACA0F,MAAOzD,EACPsD,OACAC,gB,kDAIRvJ,QAAQC,MAAM,QAAd,MACAuB,KAAK0E,KAAI,SAAC9F,GACN,MAAO,CACHY,OAAQC,EAASuF,MACjBvG,MAAO,CACHwG,KAAM,YACNC,OAAQ,gCACRxG,QAAS,KAAGA,a,sHA5GSiB,G,0EC1BxBuI,I,2LACL3J,GACRyB,KAAKJ,MAAMqG,eAAe1H,K,sCAEdA,GACZyB,KAAKJ,MAAMuI,mBAAmB5J,K,yCAEd,IAAD,OACf,OAAOyB,KAAKJ,MAAM2C,KAAKd,KAAI,SAACiB,EAAO0F,GAC/B,IAAMrB,EAA2C,OAAhC,EAAKnH,MAAMyI,kBACxB,EAAKzI,MAAMyI,iBAAiB/M,KAAOoH,EAAMnE,IAAIjD,GACjD,OACI,kBAAC,GAAD,CACIoH,MAAOA,EACPqE,SAAUA,EACVd,eAAgB,EAAKqC,YAAYzB,KAAK,GACtCW,IAAKrB,OAAOiC,GACZD,mBAAoB,EAAKI,gBAAgB1B,KAAK,U,sCAM1D,OAAO,wBAAO2B,YAAY,cAAcC,MAAO,KAAMC,2B,+BAGrD,OAA+B,IAA3B1I,KAAKJ,MAAM2C,KAAKrH,OACT8E,KAAK2I,gBAET3I,KAAK4I,uB,GA7BmB/C,IAAMC,YCLxB+C,I,+LAEb,OAEI,8BACI,uBAAMxL,KAAK,qBAAqBiI,MAAO,CAAEwD,MAAO,SAC/C,IACA9I,KAAKJ,MAAMnB,MAAMC,W,+BAK1B,OACI,wBAAOrB,KAAK,QAAQqB,QAASsB,KAAK+I,sB,GAbPlD,IAAMC,YCYxBkD,G,YAIjB,WAAYpJ,GAAe,IAAD,8BACtB,4CAAMA,KAJViB,gBAG0B,IAF1BiH,UAE0B,IAD1BC,cAC0B,EAEtB,EAAKlH,WAAa,GAClB,EAAKiH,KAAO,EACZ,EAAKC,SAAW,KAJM,E,iFAOtB/H,KAAKJ,MAAMqJ,cAAcjJ,KAAKJ,MAAMyB,SAAU,EA1B5B,GA0BkD,M,uCAGpE,OAAO,uC,0CAGP,OAAO,uBAAMhE,KAAK,c,wCAGJwC,GACd,GAAiB,IAAbA,EAAGoI,MACH,OAAO,yBAAK7C,UAAU,oCAAf,eAGX,IAAMZ,EAAa0E,KAAKC,aAAa,QAAS,CAC1CC,aAAa,IACdC,OAAOxJ,EAAGoI,OACPqB,GAAezJ,EAAGiI,KAAO,GAAKjI,EAAGkI,SAAW,EAC5CwB,EAAWD,EAAczJ,EAAG0C,KAAKrH,OAAS,EAEhD,OACI,yBAAKkK,UAAU,oCAAf,aACekE,EADf,IAC6BC,EAD7B,OAC2C/E,EAD3C,O,2CAMa3E,GACjB,OAAO,wBAAM2J,KAAK,SAASxJ,KAAKyJ,kBAAkB5J,M,oCAIlD,IAAMA,EAAKG,KAAKJ,MAAMC,GACtB,OAAQA,EAAGL,QACP,KAAKC,EAASH,KACd,KAAKG,EAASkF,QACV,OAAO,2CACX,KAAKlF,EAASuF,MACV,OAAO,kBAAC,GAAD,CAAWvG,MAAOoB,EAAGpB,QAChC,KAAKgB,EAASoF,OACV,OAAO7E,KAAKyJ,kBAAkB5J,GAClC,KAAKJ,EAASuI,UACV,OAAOhI,KAAK0J,qBAAqB7J,M,+BAGpC8J,GACL3J,KAAKa,WAAa8I,EAClB3J,KAAKJ,MAAMqJ,cAAcjJ,KAAKJ,MAAMyB,SAAU,EAAGrB,KAAK+H,UAzEpC,GAyEmE4B,K,qCAGrF,IAAMC,EACF5J,KAAKJ,MAAMC,GAAGL,SAAWC,EAASoF,QACjC7E,KAAKJ,MAAMC,GAAGoI,OAASjI,KAAKJ,MAAMC,GAAGkI,WAAa/H,KAAKa,WAC5D,OACI,yBAAKyE,MAAO,CAAEuE,aAAc,QACxB,uBAAOC,OAAP,CAAcC,YAAY,kBAAkBC,SAAUhK,KAAKiK,SAASpD,KAAK7G,MAAO4J,SAAUA,O,uCAIrF/J,GACb,OACI,kBAAC,IAAM6G,SAAP,KACI,kBAAC,GAAD,CACInE,KAAM1C,EAAG0C,KACT8F,iBAAkBrI,KAAKJ,MAAMyI,iBAC7BpC,eAAgBjG,KAAKJ,MAAMqG,eAC3BkC,mBAAoBnI,KAAKJ,MAAMuI,mBAC/B+B,WAAYrK,EAAGoI,MACfkC,SA9FM,Q,0CAmGFtK,GAChB,OAAO,wBAAMuK,IAAI,WAAWpK,KAAKqK,iBAAiBxK,M,sCAEtCA,GACZ,OAAO,kBAAC,GAAD,CAAWpB,MAAOoB,EAAGpB,U,mCAG5B,OAAQuB,KAAKJ,MAAMC,GAAGL,QAClB,KAAKC,EAASH,KACV,OAAOU,KAAKsK,iBAChB,KAAK7K,EAASkF,QACV,OAAO3E,KAAKuK,oBAChB,KAAK9K,EAASoF,OACV,OAAO7E,KAAKqK,iBAAiBrK,KAAKJ,MAAMC,IAC5C,KAAKJ,EAASuI,UACV,OAAOhI,KAAKwK,oBAAoBxK,KAAKJ,MAAMC,IAC/C,KAAKJ,EAASuF,MACV,OAAOhF,KAAKyK,gBAAgBzK,KAAKJ,MAAMC,O,iCAGxCiI,EAAcC,GACrB/H,KAAK8H,KAAOA,EACZ9H,KAAK+H,SAAWA,GAzHE,GA0HlB/H,KAAKJ,MAAMqJ,cAAcjJ,KAAKJ,MAAMyB,SAAUrB,KAAK8H,KAAM9H,KAAK+H,SAAU/H,KAAKa,c,6CAG7E,OAAO,wBAAY2I,KAAK,QAAQkB,eAAe,EAAMC,kBAAkB,M,gDAGvE,OAAO,wBAAYnB,KAAK,QAAQkB,eAAe,EAAMC,kBAAkB,M,8CAGvE,OAAO,wBAAYnB,KAAK,QAAQkB,eAAe,EAAMC,kBAAkB,M,6CAEpD9K,GACnB,OACI,wBACI2J,KAAK,QACLoB,gBAAiB/K,EAAGkI,SAEpB2C,eAAe,EACfG,QAAShL,EAAGiI,KACZ6C,kBAAkB,EAClB1C,MAAOpI,EAAGoI,MACV6C,SAAU9K,KAAK+K,WAAWlE,KAAK7G,U,gDAIjBH,GACtB,OACI,wBACI2J,KAAK,QACLoB,gBAAiB/K,EAAGkI,SAEpB2C,eAAe,EACfG,QAAShL,EAAGiI,KACZ6C,kBAAkB,EAClB1C,MAAOpI,EAAGoI,MACV2B,UAAU,M,yCAKlB,IAAM/J,EAAKG,KAAKJ,MAAMC,GACtB,OAAQA,EAAGL,QACP,KAAKC,EAASH,KACV,OAAOU,KAAKgL,uBAChB,KAAKvL,EAASkF,QACV,OAAO3E,KAAKiL,0BAChB,KAAKxL,EAASuF,MACV,OAAOhF,KAAKkL,wBAChB,KAAKzL,EAASoF,OACV,OAAO7E,KAAKmL,uBAAuBtL,GACvC,KAAKJ,EAASuI,UACV,OAAOhI,KAAKoL,0BAA0BvL,M,uCAI9C,OACI,6BACKG,KAAKqL,cACLrL,KAAKsL,eACLtL,KAAKuL,mBACLvL,KAAKwL,gB,+BAMd,OAAOxL,KAAKyL,qB,GA7KuB5F,IAAMC,WCJ5B4F,G,YAEjB,WAAY9L,GAAe,IAAD,8BACtB,4CAAMA,KAFVC,QAC0B,EAEtB,EAAKA,GAAK,IAAI4E,GAAQ,CAClB1E,SAAU,WACN,EAAK4L,eAETzL,YAAa,CACTV,OAAQC,EAASH,MAErBlB,MAAOwB,EAAMxB,MACbJ,OAAQ4B,EAAM5B,SAVI,E,wHAkBZqD,EAA0ByG,EAAcC,EAAkBlH,GACpE,OAAOb,KAAKH,GAAGoJ,cAAc,CAAE5H,WAAUyG,OAAMC,WAAUlH,iB,oCAG/ChB,GACV,OAAO,kBAAC,GAAD,CACHA,GAAIA,EACJwB,SAAUrB,KAAKJ,MAAMyB,SACrBgH,iBAAkBrI,KAAKJ,MAAMyI,iBAC7BpC,eAAgBjG,KAAKJ,MAAMqG,eAC3BkC,mBAAoBnI,KAAKJ,MAAMuI,mBAC/Bc,cAAejJ,KAAKiJ,cAAcpC,KAAK7G,U,kCAInCH,GACR,OAAO,wBAAOxC,KAAK,QAAQqB,QAASmB,EAAGpB,MAAMC,Y,mCAI7C,MAAO,S,+BAIP,IAAMmB,EAAKG,KAAKH,GAAG+L,MACnB,OAAQ/L,EAAGL,QACP,KAAMC,EAASuF,MACX,OAAOhF,KAAK6L,YAAYhM,GAC5B,QAEI,OAAOG,KAAK8L,cAAcjM,Q,GAlDRgG,IAAMC,WCYzBiG,0BAlBf,SAAyBnN,EAAmBgB,GAA8B,IAE1DhC,EAERgB,EAFAf,KAAQD,kBACDI,EACPY,EADAb,IAAOC,OAEX,IAAKJ,EACD,MAAM,IAAIzC,MAAM,yCAEpB,MAAO,CACHiD,MAAOR,EAAkBQ,MACzBJ,aAIR,WACI,MAAO,KAGI+N,CAGbC,I,ikBCdmBC,G,YAEjB,WAAYrM,GAAwB,IAAD,8BAC/B,4CAAMA,KAFVA,WACmC,EAE/B,EAAKA,MAAQA,EAFkB,E,iHAIlByB,G,yFAETrB,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEIY,OAAQC,EAASkF,aAInBC,EAAS,IAAI1D,GAAc,CAC7B9C,MAAO4B,KAAKJ,MAAMxB,MAClBN,IAAKkC,KAAKJ,MAAM5B,OAAOC,SAASC,cAAcJ,M,SAE5B8G,EAAOtD,WAAWD,G,OAAlC6K,E,OACNlM,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEIY,OAAQC,EAASoF,OACjBqH,e,gDAIR1N,QAAQC,MAAM,QAAd,MACAuB,KAAK0E,KAAI,SAAC9F,GACN,MAAO,CACHY,OAAQC,EAASuF,MACjBvG,MAAO,CACHwG,KAAM,YACNC,OAAQ,uBACRxG,QAAS,KAAGA,a,qHAnCGiB,GCRlBwM,G,iLAEb,OACI,kBAAC,GAAD,CACI5J,KAAMvC,KAAKJ,MAAMsM,QACjB7D,iBAAkBrI,KAAKJ,MAAMyI,iBAC7BpC,eAAgBjG,KAAKJ,MAAMqG,eAC3BkC,mBAAoBnI,KAAKJ,MAAMuI,mBAC/B+B,WAAYlK,KAAKJ,MAAMsM,QAAQhR,OAC/BiP,SAAU,S,GATWtE,IAAMC,WCQtB4F,G,YAEjB,WAAY9L,GAAe,IAAD,8BACtB,4CAAMA,KAFVC,QAC0B,EAEtB,EAAKA,GAAK,IAAIoM,GAAU,CACpBlM,SAAU,WACN,EAAK4L,eAETzL,YAAa,CACTV,OAAQC,EAASH,MAErBlB,MAAOwB,EAAMxB,MACbJ,OAAQ4B,EAAM5B,SAVI,E,iFAgBtB,OADWgC,KAAKH,GAAG+L,MACRpM,QACP,KAAKC,EAASH,KACVU,KAAKH,GAAGyB,WAAWtB,KAAKJ,MAAMyB,a,sFAStC,OAAO,uBAAMhE,KAAK,c,kCAGVwC,GACR,OAAO,kBAAC,GAAD,CAAWpB,MAAOoB,EAAGpB,U,mCAGnBoB,GACT,OACI,kBAAC,GAAD,CACIqM,QAASrM,EAAGqM,QACZ7D,iBAAkBrI,KAAKJ,MAAMyI,iBAC7BpC,eAAgBjG,KAAKJ,MAAMqG,eAC3BkC,mBAAoBnI,KAAKJ,MAAMuI,uB,+BAMvC,IAAMtI,EAAKG,KAAKH,GAAG+L,MACnB,OAAQ/L,EAAGL,QACP,KAAKC,EAASH,KAGd,KAAKG,EAASkF,QACV,OAAO3E,KAAKoM,gBAChB,KAAK3M,EAASuF,MACV,OAAOhF,KAAK6L,YAAYhM,GAC5B,KAAKJ,EAASoF,OACV,OAAO7E,KAAKqM,aAAaxM,Q,GA1DPgG,IAAMC,WCWzBiG,0BAlBf,SAAyBnN,EAAmBgB,GAA8B,IAE1DhC,EAERgB,EAFAf,KAAQD,kBACDI,EACPY,EADAb,IAAOC,OAEX,IAAKJ,EACD,MAAM,IAAIzC,MAAM,yCAEpB,MAAO,CACHiD,MAAOR,EAAkBQ,MACzBJ,aAIR,WACI,MAAO,KAGI+N,CAGbC,ICnBmBM,G,gLACT/N,GACJyB,KAAKJ,MAAMqG,eAAe1H,K,iCASnBmE,GACP1C,KAAKJ,MAAMqG,eAAevD,EAAMnE,O,sCAIhC,OACI,kBAAC,GAAD,CACI8C,SAAUrB,KAAKJ,MAAMkF,YAAYvG,IACjC8J,iBAAkBrI,KAAKJ,MAAMmF,cAAcxG,IAC3C0H,eAAgBjG,KAAKJ,MAAMqG,eAC3BkC,mBAAoBnI,KAAKJ,MAAMuI,uB,0CAMvBoE,GAChB,OAAc,IAAVA,EACO,yBAAKnH,UAAU,IAAf,eAEG,IAAVmH,EACO,0CAGP,6BACKrD,KAAKC,aAAa,QAAS,CACxBC,aAAa,IACdC,OAAOkD,GAAQ,IAHtB,c,uCAUJ,IAAIC,EAOJ,OALIA,EADAxM,KAAKJ,MAAMmF,cACG/E,KAAKJ,MAAMmF,cAAcxG,IAEzB,KAId,kBAAC,GAAD,CACI8C,SAAUrB,KAAKJ,MAAMkF,YAAYvG,IACjC8J,iBAAkBmE,EAClBvG,eAAgBjG,KAAKJ,MAAMqG,eAC3BkC,mBAAoBnI,KAAKJ,MAAMuI,uB,0CA4BvC,IAAMpB,EACF/G,KAAKJ,MAAMmF,eACX/E,KAAKJ,MAAMmF,cAAcxG,IAAIjD,KAAO0E,KAAKJ,MAAMkF,YAAYvG,IAAIjD,IAC/D0E,KAAKJ,MAAMmF,cAAcxG,IAAInD,YAAc4E,KAAKJ,MAAMkF,YAAYvG,IAAInD,UAE1E,OACI,kBAAC,GAAD,CACIsH,MAAO1C,KAAKJ,MAAMkF,YAClBiC,SAAUA,EACVd,eAAgBjG,KAAKJ,MAAMqG,eAC3BkC,mBAAoBnI,KAAKJ,MAAMuI,uB,+BAMvC,OACI,yBAAK/C,UAAU,iBAAiBE,MAAO,CAAEmH,UAAW,SAChD,yBAAKrH,UAAU,oBACX,yBAAKA,UAAU,iBAAf,WACCpF,KAAK0M,iBAEV,yBAAKtH,UAAU,yCAAyCpF,KAAK2M,qBAC7D,yBAAKvH,UAAU,+BAA+BpF,KAAKyL,uB,GA5GrB5F,IAAMC,WCP/B8G,G,iLAEb,IAAIC,EAA2B,GAI/B,MAH8B,YAA1B7M,KAAKJ,MAAM8C,MAAMZ,OACjB+K,EAAY,CAAEC,UAAW,WAGzB,yBAAK1H,UAAU,aACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,qBAAqBE,MAAO,CAAEG,MAAO,QAApD,QAGA,yBAAKL,UAAU,oBAAoBE,MAAOuH,GACrC7M,KAAKJ,MAAM8C,MAAMb,OAG1B,yBAAKuD,UAAU,iBACX,yBAAKA,UAAU,qBAAqBE,MAAO,CAAEG,MAAO,QAApD,QAGA,yBAAKL,UAAU,qBAAqBpF,KAAKJ,MAAM8C,MAAMZ,Y,GApB/B+D,IAAMC,W,qCCgBhD,IAEMiH,GAlBN,SAA4BC,GACxB,KAAMA,aAAwBC,OAC1B,MAAM,IAAI9R,MAAM,+BAGpB,OAAO6R,EAAavL,KAAI,YAAiB,IAAD,mBAAdnG,EAAc,KAAVuG,EAAU,KACpC,GAAkB,kBAAPvG,EACP,MAAM,IAAIH,MAAM,mCAEpB,GAAoB,kBAAT0G,EACP,MAAM,IAAI1G,MAAM,sCAEpB,MAAO,CAACG,EAAIuG,MAITqL,C,QAEqCC,QAAO,SAACJ,EAAD,GAAmC,IAAD,mBAAfzR,EAAe,KAAX8R,EAAW,KAErF,OADAL,EAAgBrI,IAAIpJ,EAAI8R,GACjBL,IACR,IAAIM,KAQcC,G,wLAEb,IAQMC,EAAe,SAAC7P,EAAW8P,GAC7B,IAAMC,EAAS/P,EAAEgQ,QAAQ,QAAS,IAC5BC,EAASH,EAAEE,QAAQ,QAAS,IAClC,OAAOD,EAAOG,cAAcD,IAEhC,OACI,wBACIE,WAAY7N,KAAKJ,MAAM8C,MAAMP,QAC7BiD,UAAU,wCACVoE,KAAK,QAELsE,YAAY,EACZC,OAAQ,CAAEC,EAAG,QACbC,OAAO,OACPC,UAAU,GAEV,uBAAOC,OAAP,CACIrL,MAAM,OACNsL,UAAU,OACV5G,IAAI,OACJ6G,iBAAiB,SACjBC,OA7BY,SAAC5Q,EAAe8P,GACpC,OAAOD,EAAa7P,EAAEmE,KAAM2L,EAAE3L,SA8B1B,uBAAOsM,OAAP,CACIrL,MAAM,WACNsL,UAAU,WACV5G,IAAI,WACJ/B,MAAM,OACN6I,OAhCgB,SAAC5Q,EAAe8P,GACxC,OAAOD,EAAa7P,EAAE0E,SAAUoL,EAAEpL,gB,0CAsCtC,IACIyK,EAAiC,GAIrC,MAH8B,YAA1B7M,KAAKJ,MAAM8C,MAAMZ,OACjB+K,EAAUC,UAAY,UAGtB,yBAAK1H,UAAU,aACX,yBAAKA,UAAU,gBAAgBoC,IAAI,QAC/B,yBAAKpC,UAAU,qBAAqBE,MAAO,CAAEG,MAR3C,QAQF,QAGA,yBAAKL,UAAU,oBAAoBE,MAAOuH,GACrC7M,KAAKJ,MAAM8C,MAAMb,OAG1B,yBAAKuD,UAAU,gBAAgBoC,IAAI,QAC/B,yBAAKpC,UAAU,qBAAqBE,MAAO,CAAEG,MAhB3C,QAgBF,QAGA,yBAAKL,UAAU,qBAAqBpF,KAAKJ,MAAM8C,MAAMZ,OAEzD,yBAAKsD,UAAU,gBAAgBoC,IAAI,UAC/B,yBAAKpC,UAAU,qBAAqBE,MAAO,CAAEG,MAtB3C,QAsBF,WAGA,yBAAKL,UAAU,qBACX,uBACIM,KAAI,gFACA1F,KAAKJ,MAAM8C,MAAMX,QAErB4D,OAAO,SACPC,IAAI,uBAEH5F,KAAKJ,MAAM8C,MAAMX,UAI9B,yBAAKqD,UAAU,gBAAgBoC,IAAI,gBAC/B,yBAAKpC,UAAU,qBAAqBE,MAAO,CAAEG,MAtC3C,QAsCF,gBAGA,yBAAKL,UAAU,qBACVpF,KAAKJ,MAAM8C,MAAMT,YADtB,KACqC,IAChC8K,GAAgBnB,IAAI5L,KAAKJ,MAAM8C,MAAMT,cAAgB,YAG9D,yBAAKmD,UAAU,gBAAgBoC,IAAI,WAC/B,yBAAKpC,UAAU,qBAAqBE,MAAO,CAAEG,MA/C3C,QA+CF,WAGA,yBAAKL,UAAU,qBAAqBpF,KAAKuO,qB,+BAOrD,OAAO,6BAAMvO,KAAKwO,yB,GAtGmB3I,IAAMC,WC3B9B2I,G,iLAEb,IAAM/L,EAAQ1C,KAAKJ,MAAM8C,MACzB,OAAQA,EAAMnE,IAAIlD,WACd,KAAKc,EAAkBU,KAEnB,OAAO,kBAAC,GAAD,CAAiB6F,MAAOA,IACnC,QACI,OAAO,wBAAOrF,KAAK,QAAQqB,QAAQ,0C,GARVmH,IAAMC,WCXxC,SAAS4I,GAAWC,EAAaC,EAAkCC,GACtE,GAAwB,kBAAbD,EACPA,EAAWA,EAASE,MAAM,UACvB,KAAMF,aAAoB3B,OAC7B,MAAM,IAAI8B,UAAU,gCAAkCH,GAG1D,IADA,IAAII,EAAYL,EACPM,EAAI,EAAGA,EAAIL,EAAS1T,OAAQ+T,GAAK,EAAG,CACzC,QAAaC,IAATF,GAAsC,kBAATA,GAA8B,OAATA,EAClD,OAAOH,EAEXG,EAAOA,EAAKJ,EAASK,IAEzB,YAAaC,IAATF,EACOH,EAEJG,E,ICJNG,GCQCC,G,YACF,WAAY1Q,GAAkB,IAAD,8BACzB,4CAAMA,KAEDmD,KAAO,WAHa,E,uCADV1G,QAQjBkU,GAAoB,qCAGLC,G,kGACPC,GAEN,IAAMC,EAAQD,EAAaT,MAAM,IAC3BW,EAAY,UAOlB,OANiBD,EAAME,QAAO,SAACC,GAC3B,QAAIF,EAAU1U,KAAK4U,MAKPvJ,KAAK,M,wEAGVuD,G,0EACNA,E,sBACK,IAAIxO,MAAM,qB,cAEdyU,EAAa5P,KAAK6P,UAAUlG,G,kBAC3B3J,KAAK8P,iBAAiBF,GAAYG,MACrC,YAAiF,IAA9EC,EAA6E,EAA7EA,SAAUC,EAAmE,EAAnEA,QAASC,EAA0D,EAA1DA,UAAWpN,EAA+C,EAA/CA,MAAOqN,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,WAS3D,MAAO,CAAEL,WAAUC,UAASC,UANLA,EAClBxC,QAAQ,QAAS,QACjBA,QAAQ,OAAQ,OAChBA,QAAQ,MAAO,MACfA,QAAQ,MAAO,QAEmC5K,QAAOqN,SAAQC,gBAAeC,kB,uLAK1E1G,G,qGACZ3J,KAAKsQ,QAAQ3G,GAAMoG,MACtB,YAQO,IAPHQ,EAOE,EAPFA,aACAH,EAME,EANFA,cACAC,EAKE,EALFA,WAOA,OAAO1V,QAAQ6V,IAAI,CACf,EAAKC,SAAS,CAAEjH,KAjDjB,IAiDmC2G,OAAQI,EAAaG,MAAMC,SAC7D,EAAKC,YAAY,CAAET,OAAQI,EAAaG,MAAMC,WAC/CZ,MAAK,YAA2B,IAAD,mBAAxBC,EAAwB,KAAda,EAAc,KAC9B,MAAO,CACHb,SAAUA,EACVC,QAASY,EAAS/S,IAClBoS,UAAWW,EAASX,UACpBpN,MAAOyN,EAAaG,MAAM5N,MAC1BqN,OAAQI,EAAaG,MAAMC,OAC3BP,gBACAC,qB,8KASN1G,G,gFACJmH,EAAQnH,EAAKmF,MAAM,OAErBuB,GAAa,E,kBACV,IAAI1V,SAAQ,SAACC,EAASC,IACP,SAAZkW,EAAaD,GACM,IAAjBA,EAAM5V,QACNL,EAAO,IAAIuU,GAAS,qCAAuCzF,EAAO,MAOtE,IAAMqH,EAAS,IAAIC,IAAI5B,IACjB6B,EAAQF,EAAOG,aACrBD,EAAMxM,IAAI,SAAU,SACpBwM,EAAMxM,IAAI,SAAU,QACpBwM,EAAMxM,IAAI,OAAQ,iBAClBwM,EAAMxM,IAAI,UAAW,KACrBwM,EAAMxM,IAAI,YAAa,IACvBwM,EAAMxM,IAAI,OAAQoM,EAAM1K,KAAK,MAK7B8K,EAAMxM,IAAI,SAAU,KACpB0M,MAAMJ,EAAOK,WAAY,CACrBC,OAAQ,MACRC,QAPY,CACZC,OAAQ,sBAQPzB,MAAK,SAACrP,GACH,OAAQA,EAAOlB,QACX,KAAK,IACD,IACI,OAAOkB,EAAO+Q,OAAO1B,MAAK,SAACQ,GACvB,GAAIA,EAAa9R,MAAO,CACpB,GAAgC,iBAA5B8R,EAAa9R,MAAMwG,KAInB,OAHA6L,EAAMY,MACNrB,GAAa,EACbU,EAAUD,GACH,KAEPtS,QAAQC,MAAM,sBAAuB8R,GACrC1V,EAAO,IAAIM,MAAM,wBAA0BoV,EAAa9R,MAAMwG,YAIlErK,EAAQ,CACJ2V,eACAH,cAHYU,EAIZT,kBAId,MAAOsB,GACL9W,EAAO,IAAIM,MAAM,qCAAuCwW,EAAGjT,UAE/D,MACJ,QACI,IAAMA,EAAU,2CAA6CgC,EAAOlB,OACpEhB,QAAQC,MAAMC,EAASgC,GACvB7F,EAAO,IAAIM,MAAMuD,QAG5BkT,OAAM,SAACC,GACJhX,EAAOgX,MAGnBd,CAAUD,O,kQAIEX,E,EAAAA,OACV2B,EAAS,IAAIb,IAAI5B,KACjB6B,EAAQY,EAAOX,cACfzM,IAAI,SAAU,SACpBwM,EAAMxM,IAAI,UAAWyL,GACrBe,EAAMxM,IAAI,OAAQ,iBAClBwM,EAAMxM,IAAI,cAAe,QACzBwM,EAAMxM,IAAI,SAAU,OACpBwM,EAAMxM,IAAI,SAAU,KACpBwM,EAAMxM,IAAI,SAAU,Q,kBAGb0M,MAAMU,EAAOT,WAAY,CAC5BC,OAAQ,QACTvB,MAAK,SAACrP,GACL,OAAQA,EAAOlB,QACX,KAAK,IACD,IACI,OAAOkB,EAAO+Q,OAAO1B,MAAK,SAACQ,GACvB,MAAO,CACHzS,IAAK8B,GACD2Q,EACA,CAAC,QAAS,QAASpK,OAAOgK,GAAS,WACnC,MAEJD,UAAWtQ,GACP2Q,EACA,CAAC,QAAS,QAASpK,OAAOgK,GAAS,WACnC,UAId,MAAOwB,GAEL,MADAnT,QAAQC,MAAM,0BAA2BkT,EAAGjT,SACtCiT,EAEd,QACI,IAAIjT,EAAU,2CAA6CgC,EAAOlB,OAElE,MADAhB,QAAQC,MAAMC,EAASgC,GACjB,IAAIvF,MAAMuD,Q,oQAKf8K,E,EAAAA,KAAM2G,E,EAAAA,OACb2B,EAAS,IAAIb,IAAI5B,KACjB6B,EAAQY,EAAOX,cACfzM,IAAI,SAAU,SACpBwM,EAAMxM,IAAI,SAAU,QACpBwM,EAAMxM,IAAI,OAAQ,cAClBwM,EAAMxM,IAAI,cAAeyB,OAAOqD,IAChC0H,EAAMxM,IAAI,UAAWyB,OAAOgK,IAC5Be,EAAMxM,IAAI,SAAU,KACd6M,EAAU,CACZC,OAAQ,oB,kBAGLJ,MAAMU,EAAOT,WAAY,CAC5BC,OAAQ,MACRC,YAECxB,MAAK,SAACrP,GACH,OAAQA,EAAOlB,QACX,KAAK,IACD,IACI,OAAOkB,EAAO+Q,OAAO1B,MAAK,SAACQ,GACvB,OAAO3Q,GACH2Q,EACA,CAAC,QAAS,QAASpK,OAAOgK,GAAS,YAAa,UAChD,SAGV,MAAOwB,GACL,MAAM,IAAIxW,MAAM,qCAAuCwW,EAAGjT,SAElE,QACI,IAAIA,EAAU,2CAA6CgC,EAAOlB,OAElE,MADAhB,QAAQC,MAAMC,EAASgC,GACjB,IAAIvF,MAAMuD,OAG3BkT,OAAM,SAACC,GACJ,IAAMnT,EAAU,uCAAyCmT,EAAInT,QAE7D,MADAF,QAAQC,MAAMC,EAASmT,GACjB,IAAI1W,MAAM,uCAAyC0W,EAAInT,a,+HCpPxDqT,I,wLAEb,OACI,yBAAK3M,UAAU,eACX,wBAAMoE,KAAK,UACX,6BACCxJ,KAAKJ,MAAMlB,a,GANSmH,IAAMC,Y,iBFEtCqJ,O,eAAAA,I,qBAAAA,I,mBAAAA,I,kBAAAA,Q,SGDO6C,GH4BS1C,G,YAGjB,WAAY1P,GAAwB,IAAD,8BAC/B,4CAAMA,KAHVqS,qBAEmC,IADnCC,cACmC,EAE/B,EAAKD,gBAAkB,IAAIE,GAC3B,EAAKD,UAAW,EAChB,EAAKtT,MAAQ,CACTA,MAAOuQ,GAA2B7P,MALP,E,oFAU/BU,KAAKkS,UAAW,I,oCAMNE,GACV,IAAMC,EAAUC,KAAOF,EAAclC,WACrC,OAAO,yBAAK5K,MAAO,CAAEiN,SAAU,QAAUC,wBAAyB,CAAEC,OAAQJ,O,kCAGpED,GACR,OAAKA,EAAcpC,SAQf,6BACI,yBAAK3K,IAAK+M,EAAcpC,SAAU1K,MAAO,CAAEG,MAAO,QAAUD,IAAG,UAAKxF,KAAKJ,MAAM+J,SAP/E,yBAAKvE,UAAU,yBACX,yBAAKA,UAAU,YAAf,sB,kCAWJgN,GACR,GAAIA,EAAc/B,WAAY,CAC1B,IAAM3R,EACF,kBAAC,IAAMgI,SAAP,KACI,uBAAMrJ,KAAK,QAAQiI,MAAO,CAAEwD,MAAO,WADvC,oBAEKsJ,EAAchC,cAAchK,KAAK,KAFtC,KAKJ,OAAO,wBAAO/I,KAAK,UAAUqB,QAASA,IAEtC,IAAMA,EACF,kBAAC,IAAMgI,SAAP,KACI,uBAAMrJ,KAAK,UAAUiI,MAAO,CAAEwD,MAAO,YADzC,uBAEKsJ,EAAchC,cAAchK,KAAK,KAFtC,KAKJ,OAAO,wBAAO/I,KAAK,UAAUqB,QAASA,M,kDAK1C,OACI,6BACI,yBAAK4G,MAAO,CAAEgC,aAAc,mBAA5B,wCACA,yBAAKhC,MAAO,CAAEoN,SAAU,QACpB,uBAAGpN,MAAO,CAAEqN,UAAW,WAAvB,UAEI,uBACIjN,KAAK,kDACL5C,MAAM,8CACN6C,OAAO,SACPC,IAAI,uBAJR,gBAQA,uBACIF,KAAK,sDACLC,OAAO,SACPC,IAAI,uBAHR,a,0CAaAwM,GAChB,OACI,yBAAKhN,UAAU,kBACX,yBAAKA,UAAU,6BACX,yBAAKE,MAAO,CAAEsN,QAAS,OAAQC,cAAe,MAAOhJ,aAAc,SAC/D,yBAAKvE,MAAO,CAAEwN,KAAM,YAAc9S,KAAK+S,YAAYX,IACnD,yBAAK9M,MAAO,CAAEwN,KAAM,WAAYE,UAAW,SAAUC,WAAY,SAC7D,yBAAK3N,MAAO,CAAEC,OAAQ,OAAQoN,UAAW,WACrC,wBAAS7P,MAAO9C,KAAKkT,6BACjB,uBAAGxN,KAAM0M,EAAcnC,QAAStK,OAAO,SAASC,IAAI,uBAChD,yBACIP,IAAI,4BACJC,MAAO,CAAEC,OAAQ,QACjBC,IAAI,sBAKpB,gCAGR,yBACIJ,UAAU,aACVE,MAAO,CAAEwN,KAAM,UAAWK,aAAc,MAAOC,YAAa,MAAO3G,UAAW,SAE7EzM,KAAKqT,cAAcjB,KAI5B,yBAAKhN,UAAU,iBAAiBE,MAAO,CAAEwN,KAAM,UAAWG,WAAY,SACjEjT,KAAKsT,YAAYlB,O,mCAMpB,IAAD,OACHH,EAAkB,IAAIE,GACpBxI,EAAS3J,KAAKJ,MAAd+J,KACR3J,KAAKyG,SAAS,CACV7H,MAAOuQ,GAA2BxK,UAEtCsN,EACKsB,SAAS5J,GACToG,MAAK,SAACqC,GACC,EAAKF,UAGT,EAAKzL,SAAS,CACV7H,MAAOuQ,GAA2BtK,OAClCuN,qBAGPR,OAAM,SAACC,GACJ,IAAI,EAAKK,SAGT,OAAO,EAAKzL,SAAS,CACjB7H,MAAOuQ,GAA2BnK,MAClCvG,MAAOoT,EAAInT,e,0CAMvBsB,KAAKwT,e,yCAGU5T,EAAuBhB,GAClCgB,EAAM+J,OAAS3J,KAAKJ,MAAM+J,MAC1B3J,KAAKwT,e,mCAKT,OAAO,gC,sCAIP,OAAO,kBAAC,GAAD,CAAS9U,QAAQ,6B,mCAGfE,GACT,OAAOoB,KAAKyT,oBAAoB7U,EAAMwT,iB,kCAG9BxT,GACR,OAAO,wBAAOvB,KAAK,QAAQqB,QAASE,EAAMH,U,+BAI1C,IAAIuB,KAAKkS,SAGT,OAAQlS,KAAKpB,MAAMA,OACf,KAAKuQ,GAA2B7P,KAC5B,OAAOU,KAAK0T,aAChB,KAAKvE,GAA2BxK,QAC5B,OAAO3E,KAAKoM,gBAChB,KAAK+C,GAA2BtK,OAC5B,OAAO7E,KAAKqM,aAAarM,KAAKpB,OAClC,KAAKuQ,GAA2BnK,MAC5B,OAAOhF,KAAK6L,YAAY7L,KAAKpB,Y,GA7LNiH,IAAMC,WI7BxB6N,G,iMAEb,OAAO,kBAAC,GAAD,CAAWhK,KAAM3J,KAAKJ,MAAM8C,MAAMb,S,sCASzC,OAAQ7B,KAAKJ,MAAM8C,MAAMb,MACrB,IAAK,OACD,OACI,6BACI,yFAGZ,IAAK,qBACD,OACI,6BACI,6EAGZ,QACI,OACI,6BACI,gE,+BAOhB,OAAI7B,KAAKJ,MAAM8C,MAAMf,aACV,yBAAKyD,UAAU,kBAAkBpF,KAAK4T,0BAE1C5T,KAAK6T,oB,GArC0BhO,IAAMC,Y,SDCxCkM,O,eAAAA,I,qBAAAA,I,mBAAAA,I,iBAAAA,I,0BAAAA,Q,SE+BA8B,GFKSnU,G,WAIjB,WAAYC,GAAoB,yBAHhCC,QAG+B,OAF/BC,aAE+B,OAD/BC,cAC+B,EAC3BC,KAAKD,SAAWH,EAAMG,SACtBC,KAAKH,GAAK,CACNI,KAAML,EAAMM,aAEhBF,KAAKF,SAAU,E,mEAIXE,KAAKF,SAGTE,KAAKD,a,0BAGLI,GACAH,KAAKH,GAAGI,KAAOE,EAAUH,KAAKH,GAAGI,MACjCD,KAAKI,yB,4BAIL,OAAOJ,KAAKH,GAAGI,O,6BAIfD,KAAKF,SAAU,M,gmBElCXgU,O,yBAAAA,I,4BAAAA,Q,KA8BL,IAAMC,GAAb,WAKI,WAAYC,GAA4B,yBAJxCA,aAIuC,OAHvCC,eAGuC,OAFvCvT,YAEuC,OADvCwR,cACuC,EACnClS,KAAKgU,QAAUA,EACfhU,KAAKU,OAAS,KACdV,KAAKiU,WAAY,EACjBjU,KAAKkS,UAAW,EATxB,qLAcgClS,KAAKgU,UAdrC,cAcYhU,KAAKU,OAdjB,yBAemBV,KAAKU,QAfxB,yLAsBQV,KAAKkS,UAAW,IAtBxB,4BA0BQ,GAAoB,OAAhBlS,KAAKU,OACL,MAAM,IAAIvF,MAAM,uCAEpB,OAAO6E,KAAKU,SA7BpB,mCAiCQ,OAAOV,KAAKkS,aAjCpB,KAqCqBgC,G,YAIjB,WAAYtU,GAA2B,IAAD,8BAClC,4CAAMA,KAJVxB,WAGsC,IAFtCyJ,sBAEsC,IADtCsM,iBACsC,EAElC,EAAK/V,MAAQwB,EAAMxB,MACnB,EAAKyJ,iBAAmBjI,EAAM5B,OAAOC,SAASC,cAAcJ,IAC5D,EAAKqW,YAAc,KAJe,E,2NAOX9S,E,EAAAA,SAAUyG,E,EAAAA,KAAMC,E,EAAAA,SACnC/H,KAAKmU,aACLnU,KAAKmU,YAAYC,SAEfC,E,uCAAO,kCAAA3W,EAAA,6DACHkH,EAAS,IAAI1D,GAAc,CAC7B9C,MAAO,EAAKA,MACZN,IAAK,EAAK+J,mBAGRlH,GAAUmH,EAAO,GAAKC,EACtBnH,EAAQmH,EAPL,SASYnD,EAAO0P,iBAAiBjT,EAAU,CACnDV,SACAC,UAXK,cASHF,EATG,OAaTlC,QAAQyC,IAAI,SAAUP,GAbb,kBAcFA,GAdE,2C,qDAmBbV,KAAK0E,KAAI,SAAC9F,GACN,OAAQA,EAAM2V,wBAAwB/U,QAClC,KAAKwS,GAAmBrN,QACxB,KAAKqN,GAAmBnN,OACxB,KAAKmN,GAAmBhK,UACpB,OAAO,MACApJ,EADP,CAEI2V,wBAAwB,MACjB3V,EAAM2V,wBADU,CAEnB/U,OAAQwS,GAAmBrN,YAGvC,KAAKqN,GAAmB1S,KACxB,KAAK0S,GAAmBhN,MACxB,QACI,OAAO,MACApG,EADP,CAEI2V,wBAAyB,CACrB/U,OAAQwS,GAAmBrN,QAC3B1E,KAAM,CACF2C,cAAe,GACfkF,OAAMC,WACNvD,WAAY,UAO9BgQ,EAAU,IAAIT,GAAkCM,GACtDrU,KAAKmU,YAAcK,E,kBAGMA,EAAQC,M,UAAvB/T,E,QACF8T,EAAQE,a,mDAGZ1U,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEI2V,wBAAyB,CACrB/U,OAAQwS,GAAmBnN,OAC3B5E,KAAK,MACES,EADH,CAEAoH,OACAC,mBAKhB/H,KAAKmU,YAAc,K,kDAEnB3V,QAAQC,MAAM,QAAd,MACAuB,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEI2V,wBAAyB,CACrB/U,OAAQwS,GAAmBhN,MAC3BvG,MAAO,CACHwG,KAAM,YACNvG,QAAS,KAAGA,QACZwG,OAAQ,yC,qSAQL7D,E,EAAAA,SAAUyG,E,EAAAA,KAAMC,E,EAAAA,S,EAAU4M,KAC7C3U,KAAKmU,aACLnU,KAAKmU,YAAYC,SAEfC,E,uCAAO,kCAAA3W,EAAA,6DACHkH,EAAS,IAAI1D,GAAc,CAC7B9C,MAAO,EAAKA,MACZN,IAAK,EAAK+J,mBAGRlH,GAAUmH,EAAO,GAAKC,EACtBnH,EAAQmH,EAPL,SASYnD,EAAO0P,iBAAiBjT,EAAU,CACnDV,SACAC,UAXK,cASHF,EATG,yBAcFA,GAdE,2C,qDAmBbV,KAAK0E,KAAI,SAAC9F,GACN,OAAQA,EAAM2V,wBAAwB/U,QAClC,KAAKwS,GAAmBrN,QACxB,KAAKqN,GAAmBnN,OACxB,KAAKmN,GAAmBhK,UACpB,OAAO,MACApJ,EADP,CAEI2V,wBAAwB,MACjB3V,EAAM2V,wBADU,CAEnB/U,OAAQwS,GAAmBrN,YAGvC,KAAKqN,GAAmB1S,KACxB,KAAK0S,GAAmBhN,MACxB,QACI,OAAO,MACApG,EADP,CAEI2V,wBAAyB,CACrB/U,OAAQwS,GAAmBrN,QAC3B1E,KAAM,CACF2C,cAAe,GACfkF,OAAMC,WACNvD,WAAY,UAO9BgQ,EAAU,IAAIT,GAAkCM,GACtDrU,KAAKmU,YAAcK,E,kBAGMA,EAAQC,M,UAAvB/T,E,QACF8T,EAAQE,a,mDAGZ1U,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEI2V,wBAAyB,CACrB/U,OAAQwS,GAAmBnN,OAC3B5E,KAAK,MACES,EADH,CAEAoH,OACAC,mBAKhB/H,KAAKmU,YAAc,K,kDAEnB3V,QAAQC,MAAM,QAAd,MACAuB,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEI2V,wBAAyB,CACrB/U,OAAQwS,GAAmBhN,MAC3BvG,MAAO,CACHwG,KAAM,YACNvG,QAAS,KAAGA,QACZwG,OAAQ,yC,sHA3LMvF,ICzFrBiV,G,qLACJ9M,EAAcC,GACvB/H,KAAKJ,MAAMiV,QAAQ/M,EAAMC,GAZP,M,oCAeR+F,EAA8BgH,EAAmCxG,GAC3E,IAAIqG,EACArG,EAAOyG,QAAUzG,EAAOyG,OAAO3G,UAG/BuG,EAAO,CACHK,WAHe1G,EAAOyG,OAAO3G,UAGjB6G,cDgBrB,SAA+BC,GAClC,OAAQA,GACJ,IAAK,YACD,OAAOpB,GAAcqB,UACzB,IAAK,aACD,OAAOrB,GAAcsB,WACzB,QACI,MAAM,IAAIja,MAAM,2BAA6B+Z,ICzBvBG,CAAuC,YAAjB/G,EAAOgH,MAAsB,aAAe,cAKxFX,EAAO,KAGX3U,KAAKJ,MAAM2V,WAAWzH,EAAWjD,SAAW,EAAGiD,EAAW/F,UA3BxC,GA2BuE4M,K,0CAIzF3U,KAAKJ,MAAMiV,QAAQ,EA/BD,M,yCAkCHW,GACf,OAAQA,EAAcjB,wBAAwB/U,QAC1C,KAAKwS,GAAmB1S,KACxB,KAAK0S,GAAmBrN,QACxB,KAAKqN,GAAmBnN,OACxB,KAAKmN,GAAmBhN,MACxB,KAAKgN,GAAmBhK,c,0CAIZ/H,EAAyBwV,GACzC,OAAO,wBACH5H,WAAY5N,EAAK2C,cACjB4G,KAAK,QACLpE,UAAU,2DAGV8I,UAAU,EACVD,OAAQ,SAACyH,GACL,MAAO,CAACA,EAAa/R,YAAa+R,EAAajS,SAAUiS,EAAa7R,SAASuC,KAAK,MAExF0H,WAAY,CACR6H,SAAU,MAEV/K,gBA1DU,GA2DV3C,MAAOhI,EAAKuE,YAEhBoR,QAASH,EACT3K,SAAU9K,KAAK6V,cAAchP,KAAK7G,OAElC,kBAAC,KAAD,CACI8C,MAAM,OACNsL,UAAU,OACV3I,MAAM,MACNqQ,OAAQ,SAACzY,GACL,IAAM0Y,EAAS,CAAC,CAAC1Y,EAAKtB,OAAQsB,EAAKwE,MAAMuE,KAAK,KAAM,CAAC/I,EAAK+G,aAAc/G,EAAKiH,cAAc8B,KAAK,MAAMA,KAAK,KAC3G,OAAO,uBAAGV,KAAI,sBAAiBqQ,GAAUpQ,OAAO,SAASC,IAAI,uBACxDvI,EAAKwE,SAIlB,kBAAC,KAAD,CACIiB,MAAM,SACNsL,UAAU,aACV3I,MAAM,MAIN6I,QAAQ,EACRwH,OAAQ,SAAChS,EAAoB4R,GACzB,IAAM5X,EAAM,CACR,GACA,YACA4X,EAAa/R,YACb+R,EAAajS,SACbiS,EAAa7R,SACfuC,KAAK,KACD4P,EAAc,CAChBlJ,UAAW,SACXsG,YAAa,OAEX6C,EACF,6BACI,6BACI,0BAAM3Q,MAAO0Q,GAAb,OAGA,8BACKN,EAAa/R,YADlB,IACgC+R,EAAajS,SAD7C,IACwDiS,EAAa7R,UAGzE,6BACI,0BAAMyB,MAAO0Q,GAAb,gBAGA,8BACKN,EAAa/R,cAGtB,6BACI,0BAAM2B,MAAO0Q,GAAb,aAGA,8BACKN,EAAajS,WAGtB,6BACI,0BAAM6B,MAAO0Q,GAAb,WAGA,8BACKN,EAAa7R,WAK9B,OACI,wBAASf,MAAOmT,GACZ,uBAAGvQ,KAAM5H,EAAK6H,OAAO,SAASC,IAAI,uBAC7B9B,OAMrB,kBAAC,KAAD,CACIhB,MAAM,YACN2C,MAAM,MACN2I,UAAU,cACV0H,OAAQ,SAACnS,EAAqB+R,GAC1B,OAAQA,EAAa7S,eACjB,KAAKnD,EAAcwD,UACf,OAAO,uBAAGwC,KAAI,qBAAgB/B,GAAegC,OAAO,SAASC,IAAI,uBAC5D8P,EAAa5S,OAEtB,KAAKpD,EAAc0D,QAEnB,KAAK1D,EAAc2D,QACf,OAAO,8BAAOqS,EAAa5S,WAM3C,kBAAC,KAAD,CACIA,MAAM,iBACNsL,UAAU,YACV3I,MAAM,MAIN6I,QAAQ,EACRwH,OAAQ,SAAC/R,GACL,OAAOmF,KAAKgN,eAAe,SAAS7M,OAAOtF,MAGnD,kBAAC,KAAD,CACIjB,MAAM,YACNsL,UAAU,WACV3I,MAAM,MAIN6I,QAAQ,EACRD,iBAAiB,UACjByH,OAAQ,SAACxS,GACL,OAAO4F,KAAKgN,eAAe,SAAS7M,OAAO/F,S,sCAMvD,OACI,+B,kCAGI7E,GACR,OACI,wBAAOpB,KAAK,QAAQqB,QAASD,EAAMC,Y,+BAIvC,IAAM1D,EAAagF,KAAKJ,MAAM2U,wBAC9B,OAAQvZ,EAAWwE,QACf,KAAKwS,GAAmB1S,KACpB,OAAOU,KAAKoM,gBAChB,KAAK4F,GAAmBhN,MACpB,OAAOhF,KAAK6L,YAAY7Q,EAAWyD,OACvC,KAAKuT,GAAmBrN,QACpB,OAAO3E,KAAKmW,oBAAoBnb,EAAWiF,MAAM,GACrD,KAAK+R,GAAmBnN,OACpB,OAAO7E,KAAKmW,oBAAoBnb,EAAWiF,MAAM,GACrD,KAAK+R,GAAmBhK,UACpB,OAAOhI,KAAKmW,oBAAoBnb,EAAWiF,MAAM,Q,GAtMzB4F,IAAMC,WCJzB4F,G,YAGjB,WAAY9L,GAAe,IAAD,8BACtB,4CAAMA,KAHVC,QAE0B,IAD1BuW,kBAC0B,EAEtB,EAAKvW,GAAK,IAAIqU,GAAa,CACvBnU,SAAU,WACN,EAAK4L,eAETzL,YAAa,CACTqU,wBAAyB,CACrB/U,OAAQwS,GAAmB1S,OAGnClB,MAAOwB,EAAMxB,MACbJ,OAAQ4B,EAAM5B,SAElB,EAAKoY,aAAexW,EAAMyB,SAdJ,E,kFAkBlBrB,KAAKoW,eAAiBpW,KAAKJ,MAAMyB,WACjCrB,KAAKoW,aAAepW,KAAKJ,MAAMyB,SAC/BrB,KAAKH,GAAGwW,mBAAmB,CAAEhV,SAAUrB,KAAKJ,MAAMyB,SAAUyG,KAAM,EAAGC,SAAU,Q,yCAIpED,EAAcC,GAC7B,OAAO/H,KAAKH,GAAGwW,mBAAmB,CAAEhV,SAAUrB,KAAKJ,MAAMyB,SAAUyG,OAAMC,e,yCAG1DD,EAAcC,EAAkB4M,GAC/C,OAAO3U,KAAKH,GAAGyW,mBAAmB,CAAEjV,SAAUrB,KAAKJ,MAAMyB,SAAUyG,OAAMC,WAAU4M,W,+BAuCnF,IAAM9U,EAAKG,KAAKH,GAAG+L,MACnB,OAAO,kBAAC,GAAD,CACH2I,wBAAyB1U,EAAG0U,wBAC5BgB,WAAYvV,KAAKsW,mBAAmBzP,KAAK7G,MACzC6U,QAAS7U,KAAKqW,mBAAmBxP,KAAK7G,Y,GA3EhB6F,IAAMC,WCgBzBiG,0BAlBf,SAAyBnN,EAAmBgB,GAA8B,IAE1DhC,EAERgB,EAFAf,KAAQD,kBACDI,EACPY,EADAb,IAAOC,OAEX,IAAKJ,EACD,MAAM,IAAIzC,MAAM,yCAEpB,MAAO,CACHiD,MAAOR,EAAkBQ,MACzBJ,aAIR,WACI,MAAO,KAGI+N,CAGbC,ICtBmBuK,G,iLAEb,OACI,wBAAMC,iBAAiB,SAASC,UAAU,EAAOrR,UAAU,mBACvD,uBAAMsR,QAAN,CAAcC,IAAI,SAASnP,IAAI,SAASoP,aAAa,GACjD,yBAAKxR,UAAU,MAAME,MAAO,CAAEmH,UAAW,SACrC,kBAAC,GAAD,CAAa/J,MAAO1C,KAAKJ,MAAM8C,UAGvC,uBAAMgU,QAAN,CAAcC,IAAI,cAAcnP,IAAI,cAAcoP,aAAa,GAC3D,kBAAC,GAAD,CAAkBlU,MAAO1C,KAAKJ,MAAM8C,SAExC,uBAAMgU,QAAN,CAAcC,IAAI,cAAcnP,IAAI,aAAaoP,aAAa,GAC1D,yBAAKxR,UAAU,MAAME,MAAO,CAAEmH,UAAW,SACrC,kBAAC,GAAD,CAAYpL,SAAUrB,KAAKJ,MAAM8C,MAAMnE,a,GAdxBsH,IAAMC,WCQxB+Q,I,iMAEb,OAAK7W,KAAKJ,MAAMmF,cAGT,kBAAC,GAAD,CAAWrC,MAAO1C,KAAKJ,MAAMmF,gBAFzB,oD,0CAOX/E,KAAKJ,MAAMkX,SAAS,8BAAgC9W,KAAKJ,MAAMkF,YAAYjD,KAAO,O,+BAIlF,OACI,yBAAKuD,UAAU,2BACX,yBAAKA,UAAU,qCACX,4BACI,wBAAK2R,KAAM,IACP,kBAAC,GAAD,CAAcrU,MAAO1C,KAAKJ,MAAMkF,eAEpC,wBAAKiS,KAAM,IACP,kBAAC,GAAD,SAIZ,yBAAK3R,UAAU,kBACX,yBAAKA,UAAU,iBAAiBE,MAAO,CAAEwN,KAAM,aAC3C,kBAAC,GAAD,CACI/N,cAAe/E,KAAKJ,MAAMmF,cAE1BkB,eAAgBjG,KAAKJ,MAAMqG,eAC3BnB,YAAa9E,KAAKJ,MAAMkF,YACxBqD,mBAAoBnI,KAAKJ,MAAMoX,sBAIvC,yBAAK5R,UAAU,iBAAiBE,MAAO,CAAE2N,WAAY,SAChDjT,KAAKiX,yB,GAtCQpR,IAAMC,YCDvB4F,G,YAGjB,WAAY9L,GAAe,IAAD,8BACtB,4CAAMA,KAHVC,QAE0B,IAD1BqX,gCAC0B,EAEtB,EAAKrX,GAAK,IAAI4E,GAAQ,CAClB1E,SAAU,WACN,EAAK4L,eAETzL,YAAa,CACTV,OAAQC,EAASH,MAErBlB,MAAOwB,EAAMxB,MACbJ,OAAQ4B,EAAM5B,SAElB,EAAKkZ,2BAA6B,KAZZ,E,yEAed7V,GACR,OAAOrB,KAAKH,GAAGsX,iBAAiB9V,K,sCAGpBA,GACZ,OAAOrB,KAAKJ,MAAMrC,SAAS8D,K,sCAI3B,OAAO,uBAAMhE,KAAK,c,kCAGVwC,GAER,OACI,yBAAKuF,UAAU,OACX,yBAAKE,MAAO,CAAEG,MAAO,MAAO2R,OAAQ,qBAChC,kBAAC,GAAD,CAAW3Y,MAAOoB,EAAGpB,Y,mCAMxBoB,GACT,OACI,kBAAC,GAAD,CACIiF,YAAajF,EAAGiF,YAChBC,cAAelF,EAAGkF,cAClBkB,eAAgBjG,KAAKsI,YAAYzB,KAAK7G,MACtCgX,mBAAoBhX,KAAKuI,gBAAgB1B,KAAK7G,MAC9C8W,SAAU9W,KAAKJ,MAAMkX,a,0CAM7B9W,KAAKH,GAAGwX,eAAerX,KAAKJ,MAAMyB,Y,yCAGnBmU,GACXA,EAAcnU,SAAS/F,KAAO0E,KAAKJ,MAAMyB,SAAS/F,IAClDka,EAAcnU,SAASjG,YAAc4E,KAAKJ,MAAMyB,SAASjG,WACzD4E,KAAKH,GAAGwX,eAAerX,KAAKJ,MAAMyB,Y,+BAKtC,IAAMxB,EAAKG,KAAKH,GAAG+L,MACnB,OAAQ/L,EAAGL,QACP,KAAKC,EAASH,KAGd,KAAKG,EAASkF,QACV,OAAO3E,KAAKoM,gBAChB,KAAK3M,EAASuF,MACV,OAAOhF,KAAK6L,YAAYhM,GAC5B,KAAKJ,EAASoF,OACV,OAAO7E,KAAKqM,aAAaxM,Q,GA3EPgG,IAAMC,WCgCzBiG,0BA/Bf,SAAyBnN,EAAmBgB,GAA8B,IAE1DhC,EAERgB,EAFAf,KAAQD,kBACDI,EACPY,EADAb,IAAOC,OAEX,IAAKJ,EACD,MAAM,IAAIzC,MAAM,yCAEpB,MAAO,CACHiD,MAAOR,EAAkBQ,MACzBJ,aAIR,SAA4BR,EAA4BoC,GACpD,MAAO,CACHrC,SAAU,SAACgB,GACP,IAAMhE,EAAmB,CACrB,WACAqC,EAA0B2B,EAAIlD,WAC9BkD,EAAIjD,GACJ6K,OAAO5H,EAAInD,YACbgL,KAAK,KACP5I,EAASD,EAAShD,KAEtBuc,SAAU,SAAChU,GACPtF,EAAS8Z,oBAAUxU,QAKhBiJ,CAGbC,ICdaD,0BAlBf,SAAyBnN,EAAmB2Y,GACxC,MAAO,MAGX,SAA4B/Z,EAA4B+Z,GACpD,MAAO,CACHha,SAAU,SAACia,GACPha,EAASD,EAASia,KAEtBV,SAAU,SAAChU,GACPtF,EAAS8Z,oBAAUxU,QAQhBiJ,CAGb8K,ICuJmBY,G,yTAGEnX,E,EAAAA,GAAIhF,E,EAAAA,GAAIiF,E,EAAAA,GACjBC,EAA2B,CAC7BF,KAAIhF,KAAIiF,M,SAEWP,KAAKS,SAAiD,cAAe,CACxFD,I,0CADGE,E,uBAGAA,G,4QAGMJ,E,EAAAA,GAAIoX,E,EAAAA,IAAKnX,E,EAAAA,GAChBC,EAAyB,CAC3BF,KAAIoX,MAAKnX,M,SAEUP,KAAKS,SAA6C,YAAa,CAClFD,I,0CADGE,E,uBAGAA,G,+QAGSJ,E,EAAAA,GAAIhF,E,EAAAA,GAAIiF,E,EAAAA,GAClBC,EAA4B,CAC9BF,KAAIhF,KAAIiF,M,SAEWP,KAAKS,SAAmD,eAAgB,CAC3FD,I,0CADGE,E,uBAGAA,G,qRAGeJ,E,EAAAA,GAAIhF,E,EAAAA,GAAIiF,E,EAAAA,GACxBC,EAAkC,CACpCF,KAAIhF,KAAIiF,M,SAEWP,KAAKS,SAA+D,eAAgB,CACvGD,I,0CADGE,E,uBAGAA,G,4RAGsBJ,E,EAAAA,GAAIhF,E,EAAAA,GAAIiF,E,EAAAA,GAC/BC,EAAyC,CAC3CF,KAAIhF,KAAIiF,KAAII,OAAQ,EAAGC,MAAO,K,SAEXZ,KAAKS,SAA6E,6BAA8B,CACnID,I,0CADGE,E,uBAGAA,G,6LAGkBF,G,2FACFR,KAAKS,SAA0E,4BAA6B,CAC/HD,I,0CADGE,E,uBAGAA,G,4GAzDgC5E,wBCzGxC,SAASoB,GAA0B7B,GACtC,OAAQA,GACJ,KAAKe,EAAkBa,GACnB,MAAO,MAaZ,SAAS0a,GAAehO,EAAgBpJ,GAE3C,OAXG,SAAmCD,GACtC,OAAQA,GACJ,IAAK,KACD,OAAOlE,EAAkBa,GAC7B,QACI,MAAM,IAAI9B,MAAM,+BAAiCmF,IAKvCtD,CAA0B,OAExC,KAAKZ,EAAkBa,GAsCnB,MArC6B,CACzBI,KAAMhB,EAAeY,GACrBsB,IAAK,CACDvD,WAAYkB,EAAyBS,SACrCtB,UAAWe,EAAkBa,GAC7B3B,GAAIqO,EAAKrO,GACTF,UAAWmF,GAEflF,UAAWsO,EAAKtO,UAChBuc,SAAUjO,EAAKiO,SACfC,WAAYlO,EAAKmO,IAAIC,IACrBC,KAAMrO,EAAKrO,GACX2c,YAAY,EACZpW,KAAM8H,EAAK9H,KACXqW,SAAU,CACNC,MAAOxO,EAAKuO,SAASxI,QAAO,SAAC0I,GACzB,MAAwB,oBAAjBA,EAAQC,QAChB5W,KAAI,SAAC2W,GACJ,OAAOA,EAAQL,OAEnBO,OAAQ3O,EAAKuO,SAASxI,QAAO,SAAC0I,GAC1B,MAAwB,qBAAjBA,EAAQC,QAChB5W,KAAI,SAAC2W,GACJ,OAAOA,EAAQL,OAEnBQ,MAAO5O,EAAKuO,SAASxI,QAAO,SAAC0I,GACzB,MAAwB,oBAAjBA,EAAQC,QAChB5W,KAAI,SAAC2W,GACJ,OAAOA,EAAQL,OAEnBS,QAAS7O,EAAKuO,SAASxI,QAAO,SAAC0I,GAC3B,MAAwB,sBAAjBA,EAAQC,QAChB5W,KAAI,SAAC2W,GACJ,OAAOA,EAAQL,UAoBhC,SAASU,GAAqBC,GACjC,OAAQA,GACJ,IAAK,OACD,OAAOpc,EAAiBqc,KAC5B,IAAK,UACD,OAAOrc,EAAiBsc,QAC5B,IAAK,WACD,OAAOtc,EAAiBuc,SAC5B,IAAK,YACD,OAAOvc,EAAiBwc,UAC5B,IAAK,uBACD,OAAOxc,EAAiByc,qBAC5B,IAAK,uBACD,OAAOzc,EAAiB0c,qBAC5B,IAAK,YACD,OAAO1c,EAAiB2c,UAC5B,IAAK,cACD,OAAO3c,EAAiB4c,YAC5B,IAAK,iBACD,OAAO5c,EAAiB6c,eAC5B,QACI,MAAM,IAAIhe,MAAM,qBAAuBud,IAI5C,SAASU,GAAiBC,GAC7B,OAAQA,GACJ,KAAK/c,EAAiBqc,KAClB,MAAO,OACX,KAAKrc,EAAiBsc,QAClB,MAAO,UACX,KAAKtc,EAAiBuc,SAClB,MAAO,WACX,KAAKvc,EAAiBwc,UAClB,MAAO,YACX,KAAKxc,EAAiByc,qBAClB,MAAO,uBACX,KAAKzc,EAAiB0c,qBAClB,MAAO,uBACX,KAAK1c,EAAiB2c,UAClB,MAAO,YACX,KAAK3c,EAAiB4c,YAClB,MAAO,cACX,KAAK5c,EAAiB6c,eAClB,MAAO,kBAIZ,SAASG,GAAkBC,EAA0BhZ,GAGxD,MAAO,CACHoJ,KAHSgO,GAAe4B,EAAY5P,KAAMpJ,GAGpC8Y,SAFOZ,GAAqBc,EAAYhW,KAAKlG,ODlBtCoa,GACV1b,OAAiB,c,ICuBPyd,G,WAIjB,cAA6D,IAA/Cpb,EAA8C,EAA9CA,MAAON,EAAuC,EAAvCA,IAAuC,yBAH5D2b,oBAG4D,OAF5Drb,WAE4D,OAD5DN,SAC4D,EACxDkC,KAAK5B,MAAQA,EACb4B,KAAKlC,IAAMA,EACXkC,KAAKyZ,eAAiB,IAAIhC,GAAkB,CAAErZ,QAAON,Q,kLA4BzCS,E,EAAAA,IACNqG,EAAS,IAAI6S,GAAkB,CACjCrZ,MAAO4B,KAAK5B,MACZN,IAAKkC,KAAKlC,M,SAGO8G,EAAO8U,SAAS,CACjCpZ,GAAIpD,GAA0BqB,EAAIlD,WAClCqc,IAAK,CAACnZ,EAAIjD,IACViF,GAAIhC,EAAInD,WAAaK,KAAKC,Q,cAHxBgF,E,yBAMC,CACHiJ,KAAMgO,GAAejX,EAAOc,QAAQ,GAAId,EAAOH,M,sQAIpChC,E,EAAAA,IACTqG,EAAS,IAAI6S,GAAkB,CACjCrZ,MAAO4B,KAAK5B,MACZN,IAAKkC,KAAKlC,M,SAGO8G,EAAO+U,WAAW,CACnCrZ,GAAIpD,GAA0BqB,EAAIlD,WAClCC,GAAIiD,EAAIjD,GACRiF,GAAIhC,EAAInD,WAAaK,KAAKC,Q,cAHxBgF,E,yBAMC,CACHoQ,MAAOpQ,EAAOc,QAAQC,KAAI,SAACmY,GACvB,OAAON,GAAkBM,EAAMlZ,EAAOH,S,uQAK9BhC,E,EAAAA,IACVqG,EAAS,IAAI6S,GAAkB,CACjCrZ,MAAO4B,KAAK5B,MACZN,IAAKkC,KAAKlC,M,SAGO8G,EAAOtC,YAAY,CACpChC,GAAIpD,GAA0BqB,EAAIlD,WAClCC,GAAIiD,EAAIjD,GACRiF,GAAIhC,EAAInD,WAAaK,KAAKC,Q,cAHxBgF,E,yBAMC,CACHoQ,MAAOpQ,EAAOc,QAAQC,KAAI,SAACmY,GACvB,OAAON,GAAkBM,EAAMlZ,EAAOH,S,oRAKvBhC,E,EAAAA,IAAKoC,E,EAAAA,OAAQC,E,EAAAA,MAC9BgE,EAAS,IAAI6S,GAAkB,CACjCrZ,MAAO4B,KAAK5B,MACZN,IAAKkC,KAAKlC,M,SAGO8G,EAAOiV,uBAAuB,CAC/CvZ,GAAIpD,GAA0BqB,EAAIlD,WAClCC,GAAIiD,EAAIjD,GACRiF,GAAIhC,EAAInD,WAAaK,KAAKC,MAC1BiF,SAAQC,U,cAJNF,E,OAwBAoZ,EAAkC,GACxCpZ,EAAOc,QAAQuY,SAAQ,SAACC,GACpBA,EAAmBF,SAASC,SAAQ,SAACE,GACjCH,EAAS1S,KAAK,CACV8S,UAAWD,EAAQE,WACnBC,UAAWH,EAAQzW,WACnBM,WAAYkW,EAAmBjX,OAAOlB,KACtCwY,UAAW,CACP1W,YAAaqW,EAAmBjX,OAAOa,aACvCH,SAAUuW,EAAmBjX,OAAOW,UACpCG,QAASmW,EAAmBjX,OAAOc,iB,kBAM5C,CACHiW,a,kRAIiBvb,E,EAAAA,IACfqG,EAAS,IAAI6S,GAAkB,CACjCrZ,MAAO4B,KAAK5B,MACZN,IAAKkC,KAAKlC,M,SAGO8G,EAAO0V,yBAAyB,CACjDha,GAAIpD,GAA0BqB,EAAIlD,WAClCC,GAAIiD,EAAIjD,GACRiF,GAAIhC,EAAInD,WAAaK,KAAKC,Q,cAHxBgF,E,OAMA6Z,EAAuC,GAC7C7Z,EAAOc,QAAQuY,SAAQ,SAACH,GACpB,IAAMP,EAAWZ,GAAqBmB,EAAKrW,KAAKlG,MAO5Ckd,EAAUC,MAAK,SAACC,GAChB,OAAOA,EAAEC,OAASd,EAAKrW,KAAKmX,MACxBD,EAAEE,KAAOf,EAAKrW,KAAKoX,IACnBF,EAAEpB,WAAaA,MAIvBkB,EAAUnT,KAAK,CACXiS,WACAqB,KAAMd,EAAKrW,KAAKmX,KAChBC,GAAIf,EAAKrW,KAAKoX,QAGhBC,EAAeL,EAAUpN,QAAO,SAACrS,EAAG2f,GACtC,IAAII,EAAQ/f,EAAE8Q,IAAI6O,EAAEC,MAMpB,OALKG,IACDA,EAAQ,IAEZA,EAAMzT,KAAKqT,GACX3f,EAAE4J,IAAI+V,EAAEC,KAAMG,GACP/f,IACR,IAAIuS,KAEDyD,EAAQ,IAAIzD,IAClB3M,EAAOc,QAAQuY,SAAQ,SAACH,GACpB,IAAK9I,EAAMgK,IAAIlB,EAAKjQ,KAAKrO,IAAK,CAC1B,IAAMqO,EAAOgO,GAAeiC,EAAKjQ,KAAMjJ,EAAOH,IAC1Cwa,GAAS,EACCH,EAAahP,IAAIjC,EAAKpL,IAAIjD,MAEpCyf,GAAS,GAGbjK,EAAMpM,IAAIkV,EAAKjQ,KAAKrO,GAAI,CACpBA,GAAIqO,EAAKpL,IAAIjD,GACbqO,OAAMoR,e,kBAKX,CACHC,WAAY,CACRlK,MAAO7D,MAAMyN,KAAK5J,EAAMmK,UACxBV,e,grBCpZKW,G,YAEjB,WAAYtb,GAAyB,IAAD,8BAChC,4CAAMA,KAFVA,WACoC,EAEhC,EAAKA,MAAQA,EAFmB,E,oHAKhBub,G,kFAChBnb,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEIY,OAAQC,EAASkF,aAInBC,EAAS,IAAI4U,GAAc,CAC7Bpb,MAAO4B,KAAKJ,MAAMxB,MAClBN,IAAKkC,KAAKJ,MAAM5B,OAAOC,SAASC,cAAcJ,M,kBAKvB8G,EAAOwW,QAAQ,CAClC7c,IAAK4c,I,gBADDxR,E,EAAAA,KAIR3J,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEIY,OAAQC,EAASoF,OACjBwW,WAAY1R,EACZ2R,aAAc3R,O,kDAItBnL,QAAQC,MAAM,QAAd,MACAuB,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEIY,OAAQC,EAASuF,MACjBvG,MAAO,KAAGC,a,gMAMJyc,G,8EACJnb,KAAK4L,MAETpM,SAAWC,EAASoF,O,wDAIxBD,EAAS,IAAI4U,GAAc,CAC7Bpb,MAAO4B,KAAKJ,MAAMxB,MAClBN,IAAKkC,KAAKJ,MAAM5B,OAAOC,SAASC,cAAcJ,M,SAG3B8G,EAAOwW,QAAQ,CAAE7c,IAAK4c,I,gBAArCxR,E,EAAAA,KAER3J,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEI0c,aAAc3R,O,4GA/DUhK,GCRnB4b,I,mMACJ5R,GACT,IAAMjE,EAAI,mDAA+CiE,EAAKqO,MACxDrS,EAAS3F,KAAKJ,MAAM4b,UAAY,SAAW,UAC3CvF,EACF,kBAAC,IAAMvP,SAAP,KACI,kFACA,kEAGR,OACI,wBAAS5D,MAAOmT,GACZ,uBAAGvQ,KAAMA,EAAMC,OAAQA,GAClBgE,EAAKpL,IAAIjD,GADd,IACkB,uBAAM+B,KAAK,a,+BAOrC,IAAMsM,EAAO3J,KAAKJ,MAAM+J,KACxB,OAAQA,EAAKtM,MACT,KAAMhB,EAAeY,GACjB,OAAO+C,KAAKyb,aAAa9R,Q,GAvBH9D,IAAMC,Y,ikBCQvB4V,G,YAEjB,WAAY9b,GAA4B,IAAD,8BACnC,4CAAMA,KAFVA,WACuC,EAEnC,EAAKA,MAAQA,EAFsB,E,uHAKhBub,G,gFACbvW,EAAS,IAAI4U,GAAc,CAC7B1b,IAAKkC,KAAKJ,MAAM5B,OAAOC,SAASC,cAAcJ,IAC9CM,MAAO4B,KAAKJ,MAAMxB,Q,SAGlB4B,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEIY,OAAQC,EAASkF,a,SAIGC,EAAO+W,mBAAmB,CAClDpd,IAAK4c,EAELxa,OAAQ,EACRC,MAAO,M,OAJLgC,E,OAgEN5C,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEIY,OAAQC,EAASoF,OACjBjC,cAAeA,EAAckX,c,gDAIrC9Z,KAAK0E,KAAI,SAAC9F,GACN,MAAO,CACHY,OAAQC,EAASuF,MACjBvG,MAAO,CACHwG,KAAM,YACNC,OAAQ,mCACRxG,QAAS,KAAGA,a,qHAlGSiB,GCRxBic,I,6LAEb,OAAO,wBACH/N,WAAY7N,KAAKJ,MAAMgD,cACvBwC,UAAU,2DACVoE,KAAK,QACLsE,YAAY,EACZC,OAAQ,CAAEC,EAAG,QACbC,OAAQ,SAAC4N,GACL,MAAO,CACHA,EAAIxB,UAAU1W,YACdkY,EAAIxB,UAAU5W,SACdoY,EAAIxB,UAAUxW,QACdgY,EAAI3B,WACN9T,KAAK,MAEX8H,UAAU,GAEV,uBAAOC,OAAP,CACIC,UAAW,aACXtL,MAAM,cACN2C,MAAM,MACNqQ,OAAQ,SAAChS,EAAoB+X,GACzB,IAAM3V,EAAO,CACT,WACAC,OAAO0V,EAAIxB,UAAU1W,aACrBwC,OAAO0V,EAAIxB,UAAU5W,UACrB0C,OAAO0V,EAAIxB,UAAUxW,UACvBuC,KAAK,KACDtI,EAAM,IAAImT,IAAI,GAAI5K,OAAOE,SAASuV,QAExC,OADAhe,EAAIoI,KAAOA,EAEP,uBAAGR,KAAM5H,EAAIuT,WAAY1L,OAAO,UAC3B7B,MAKjB,uBAAOqK,OAAP,CACIC,UAAW,YACXtL,MAAM,UACN2C,MAAM,MACNqQ,OAAQ,SAACoE,EAAmB2B,GACxB,IAAM3V,EAAO,CACT,WACAC,OAAO0V,EAAIxB,UAAU1W,aACrBwC,OAAO0V,EAAIxB,UAAU5W,UACrB0C,OAAO0V,EAAIxB,UAAUxW,UACvBuC,KAAK,KAEDtI,EAAM,IAAImT,IAAI,GAAI5K,OAAOE,SAASuV,QACxChe,EAAIoI,KAAOA,EACX,IAAM6V,EAASje,EAAIqT,aAGnB,OAFA4K,EAAOrX,IAAI,MAAO,WAClBqX,EAAOrX,IAAI,QAASwV,GAEhB,uBAAGxU,KAAM5H,EAAIuT,WAAY1L,OAAO,UAC3BuU,MAKjB,uBAAO/L,OAAP,CACIC,UAAW,YACX3I,MAAM,MACN3C,MAAM,SACNgT,OAAQ,SAACsE,GACL,OAAOlR,KAAKgN,eAAe,SAAS7M,OAAO+Q,S,mCAMvD,OACI,uBAAG9U,MAAO,CAAEwH,UAAW,WAAvB,+B,+BAMJ,OAAwC,IAApC9M,KAAKJ,MAAMgD,cAAc1H,OAClB8E,KAAK0T,aAET1T,KAAKgc,kB,GAnFuBnW,IAAMC,YCM5B4F,G,YAEjB,WAAY9L,GAAe,IAAD,8BACtB,4CAAMA,KAFVC,QAC0B,EAEtB,EAAKA,GAAK,IAAI6b,GAAgB,CAC1B3b,SAAU,WACN,EAAK4L,eAETzL,YAAa,CACTV,OAAQC,EAASH,MAErBlB,MAAOwB,EAAMxB,MACbJ,OAAQ4B,EAAM5B,SAVI,E,iFAgBtB,OADWgC,KAAKH,GAAG+L,MACRpM,QACP,KAAKC,EAASH,KACVU,KAAKH,GAAGyU,iBAAiBtU,KAAKJ,MAAMub,Y,sCAK5C,OAAO,uBAAM9d,KAAK,c,kCAGVwC,GACR,OAAO,kBAAC,GAAD,CAAWpB,MAAOoB,EAAGpB,U,mCAGnBoB,GACT,OACI,kBAAC,GAAD,CACI+C,cAAe/C,EAAG+C,kB,+BAM1B,IAAM/C,EAAKG,KAAKH,GAAG+L,MACnB,OAAQ/L,EAAGL,QACP,KAAKC,EAASH,KAEd,KAAKG,EAASkF,QACV,OAAO3E,KAAKoM,gBAChB,KAAK3M,EAASuF,MACV,OAAOhF,KAAK6L,YAAYhM,GAC5B,KAAKJ,EAASoF,OACV,OAAO7E,KAAKqM,aAAaxM,Q,GAlDPgG,IAAMC,WCczBiG,0BAlBf,SAAyBnN,EAAmBgB,GAA8B,IAE1DhC,EAERgB,EAFAf,KAAQD,kBACDI,EACPY,EADAb,IAAOC,OAEX,IAAKJ,EACD,MAAM,IAAIzC,MAAM,yCAEpB,MAAO,CACHiD,MAAOR,EAAkBQ,MACzBJ,aAIR,WACI,MAAO,KAGI+N,CAGbC,I,ikBChBmBiQ,G,YAEjB,WAAYrc,GAAwB,IAAD,8BAC/B,4CAAMA,KAFVA,WACmC,EAE/B,EAAKA,MAAQA,EAFkB,E,uHAKZub,G,kFACnBnb,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEIY,OAAQC,EAASkF,aAInBC,EAAS,IAAI4U,GAAc,CAC7Bpb,MAAO4B,KAAKJ,MAAMxB,MAClBN,IAAKkC,KAAKJ,MAAM5B,OAAOC,SAASC,cAAcJ,M,kBAKtB8G,EAAOtC,YAAY,CACvC/D,IAAK4c,I,iBADDrK,E,EAAAA,OAIF6D,MAAK,SAACjX,EAAwB8P,GAChC,OAAO9P,EAAEiM,KAAK9H,KAAK+L,cAAcJ,EAAE7D,KAAK9H,SAG5C7B,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEIY,OAAQC,EAASoF,OACjBiM,MAAOA,O,kDAIftS,QAAQC,MAAM,QAAd,MACAuB,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEIY,OAAQC,EAASuF,MACjBvG,MAAO,KAAGC,a,sHA3CSiB,GCNlBuc,I,8LACF7C,GACX,OAAOD,GAAiBC,K,yCAGR,IAAD,OACf,OAAO,wBACHxL,WAAY7N,KAAKJ,MAAMkR,MACvB1L,UAAU,2DACVoE,KAAK,QACLsE,YAAY,EACZG,OAAQ,SAAC4N,GACL,OAAOA,EAAIlS,KAAKpL,IAAIjD,IAExByS,OAAQ,CAAEC,EAAG,SAEb,kBAAC,KAAD,CAAQI,UAAU,YAAYtL,MAAM,OAAO2C,MAAM,QACjD,kBAAC,KAAD,CAAQ2I,UAAU,YAAYtL,MAAM,KAAK2C,MAAM,MAC3CqQ,OAAQ,SAACxa,EAAYqO,GACjB,IAAMsM,EACF,6BACKtM,EAAKA,KAAK9H,KAAK,6BACf8H,EAAKA,KAAKqO,KACX,6BACCrO,EAAKA,KAAKkO,YAGnB,OACI,wBAAS/U,MAAOmT,EAAS1O,UAAU,QAC/B,uBAAG7B,KAAI,+BAA0BpK,EAA1B,YAAgCqO,EAAKA,KAAKpL,IAAInD,WAAauK,OAAO,WACpErK,OAKrB,kBAAC,KAAD,CAAQ8S,UAAU,WAAWtL,MAAM,WAAW2C,MAAM,MAChDqQ,OAAQ,SAACuD,GACL,OAAO,EAAK8C,eAAe9C,S,sCAKvC,OAAO,wBAAO7Q,YAAY,cAAcC,MAAO,KAAMC,2B,+BAGrD,OAAgC,IAA5B1I,KAAKJ,MAAMkR,MAAM5V,OACV8E,KAAK2I,gBAET3I,KAAKoc,uB,GAhDsBvW,IAAMC,YCK3B4F,G,YAGjB,WAAY9L,GAAe,IAAD,8BACtB,4CAAMA,KAHVC,QAE0B,IAD1Bwc,mCAC0B,EAEtB,EAAKxc,GAAK,IAAIoc,GAAU,CACpBlc,SAAU,WACN,EAAK4L,eAETzL,YAAa,CACTV,OAAQC,EAASH,MAErBlB,MAAOwB,EAAMxB,MACbJ,OAAQ4B,EAAM5B,SAElB,EAAKqe,8BAAgC,KAZf,E,6EAwBtB,OAAO,uBAAMhf,KAAK,c,kCAGVwC,GAER,OACI,yBAAKuF,UAAU,OACX,yBAAKE,MAAO,CAAEG,MAAO,MAAO2R,OAAQ,qBAChC,kBAAC,GAAD,CAAW3Y,MAAOoB,EAAGpB,Y,mCAMxBoB,GACT,OACI,kBAAC,GAAD,CACIiR,MAAOjR,EAAGiR,U,0CAMlB9Q,KAAKH,GAAGyc,iBAAiBtc,KAAKJ,MAAMub,W,yCAGrB3F,M,+BAQf,IAAM3V,EAAKG,KAAKH,GAAG+L,MACnB,OAAQ/L,EAAGL,QACP,KAAKC,EAASH,KAGd,KAAKG,EAASkF,QACV,OAAO3E,KAAKoM,gBAChB,KAAK3M,EAASuF,MACV,OAAOhF,KAAK6L,YAAYhM,GAC5B,KAAKJ,EAASoF,OACV,OAAO7E,KAAKqM,aAAaxM,Q,GAvEPgG,IAAMC,WCoCzBiG,0BA/Bf,SAAyBnN,EAAmBgB,GAA8B,IAE1DhC,EAERgB,EAFAf,KAAQD,kBACDI,EACPY,EADAb,IAAOC,OAEX,IAAKJ,EACD,MAAM,IAAIzC,MAAM,yCAEpB,MAAO,CACHiD,MAAOR,EAAkBQ,MACzBJ,aAIR,SAA4BR,EAA4BoC,GACpD,MAAO,CACHrC,SAAU,SAACgB,GACP,IAAMhE,EAAmB,CACrB,WACA2C,GAA0BqB,EAAIlD,WAC9BkD,EAAIjD,GACJ6K,OAAO5H,EAAInD,YACbgL,KAAK,KACP5I,EAASD,EAAShD,KAEtBuc,SAAU,SAAChU,GACPtF,EAAS8Z,oBAAUxU,QAKhBiJ,CAGbC,I,ikBCrCmBuQ,G,YAEjB,WAAY3c,GAA8B,IAAD,8BACrC,4CAAMA,KAFVA,WACyC,EAErC,EAAKA,MAAQA,EAFwB,E,uHAKlBub,G,wFACnBnb,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEIY,OAAQC,EAASkF,aAInBC,EAAS,IAAI4U,GAAc,CAC7Bpb,MAAO4B,KAAKJ,MAAMxB,MAClBN,IAAKkC,KAAKJ,MAAM5B,OAAOC,SAASC,cAAcJ,M,kBAKvB8G,EAAOwW,QAAQ,CAClC7c,IAAK4c,I,uBADDxR,E,EAAAA,K,SAIqB/E,EAAO4X,iBAAiB,CACjDje,IAAK4c,I,gBADDH,E,EAAAA,WAIFyB,EAAuB,CACzBnhB,GAAIqO,EAAKpL,IAAIjD,GACbyf,QAAQ,EACRpR,KAAMA,GAEVqR,EAAWlK,MAAM1J,KAAKqV,GAEtBzc,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEIY,OAAQC,EAASoF,OACjB6X,MAAO1B,EACPrR,Y,kDAIRnL,QAAQC,MAAM,QAAd,MACAuB,KAAK0E,KAAI,SAAC9F,GACN,OAAO,MACAA,EADP,CAEIY,OAAQC,EAASuF,MACjBvG,MAAO,CACHwG,KAAM,QACNC,OAAQ,4BACRxG,QAAS,KAAGA,c,sHAtDSiB,G,UCYxBgd,I,mBAIjB,WAAY/c,GAA2B,IAAD,8BAClC,4CAAMA,KAJVgd,sBAGsC,IAFtCC,eAEsC,IADtCC,aACsC,EAElC,EAAKD,UAAYhX,IAAMkX,YACvB,EAAKH,iBAAmB/W,IAAMkX,YAHI,E,0EAMxB,IAAD,OACT,GAA+B,OAA3B/c,KAAK6c,UAAUhS,QAAnB,CAGA,IAAMgQ,EAAQ,IAAImC,KAAoB,IACtCnC,EAAMoC,IAAIjd,KAAKJ,MAAMK,KAAK4a,MAAMpZ,KAAI,SAACkI,GACjC,IAAIb,EASJ,OAPIA,EADAa,EAAKuT,OACG,MAEA,QAERvT,EAAKoR,SACLjS,EAAQ,SAEL,CACHxN,GAAIqO,EAAKrO,GACT8R,MAAOzD,EAAKyD,MACZtE,MAAO,CACHqU,OAAQrU,GAEZsU,MAAOzT,EAAKoR,QAAUpR,EAAKuT,OAAS,UAAY,WAKxD,IAAMG,EAAQ,IAAIL,KAAoB,IACtCK,EAAMJ,IAAIjd,KAAKJ,MAAMK,KAAKod,MAAM5b,KAAI,SAAC6b,GACjC,MAAO,CACH5C,KAAM4C,EAAE5C,KACRC,GAAI2C,EAAE3C,GACN4C,OAAQ,KACRnQ,MAAOkQ,EAAElQ,WAKjB,IACM/K,EAAmB,CACrBmb,OAAQ,CACJC,aAAc,CACVC,SAAS,EACTxI,UAAW,KACXyI,WAAY,WACZC,YAAa,MAGrBC,SAAS,EACTtY,OAXgB,QAehBsV,MAAO,CACH/R,MAAO,CACHgV,UAAW,CACPX,OAAQ,OACRY,WAAY,0BAGpB3G,OAAQ,CACJ4G,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,MAMlBne,KAAK8c,QAAU,IAAIsB,KAAQpe,KAAK6c,UAAUhS,QAAS,CAAEgQ,QAAOwC,SAAShb,GACrErC,KAAK8c,QAAQuB,GAAG,cAAc,YAA0B,IAAfC,EAAc,cAAtBzD,MAAsB,MACnD,EAAKjb,MAAM2e,aAAaD,MAExBte,KAAKJ,MAAM4e,gBACXxe,KAAK8c,QAAQ2B,YAAY,CAACze,KAAKJ,MAAM4e,oB,0CAIxB,IAAD,OAChBxe,KAAK0e,aAELrY,OAAOsY,iBAAiB,UAAU,WAC9B,EAAKC,cAET5e,KAAK4e,a,iCAIL,IAAIC,EAEAA,EADA7e,KAAK4c,iBAAiB/R,QACR7K,KAAK4c,iBAAiB/R,QAAQiU,aAAe,KAE7C,QAEd9e,KAAK8c,UACL9c,KAAK8c,QAAQiC,QAAQ,OAAQF,GAC7B7e,KAAK8c,QAAQkC,Y,2CAKbhf,KAAKJ,MAAM4e,gBAAkBxe,KAAK8c,SAClC9c,KAAK8c,QAAQ2B,YAAY,CAACze,KAAKJ,MAAM4e,mB,+BAKzC,OAAO,yBAAKjgB,IAAKyB,KAAK4c,iBAAkBxX,UAAU,gBAC9C,yBAAK7G,IAAKyB,KAAK6c,UAAWzX,UAAU,mC,GAtHNS,IAAMC,YChB3BmZ,I,mBACjB,WAAYrf,GAA4B,IAAD,8BACnC,4CAAMA,KACDhB,MAAQ,CACT4f,eAAgB,MAHe,E,6EAMvBU,GACZlf,KAAKyG,SAAS,CACV+X,eAAgBU,EAASvV,KAAKpL,IAAIjD,O,oCAG3B,IAAD,OACV,OAAO,wBACHuS,WAAY7N,KAAKJ,MAAM8c,MAAM5L,MAC7BtH,KAAK,QACLsE,YAAY,EACZC,OAAQ,CAAEC,EAAG,QACb5I,UAAU,2DACV+Z,aAAc,CAIV9hB,KAAM,QACN+hB,OAAO,EACPC,uBAAuB,EACvBC,gBAAiBtf,KAAKpB,MAAM4f,eAAiB,CAACxe,KAAKpB,MAAM4f,gBAAkB,IAE/EvQ,OAAQ,SAACwO,GACL,OAAOA,EAAKnhB,KAGhB,uBAAO6S,OAAP,CAAcC,UAAU,OACpBC,iBAAiB,SACjBC,OAAQ,SAAC5Q,EAAmB8P,GACxB,OAAO9P,EAAEiM,KAAK9H,KAAK+L,cAAcJ,EAAE7D,KAAK9H,OAE5C2F,IAAI,UACJ1E,MAAM,OACN2C,MAAM,MACNqQ,OAAQ,SAACnM,EAAoBuV,GACzB,OAAO,0BACH5Z,MAAO,CAAEia,OAAQ,WACjB5Y,QAAS,WACL,EAAK6Y,gBAAgBN,KAExBvV,EAAK9H,SAKlB,uBAAQsM,OAAR,CAAeC,UAAU,OACrBE,OAAQ,SAAC5Q,EAAmB8P,GACxB,OAAO9P,EAAEiM,KAAK9H,KAAK+L,cAAcJ,EAAE7D,KAAK9H,OAE5CiB,MAAM,KACN2C,MAAM,MAENqQ,OAAQ,SAACnM,GACL,IAAM7L,EAAM,CACR,WACA,WACAZ,EAA0ByM,EAAKpL,IAAIlD,WACnCsO,EAAKpL,IAAIjD,IACX8K,KAAK,KACP,OACI,uBAAGV,KAAM5H,EAAK6H,OAAO,WAAWgE,EAAKpL,IAAIjD,U,mCAMhDgjB,GACTte,KAAKyG,SAAS,CACV+X,eAAgBF,M,+BAGd,IAAD,OA2BCre,EAAoB,CACtB4a,MA3BU7a,KAAKJ,MAAM8c,MAAM5L,MAAMrP,KAAI,SAACyd,GACtC,IAAMhC,EAASgC,EAAS5jB,KAAO,EAAKsE,MAAM+J,KAAKpL,IAAIjD,GACnD,MAAO,CACHA,GAAI4jB,EAAS5jB,GACb8R,MAAO8R,EAASvV,KAAK9H,KACrBqb,OAAQA,EACRnC,OAAQmE,EAASnE,OACjB0E,WAAYP,EAASvV,KAAKpL,IAAIjD,KAAO,EAAKsD,MAAM4f,mBAqBpDnB,MATUrd,KAAKJ,MAAM8c,MAAMnC,UAAU9Y,KAAI,SAAC4X,GAC1C,MAAO,CACHqB,KAAMrB,EAASqB,KACfC,GAAItB,EAASsB,GACbvN,MAAOgM,GAAiBC,EAASA,eAOzC,OACI,yBAAKjU,UAAU,iBACX,yBAAKA,UAAU,uBACX,kBAAC,GAAD,CACInF,KAAMA,EACNsF,OAAO,QACPiZ,eAAgBxe,KAAKpB,MAAM4f,eAC3BD,aAAcve,KAAKue,aAAa1X,KAAK7G,SAE7C,yBAAKoF,UAAU,uBACVpF,KAAKgc,oB,GAtHiBnW,IAAMC,YCE5B4F,G,YAGjB,WAAY9L,GAAe,IAAD,8BACtB,4CAAMA,KAHVC,QAE0B,IAD1Bwc,mCAC0B,EAEtB,EAAKxc,GAAK,IAAI0c,GAAgB,CAC1Bxc,SAAU,WACN,EAAK4L,eAETzL,YAAa,CACTV,OAAQC,EAASH,MAErBlB,MAAOwB,EAAMxB,MACbJ,OAAQ4B,EAAM5B,SAElB,EAAKqe,8BAAgC,KAZf,E,6EAwBtB,OAAO,uBAAMhf,KAAK,c,kCAGVwC,GAER,OACI,yBAAKuF,UAAU,OACX,yBAAKE,MAAO,CAAEG,MAAO,MAAO2R,OAAQ,qBAChC,kBAAC,GAAD,CAAW3Y,MAAOoB,EAAGpB,Y,mCAMxBoB,GACT,OACI,kBAAC,GAAD,CACI6c,MAAO7c,EAAG6c,MAAO/S,KAAM9J,EAAG8J,S,0CAMlC3J,KAAKH,GAAG2c,iBAAiBxc,KAAKJ,MAAMub,W,yCAGrB3F,M,+BAQf,IAAM3V,EAAKG,KAAKH,GAAG+L,MACnB,OAAQ/L,EAAGL,QACP,KAAKC,EAASH,KAGd,KAAKG,EAASkF,QACV,OAAO3E,KAAKoM,gBAChB,KAAK3M,EAASuF,MACV,OAAOhF,KAAK6L,YAAYhM,GAC5B,KAAKJ,EAASoF,OACV,OAAO7E,KAAKqM,aAAaxM,Q,GAvEPgG,IAAMC,WCoCzBiG,0BA/Bf,SAAyBnN,EAAmBgB,GAA8B,IAE1DhC,EAERgB,EAFAf,KAAQD,kBACDI,EACPY,EADAb,IAAOC,OAEX,IAAKJ,EACD,MAAM,IAAIzC,MAAM,yCAEpB,MAAO,CACHiD,MAAOR,EAAkBQ,MACzBJ,aAIR,SAA4BR,EAA4BoC,GACpD,MAAO,CACHrC,SAAU,SAACgB,GACP,IAAMhE,EAAmB,CACrB,WACA2C,GAA0BqB,EAAIlD,WAC9BkD,EAAIjD,GACJ6K,OAAO5H,EAAInD,YACbgL,KAAK,KACP5I,EAASD,EAAShD,KAEtBuc,SAAU,SAAChU,GACPtF,EAAS8Z,oBAAUxU,QAKhBiJ,CAGbC,ICzCmB0T,G,uLACFxH,GACX,OAAwB,IAApBA,EAAShd,OACF,gCAEJgd,EAASzW,KAAI,SAACke,EAAGvX,GACpB,OACI,yBAAKZ,IAAKrB,OAAOiC,IACZuX,Q,uCAOb,OAAwC,IAApC3f,KAAKJ,MAAM+J,KAAKiO,SAAS1c,OAClB,gCAGJ8E,KAAKJ,MAAM+J,KAAKiO,SAASnW,KAAI,SAACme,EAASxX,GAE1C,OADiBwX,EAAQ9Q,MAAM,MACfrN,KAAI,SAACme,EAASC,GAC1B,OAAO,uBAAGrY,IAAKrB,OAAOiC,GAAS,IAAMjC,OAAO0Z,IAAUD,W,qCAM9D,OACI,yBAAKxa,UAAU,yBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,sBAAf,MAGA,yBAAKA,UAAU,qBACX,kBAAC,GAAD,CAAUuE,KAAM3J,KAAKJ,MAAM+J,KAAM6R,WAAW,MAGpD,yBAAKpW,UAAU,iBACX,yBAAKA,UAAU,sBAAf,QAGA,yBAAKA,UAAU,qBACVpF,KAAKJ,MAAM+J,KAAK9H,OAGzB,yBAAKuD,UAAU,iBACX,yBAAKA,UAAU,sBAAf,cAGA,yBAAKA,UAAU,qBACVpF,KAAKJ,MAAM+J,KAAKkO,aAGzB,yBAAKzS,UAAU,iBACX,yBAAKA,UAAU,sBAAf,YAGA,yBAAKA,UAAU,qBACVpF,KAAK8f,mBAGd,yBAAK1a,UAAU,iBACX,yBAAKA,UAAU,sBAAf,YAGA,yBAAKA,UAAU,qBACVpF,KAAK+f,yB,0CAOtB,OACI,yBAAK3a,UAAU,yBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,sBAAf,SAGA,yBAAKA,UAAU,qBACVpF,KAAKggB,eAAehgB,KAAKJ,MAAM+J,KAAKuO,SAASC,SAGtD,yBAAK/S,UAAU,iBACX,yBAAKA,UAAU,sBAAf,UAGA,yBAAKA,UAAU,qBACVpF,KAAKggB,eAAehgB,KAAKJ,MAAM+J,KAAKuO,SAASI,UAGtD,yBAAKlT,UAAU,iBACX,yBAAKA,UAAU,sBAAf,SAGA,yBAAKA,UAAU,qBACVpF,KAAKggB,eAAehgB,KAAKJ,MAAM+J,KAAKuO,SAASK,SAGtD,yBAAKnT,UAAU,iBACX,yBAAKA,UAAU,sBAAf,WAGA,yBAAKA,UAAU,qBACVpF,KAAKggB,eAAehgB,KAAKJ,MAAM+J,KAAKuO,SAASK,Y,oCAO9D,OACI,kBAAC,GAAD,CAAe4C,QAASnb,KAAKJ,MAAM+J,KAAKpL,Q,4CAK5C,OACI,kBAAC,GAAD,CAAe4c,QAASnb,KAAKJ,MAAM+J,KAAKpL,Q,uCAI5C,OACI,0D,uCAMJ,OAAO,kBAAC0hB,GAAD,CACH9E,QAASnb,KAAKJ,MAAM+J,KAAKpL,Q,+BAK7B,IAAM2hB,EAAO,CACT,CACIvJ,IAAK,QACL7T,MAAO,QACPqd,UAAWngB,KAAKogB,eAEpB,CACIzJ,IAAK,SACL7T,MAAO,SACPqd,UAAWngB,KAAKqgB,gBAEpB,CACI1J,IAAK,WACL7T,MAAO,WACPqd,UAAWngB,KAAK+f,qBAEpB,CACIpJ,IAAK,WACL7T,MAAO,WACPqd,UAAWngB,KAAKyL,kBAEpB,CACIkL,IAAK,SACL7T,MAAO,cACPqd,UAAWngB,KAAKmW,wBAQxB,OACI,kBAAC,WAAD,CAAU+J,KAAMA,Q,GAzKQra,IAAMC,WCNrBX,G,iLAEb,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,WAAWE,MAAO,CAAEgb,eAAgB,WAC/C,yBAAKjb,IAAI,qBAAqBC,MAAO,CAAEC,OAAQ,QAAUC,IAAI,wBAEjE,yBAAKJ,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,qBAAqBE,MAAO,CAAEG,MAAO,QAApD,UAGA,yBAAKL,UAAU,qBACX,uBACIM,KAAK,2BACLC,OAAO,SACPC,IAAI,uBAHR,wBASR,yBAAKR,UAAU,iBACX,yBAAKA,UAAU,qBAAqBE,MAAO,CAAEG,MAAO,QAApD,WAGA,yBAAKL,UAAU,qBAAf,wB,GA3BYS,IAAMC,WCCzBya,G,iLAEb,OACI,yBAAKnb,UAAU,aACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,qBAAqBE,MAAO,CAAEG,MAAO,QAApD,MAGA,yBAAKL,UAAU,qBAAqBpF,KAAKJ,MAAM+J,KAAKqO,OAExD,yBAAK5S,UAAU,iBACX,yBAAKA,UAAU,qBAAqBE,MAAO,CAAEG,MAAO,QAApD,QAGA,yBAAKL,UAAU,qBACVpF,KAAKJ,MAAM+J,KAAK9H,Y,GAfAgE,IAAMC,WCQ1B0a,G,4LAEbxgB,KAAKJ,MAAMkX,SAAX,qCAAkD9W,KAAKJ,MAAMyb,WAAWxZ,KAAxE,cAAkF7B,KAAKJ,MAAMyb,WAAWrD,KAAxG,Q,qCAIA,OACI,yBAAK5S,UAAU,2BACX,yBAAKA,UAAU,qCACX,4BACI,wBAAK2R,KAAM,IACP,kBAAC,GAAD,CAAapN,KAAM3J,KAAKJ,MAAMyb,cAElC,wBAAKtE,KAAM,IACP,kBAAC,GAAD,SAIZ,yBAAK3R,UAAU,kBAEX,yBAAKA,UAAU,kBACX,kBAAC,GAAD,CAAQuE,KAAM3J,KAAKJ,MAAM0b,oB,+BAQzC,OAAOtb,KAAKygB,mB,GA7BsB5a,IAAMC,WCC3B4F,G,YAGjB,WAAY9L,GAAe,IAAD,8BACtB,4CAAMA,KAHVC,QAE0B,IAD1Bwc,mCAC0B,EAEtB,EAAKxc,GAAK,IAAIqb,GAAW,CACrBnb,SAAU,WACN,EAAK4L,eAETzL,YAAa,CACTV,OAAQC,EAASH,MAErBlB,MAAOwB,EAAMxB,MACbJ,OAAQ4B,EAAM5B,SAElB,EAAKqe,8BAAgC,KAZf,E,wEAeflB,GACP,OAAOnb,KAAKH,GAAG6gB,gBAAgBvF,K,qCAGpBA,GACX,OAAOnb,KAAKJ,MAAMrC,SAAS4d,K,sCAI3B,OAAO,uBAAM9d,KAAK,c,kCAGVwC,GAER,OACI,yBAAKuF,UAAU,OACX,yBAAKE,MAAO,CAAEG,MAAO,MAAO2R,OAAQ,qBAChC,kBAAC,GAAD,CAAW3Y,MAAOoB,EAAGpB,Y,mCAMxBoB,GACT,OACI,kBAAC,GAAD,CACIwb,WAAYxb,EAAGwb,WACfC,aAAczb,EAAGyb,aACjBqF,WAAY3gB,KAAK2gB,WAAW9Z,KAAK7G,MACjCzC,SAAUyC,KAAK4gB,eAAe/Z,KAAK7G,MACnC8W,SAAU9W,KAAKJ,MAAMkX,a,0CAM7B9W,KAAKH,GAAGghB,cAAc7gB,KAAKJ,MAAMub,W,yCAGlB3F,GACXA,EAAc2F,QAAQ7f,KAAO0E,KAAKJ,MAAMub,QAAQ7f,IAChDka,EAAc2F,QAAQ/f,YAAc4E,KAAKJ,MAAMub,QAAQ/f,WACvD4E,KAAKH,GAAGghB,cAAc7gB,KAAKJ,MAAMub,W,+BAKrC,IAAMtb,EAAKG,KAAKH,GAAG+L,MACnB,OAAQ/L,EAAGL,QACP,KAAKC,EAASH,KAGd,KAAKG,EAASkF,QACV,OAAO3E,KAAKoM,gBAChB,KAAK3M,EAASuF,MACV,OAAOhF,KAAK6L,YAAYhM,GAC5B,KAAKJ,EAASoF,OACV,OAAO7E,KAAKqM,aAAaxM,Q,GA3EPgG,IAAMC,WCkCzBiG,0BA/Bf,SAAyBnN,EAAmBgB,GAA8B,IAE1DhC,EAERgB,EAFAf,KAAQD,kBACDI,EACPY,EADAb,IAAOC,OAEX,IAAKJ,EACD,MAAM,IAAIzC,MAAM,yCAEpB,MAAO,CACHiD,MAAOR,EAAkBQ,MACzBJ,aAIR,SAA4BR,EAA4BoC,GACpD,MAAO,CACHrC,SAAU,SAACgB,GACP,IAAMhE,EAAmB,CACrB,WACA2C,GAA0BqB,EAAIlD,WAC9BkD,EAAIjD,GACJ6K,OAAO5H,EAAInD,YACbgL,KAAK,KACP5I,EAASD,EAAShD,KAEtBuc,SAAU,SAAChU,GACPtF,EAAS8Z,oBAAUxU,QAKhBiJ,CAGbC,ICvBaD,0BAff,SAAyBnN,EAAmB2Y,GACxC,MAAO,MAGX,SAA4B/Z,EAA4B+Z,GACpD,MAAO,CACHha,SAAU,SAACia,GACPha,EAASD,EAASia,KAEtBV,SAAU,SAAChU,GACPtF,EAAS8Z,oBAAUxU,QAKhBiJ,CAGb+U,IChBWC,GAAb,6LAEQ,OAAO,8EAFf,wCAMQ,OAAQ/gB,KAAKJ,MAAMohB,WACf,KAAKC,YAAU3hB,KAEf,KAAK2hB,YAAUC,OAEf,KAAKD,YAAUE,QACX,MAAO,GACX,KAAKF,YAAUjc,MACX,MAAO,WAdvB,6CAmBQ,OAAO,uCAnBf,2CAsByB5H,GAGjB,OAAQA,EAAWC,MACf,KAAKhD,EAASqC,SACV,OAAO,kBAAC,GAAD,CAAU2E,SAAUjE,EAAWmB,MAC1C,KAAKlE,EAASsC,SACV,OAAO,kBAAC,GAAD,CAAcwe,QAAS/d,EAAWmB,MAC7C,QAEIC,QAAQC,MAAM,uBAAwBrB,MAhCtD,yCAqCQ,OAAQ4C,KAAKJ,MAAMxC,WAAWC,MAC1B,KAAKhD,EAASiF,KACV,OAAOU,KAAKohB,uBAChB,QACI,OAAOphB,KAAKqhB,qBAAqBrhB,KAAKJ,MAAMxC,eAzC5D,gCAmDc8I,GACN,IACMpL,EADS,iBACEC,KAAKmL,GAEtB,IAAKpL,EACD,MAAM,IAAIK,MAAM,gBAL+D,kBAWhDL,EAXgD,GAanF,MAAO,CACHwmB,KAAM,CAdyE,MAe/E9gB,OAAQ,CAAEjG,iBAfqE,SAnD3F,0CAsEyB,IAAD,OAChB,GAAIyF,KAAKJ,MAAMohB,YAAcC,YAAUE,QAAS,CAE5C9a,OAAOsY,iBAAiB,cAAc,SAACnY,GACnC,IACMN,EADM,IAAI+K,IAAIzK,EAAG+a,QACNrb,KACjB,IAAKA,EACD,MAAM,IAAI/K,MAAM,YAJuC,IAO7CZ,EACV,EAAKinB,UAAUtb,GADf1F,OAAUjG,iBAEd,EAAKqF,MAAMrC,SAAShD,MAMxB,IAAM2L,EAAOG,OAAOE,SAASL,KAC7B,GAAIA,EAAM,CAAC,IAEO3L,EACVyF,KAAKwhB,UAAUtb,GADf1F,OAAUjG,iBAEdyF,KAAKJ,MAAMrC,SAAShD,QAKpByF,KAAKJ,MAAMrC,SAAS,6BAlGpC,+BAwGQ,OAAKyC,KAAKJ,MAAMxB,MAIZ,yBAAKgH,UAAU,kBACX,yBAAKA,UAAU,YAAYpF,KAAKyhB,mBAChC,yBAAKrc,UAAU,mBAAmBpF,KAAK0hB,qBALpC1hB,KAAK2hB,yBAzGxB,GAAgC9b,IAAMC,WC+BvBiG,0BA9Bf,SAAyBnN,EAAmBgB,GAA8B,IAE1DhC,EAIRgB,EAJAf,KAAQD,kBACOojB,EAGfpiB,EAHAgjB,KAAQhjB,MACRxB,EAEAwB,EAFAxB,WACA0B,EACAF,EADAE,QAWJ,MAAO,CAAEV,MANJR,EAGOA,EAAkBQ,MAFlB,KAKI4iB,YAAW5jB,aAAY0B,cAG3C,SAA4BtB,EAA4B+Z,GACpD,MAAO,CACHha,SAAU,SAAChD,GACPiD,EAASD,EAAShD,QAQfwR,CAGbgV,IC9CIc,G9DyHKC,YAAY7iB,EAASG,IAAyB2iB,YAAQC,YAAgBC,O8DnH5DC,G,YAEjB,WAAYtiB,GAAkB,IAAD,8BACzB,4CAAMA,KAFVuiB,sBAC6B,EAEzB,EAAKA,iBAAmB,KAFC,E,iFAKzB,IAAIC,EAGA,CACA7iB,KAAM,KACNiB,OAAQ,IAEZR,KAAKmiB,iBAAmBN,GAAMQ,WAAU,WACpC,IAAMzjB,EAAQijB,GAAMpkB,WACpB,GAAKmB,EAAL,CAF0C,IAOvBxB,EAGfwB,EAJAb,IACIukB,QAAWllB,WAMnB,GAHIwB,EADAf,KAAQD,kBAIZ,CAIA,IAAM2B,EAAOnC,EAAWmC,KAClBiB,EAASpD,EAAWoD,QAGtBjB,IAAS6iB,EAAK7iB,MACE,OAAhB6iB,EAAK5hB,QACL+hB,OAAOC,KAAKhiB,GAAQga,MAAK,SAAChT,GACtB,OAAOhH,EAAOgH,KAAS4a,EAAK5hB,OAAOgH,SAGvC4a,EAAK5hB,OAASA,EACd4hB,EAAK7iB,KAAOA,EAERiB,EAAM,kBACNqhB,GAAMrkB,SAASD,EAASiD,EAAM,2B,6CAMtCR,KAAKmiB,kBACLniB,KAAKmiB,qB,+BAIT,OACI,kBAAC,WAAD,CAAUN,MAAOA,IACb,kBAAC,UAAD,KACI,kBAAC,WAAD,CAAUY,UAAU,GAChB,yBAAKrd,UAAU,sBACX,kBAAC,GAAD,c,GA7DyBS,IAAMC,WCHvC4c,QACW,cAA7Brc,OAAOE,SAASoc,UAEe,UAA7Btc,OAAOE,SAASoc,UAEhBtc,OAAOE,SAASoc,SAASC,MACvB,2DCZNC,IAAS/M,OAAO,kBAAC,GAAD,MAASgN,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnT,MAAK,SAAAoT,GACjCA,EAAaC,kB","file":"static/js/main.c6e603ca.chunk.js","sourcesContent":["import { RelationEngineReference, UIError } from \"../../types\";\nimport { TaxonomyView } from \"./taxonomy\";\nimport { OntologyView } from \"./ontology\";\n\n// VIEW STATES\n\n/*\n Sync view state\n Primarily for top level views which don't have an async load operation.\n*/\n\nexport enum SyncViewStatus {\n    NONE,\n    LOADED,\n    ERROR\n}\n\nexport interface SyncViewNone {\n    status: SyncViewStatus.NONE;\n}\n\nexport interface SyncViewError<E> {\n    status: SyncViewStatus.ERROR;\n    error: E;\n}\n\nexport interface SyncViewLoaded<S> {\n    status: SyncViewStatus.LOADED;\n    state: S;\n}\nexport type SyncView<S, E> = SyncViewNone | SyncViewLoaded<S> | SyncViewError<E>;\n\n/*\nAsync view state\nFor any component which requires loading.\n*/\n\n// export interface AsyncViewNone<T> {\n//     status: AsyncViewStatus.NONE;\n//     type: T;\n// }\n\n// export interface AsyncViewLoading<T> {\n//     status: AsyncViewStatus.LOADING;\n//     type: T;\n// }\n\n// export interface AsyncViewError<T> {\n//     status: AsyncViewStatus.ERROR;\n//     error: string;\n//     type: T;\n// }\n\n// export interface AsyncViewLoaded<T, S> {\n//     status: AsyncViewStatus.LOADED;\n//     type: T;\n//     state: S;\n// }\n\n// export type AsyncView<T, S> = AsyncViewNone<T> | AsyncViewLoading<T> | AsyncViewLoaded<T, S> | AsyncViewError<T>;\n\n\n// And the specific landing page views\n\nexport enum AsyncViewStatus {\n    NONE,\n    LOADING,\n    LOADED,\n    ERROR\n}\n\nexport interface AsyncViewNone<> {\n    status: AsyncViewStatus.NONE;\n}\n\nexport interface AsyncViewLoading<> {\n    status: AsyncViewStatus.LOADING;\n}\n\nexport interface AsyncViewError<E> {\n    status: AsyncViewStatus.ERROR;\n    error: E;\n}\n\nexport interface AsyncViewLoaded<S> {\n    status: AsyncViewStatus.LOADED;\n    state: S;\n}\n\nexport type AsyncView<S, E> = AsyncViewNone | AsyncViewLoading | AsyncViewLoaded<S> | AsyncViewError<E>;\n\n/*\nThe view base is the wrapper for all landing page views.\nIt's purpose is to provide an anchor for the view, regardless of what happens in that view\n(which is to be found in the \"state\" property)\n*/\n\nexport enum ViewType {\n    NONE,\n    TAXONOMY,\n    ONTOLOGY\n}\n\n// export interface ViewBase<S> {\n//     type: ViewType;\n//     ref: RelationEngineReference;\n//     state: AsyncView<TopLevelViewState, UIError>\n// }\n\nexport interface ViewBase<S> {\n    type: ViewType;\n    ref: RelationEngineReference;\n    state: AsyncView<S, UIError>\n}\n\n/*\n    The top level view.\n    Each top level view is a generic interface with some fixed properties.\n*/\n\n// export type MainView = ViewBase<TaxonomyView> | ViewBase<OntologyView> | null;\n\nexport type MainView = AsyncView<TaxonomyView, UIError> | AsyncView<OntologyView, UIError>;\n\nexport interface TopLevelViewStateBase {\n    type: ViewType;\n    ref: RelationEngineReference;\n    view: MainView;\n}\n\nexport interface TopLevelViewStateTaxonomy extends TopLevelViewStateBase {\n    type: ViewType.TAXONOMY;\n    view: AsyncView<TaxonomyView, UIError>;\n};\n\nexport interface TopLevelViewStateOntology extends TopLevelViewStateBase {\n    type: ViewType.ONTOLOGY;\n    view: AsyncView<OntologyView, UIError>;\n}\n\nexport type TopLevelViewState = TopLevelViewStateTaxonomy | TopLevelViewStateOntology;\n\n\nexport type TopLevelView = AsyncView<TopLevelViewState, UIError>\n","import { RelationEngineID } from '../redux/store';\nimport { DynamicServiceClient } from '@kbase/ui-lib';\n\n// A collection is a top level division of the re data model\nexport type Collection = 'taxonomy' | 'ontology';\n\n// export type TaxonSource = 'ncbi' | 'gtdb';\n// export type OntologySource = 'go';\n\nexport interface GetNodeInfoResultBase {\n    collection: Collection;\n    // source: string;\n    created: number;\n    expired: number;\n    timestamp: number;\n}\n\nexport interface GetNodeInfoResultTaxon extends GetNodeInfoResultBase {\n    collection: 'taxonomy';\n    // source: TaxonSource;\n    namespace: string;\n    id: string;\n}\n\nexport interface GetNodeInfoResultOntology extends GetNodeInfoResultBase {\n    collection: 'ontology';\n    // source: OntologySource;\n    namespace: string;\n    id: string;\n}\n\nexport type GetNodeInfoResult = GetNodeInfoResultTaxon | GetNodeInfoResultOntology;\n\n// export interface GetNodeInfoResult<T, S> {\n//     type: NodeType;\n//     created: number;\n//     source: TaxonSource | OntologySource;\n//     version: string;\n// }\n\nexport default class RelationEngineAPIClient extends DynamicServiceClient {\n    static module: string = 'relation_engine_api';\n    async getNodeInfo(relationEngineID: RelationEngineID): Promise<[GetNodeInfoResult]> {\n        const classRe = /^(.*?)\\/(.*)$/;\n        const taxonomyRe = /^([^/]+)\\/([^/]+)(?:\\/([^/]+))?$/;\n        const ontologyRe = /^([^/]+)\\/([^/]+)(?:\\/([^/]+))?$/;\n        return new Promise<[GetNodeInfoResult]>((resolve, reject) => {\n            let m = classRe.exec(relationEngineID);\n            if (!m) {\n                reject(new Error('Invalid relation engine ID ' + relationEngineID));\n                return;\n            }\n            const [, collection, rest] = m;\n            // const [collection] = relationEngineID.split('/');\n            switch (collection) {\n                case 'taxonomy': (() => {\n                    m = taxonomyRe.exec(rest);\n                    if (!m) {\n                        reject(new Error('Taxonomy ref is '));\n                        return;\n                    }\n                    if (m.length !== 4) {\n                        reject(new Error('Invalid relation engine id \"' + relationEngineID + '\"'));\n                    }\n                    const [, namespace, id, timestampString] = m;\n                    let timestamp: number;\n                    if (!timestampString) {\n                        timestamp = Date.now();\n                    } else {\n                        timestamp = parseInt(timestampString, 10);\n                    }\n\n                    switch (namespace) {\n                        case 'ncbi_taxonomy':\n                            resolve([\n                                {\n                                    collection: 'taxonomy',\n                                    namespace: namespace,\n                                    id: id,\n                                    timestamp,\n                                    created: Date.now(),\n                                    expired: new Date(2055, 5, 5).getTime()\n                                }\n                            ]);\n                            return;\n                        default:\n                            reject(new Error('Unrecognized taxonomy namespace \"' + namespace + '\"'));\n                            return;\n                    }\n                })();\n                    break;\n                case 'ontology':\n                    m = ontologyRe.exec(rest);\n                    if (!m) {\n                        reject(new Error('Taxonomy ref is '));\n                        return;\n                    }\n                    const [, namespace, id, timestampString] = m;\n                    let timestamp: number;\n                    if (timestampString) {\n                        timestamp = parseInt(timestampString);\n                    } else {\n                        timestamp = Date.now();\n                    }\n                    switch (namespace) {\n                        case 'go':\n                            resolve([\n                                {\n                                    collection: 'ontology',\n                                    namespace,\n                                    id,\n                                    timestamp,\n                                    created: Date.now(),\n                                    expired: new Date(2055, 5, 5).getTime()\n                                }\n                            ]);\n                            return;\n                        default:\n                            reject(new Error('Ontology namespace not found \"' + namespace + '\"'));\n                            return;\n                    }\n                default:\n                    reject(new Error(`Collection ${collection} does not resolve to a type`));\n            }\n        });\n    }\n}\n","type JSONValue = string | number | boolean | null | JSONObject | JSONArray;\n\ninterface JSONArray extends Array<JSONValue> { };\n\ninterface JSONObject {\n    [x: string]: JSONValue\n}\n\nexport interface UIError {\n    code: string;\n    source: string;\n    message: string;\n    data?: JSONValue;\n}\n\nexport class UIException extends Error {\n    code: string;\n    source: string;\n    message: string;\n    data?: JSONValue;\n    constructor({ message, code, source, data }: { message: string, code: string, source: string, data?: JSONValue }) {\n        super(message);\n        this.code = code;\n        this.source = source;\n        this.message = message;\n        this.data = data;\n    }\n}\n\n// export type NodeSource = TaxonomySource | OntologySource;\n\nexport enum ObjectClass {\n    TAXONOMY,\n    ONTOLOGY\n}\n\nexport enum LoadingStatus {\n    NONE,\n    LOADING,\n    LOADED,\n    ERROR\n}\n\nexport interface NoneState {\n    status: LoadingStatus.NONE;\n}\n\nexport interface LoadingState {\n    status: LoadingStatus.LOADING;\n}\n\nexport interface ErrorState {\n    status: LoadingStatus.ERROR;\n    message: string;\n}\n\nexport interface LoadedState {\n    status: LoadingStatus.LOADED;\n}\n\nexport enum RelationEngineCollection {\n    TAXONOMY,\n    ONTOLOGY\n}\n\nexport function relationEngineCollectionToString(collection: RelationEngineCollection): string {\n    switch (collection) {\n        case RelationEngineCollection.TAXONOMY:\n            return 'taxonomy';\n        case RelationEngineCollection.ONTOLOGY:\n            return 'ontology';\n    }\n}\n\nexport function stringToRelationEngineCollection(collection: string): RelationEngineCollection {\n    switch (collection) {\n        case 'taxonomy':\n            return RelationEngineCollection.TAXONOMY;\n        case 'ontology':\n            return RelationEngineCollection.ONTOLOGY;\n        default:\n            throw new Error('Unrecognized relation engine collection name \"' + collection + '\"');\n\n    }\n}\n\n// export enum RelationEngineNamespace {\n// }\n\nexport type RelationEngineNamespace = any;\n\nexport type RelationEngineID = string;\n\nexport type RelationEngineTimestamp = number;\n\n\nexport interface RelationEngineReference {\n    collection: RelationEngineCollection,\n    namespace: RelationEngineNamespace,\n    id: RelationEngineID;\n    timestamp: RelationEngineTimestamp;\n}","import { RelationEngineReference, RelationEngineCollection } from \".\";\n\nexport enum TaxonomyNamespace {\n    NCBI,\n    GTDB\n}\n\nexport function taxonomyNamespaceToString(namespace: TaxonomyNamespace) {\n    switch (namespace) {\n        case TaxonomyNamespace.NCBI:\n            return 'ncbi_taxonomy';\n        case TaxonomyNamespace.GTDB:\n            return 'gtdb';\n    }\n}\n\nexport function stringToTaxonomyNamespace(namespace: string) {\n    switch (namespace) {\n        case 'ncbi_taxonomy':\n            return TaxonomyNamespace.NCBI;\n        case 'gtdb':\n            return TaxonomyNamespace.GTDB;\n        default:\n            throw new Error('Unrecognized namespace \"' + namespace + '\"');\n    }\n}\n\nexport interface TaxonReferenceBase extends RelationEngineReference {\n    collection: RelationEngineCollection.TAXONOMY,\n    namespace: TaxonomyNamespace;\n}\n\nexport interface TaxonReferenceNCBI extends TaxonReferenceBase {\n    namespace: TaxonomyNamespace.NCBI;\n}\n\nexport interface TaxonReferenceGTDB extends TaxonReferenceBase {\n    namespace: TaxonomyNamespace.GTDB;\n}\n\nexport type TaxonReference = TaxonReferenceNCBI | TaxonReferenceGTDB;\n\n\nexport interface TaxonAlias {\n    category: string;\n    name: string;\n}\n\nexport interface TaxonBase {\n    ref: TaxonReference,\n    name: string;\n    rank: string;\n    isBiological: boolean;\n}\n\n\nexport interface NCBITaxon extends TaxonBase {\n    ref: TaxonReferenceNCBI;\n    ncbiID: number;\n    geneticCode: number;\n    aliases: Array<TaxonAlias>;\n}\n\nexport interface GTDBTaxon extends TaxonBase {\n    ref: TaxonReferenceGTDB;\n}\n\nexport type Taxon = NCBITaxon | GTDBTaxon;\n\n\n","import { RelationEngineReference, RelationEngineCollection } from \".\";\n\n// Ontology Term Reference\n\nexport enum OntologyNamespace {\n    GO\n}\n\nexport function stringToOntologyNamespace(namespace: string): OntologyNamespace {\n    switch (namespace) {\n        case 'go':\n            return OntologyNamespace.GO;\n        default:\n            throw new Error('Ontology namespace not supported: ' + namespace);\n    }\n}\n\nexport function ontologyNamespaceToString(namespace: OntologyNamespace): string {\n    switch (namespace) {\n        case OntologyNamespace.GO:\n            return 'go';\n    }\n}\n\n\nexport interface OntologyReferenceBase extends RelationEngineReference {\n    collection: RelationEngineCollection.ONTOLOGY,\n    namespace: OntologyNamespace;\n}\n\nexport interface OntologyReferenceGO extends OntologyReferenceBase {\n    namespace: OntologyNamespace.GO;\n}\n\nexport type OntologyReference = OntologyReferenceGO\n\n\n// export type OntologyID = string;\n\nexport enum OntologySource {\n    GO\n}\nexport enum OntologyRelation {\n    IS_A = 'OntologyRelation$is_a',\n    PART_OF = 'OntologyRelation$part_of',\n    HAS_PART = 'OntologyRelation$has_part',\n    REGULATES = 'OntologyRelation$regulates',\n    POSITIVELY_REGULATES = 'OntologyRelation$positivelyRegulates',\n    NEGATIVELY_REGULATES = 'OntologyRelation$negativelyRegulates',\n    OCCURS_IN = 'OntologyRelation$occursIn',\n    ENDS_DURING = 'OntologyRelation$endsDuring',\n    HAPPENS_DURING = 'OntologyRelation$happensDuring'\n}\n\n// Brief term - for list displays\n\nexport interface OntologyTermBriefBase {\n    // type: OntologySource;\n    ref: OntologyReference;\n    // id: OntologyID;\n    name: string;\n    // relation: OntologyRelation\n}\n\nexport interface GOOntologyTermBrief extends OntologyTermBriefBase {\n    // type: OntologySource.GO\n    ref: OntologyReferenceGO\n    goID: string;\n}\n\nexport type OntologyTermBrief = GOOntologyTermBrief;\n\nexport type OntologyRelatedTermBrief = {\n    relation: OntologyRelation,\n    term: OntologyTermBrief\n}\n\nexport interface OntologyTermRelatedBrief extends OntologyTermBrief {\n    relation: OntologyRelation\n}\n\n// Term - the full term info for detail\n\nexport interface OntologyTermBase {\n    ref: OntologyReference;\n    // type: OntologySource;\n    // id: OntologyID;\n    name: string;\n    // relation: OntologyRelation;\n    comments: Array<string>\n    definition: string;\n    isObsolete: boolean;\n}\n\nexport enum GOSynonymScope {\n    EXACT,\n    NARROW,\n    BROAD,\n    RELATED\n}\n\nexport type Synonym = string;\n\n// export interface GOSynonym {\n//     name: string;\n//     scope: GOSynonymScope;\n// }\n\nexport interface GOSynonyms {\n    exact: Array<Synonym>;\n    narrow: Array<Synonym>;\n    broad: Array<Synonym>;\n    related: Array<Synonym>;\n}\n\nexport interface GOOntologyTerm extends OntologyTermBase {\n    type: OntologySource.GO;\n    synonyms: GOSynonyms;\n    goID: string;\n    namespace: string;\n}\n\nexport type OntologyTerm = GOOntologyTerm;\n\nexport interface OntologyTermRelated extends OntologyTerm {\n    related: OntologyRelation\n}\n\nexport interface OntologyRelatedTerm {\n    relation: OntologyRelation,\n    term: OntologyTerm\n}\n\nexport interface OntologyRelatedTerms {\n    term: OntologyTerm,\n    terms: Array<OntologyRelatedTerm>\n}\n\n/* Linked Objects */\n\nexport interface WorkspaceType {\n    module: string;\n    name: string;\n}\nexport type WorkspaceID = number;\nexport type ObjectID = number;\nexport type ObjectVersion = number;\nexport interface WorkspaceObjectReference {\n    workspaceID: WorkspaceID;\n    id: ObjectID;\n    version: ObjectVersion;\n}\n\nexport interface LinkedObject {\n    object: WorkspaceObjectReference;\n    type: WorkspaceType,\n    scientificName: string;\n    feature: string;\n}","import { Action } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { StoreState, RelationEngineID, NavigationSome, View } from '../store';\nimport { ViewType } from '../store/view';\nimport RelationEngineAPIClient from '../../lib/RelationEngineAPIClient';\nimport { RelationEngineCollection } from '../../types';\nimport { stringToTaxonomyNamespace } from '../../types/taxonomy';\nimport { stringToOntologyNamespace } from '../../types/ontology';\n// import * as uiLib from '@kbase/ui-lib';\n\nexport enum AppActions {\n    NAVIGATE = 'kbase-ui-plugin-landing-pages/navigate',\n    NAVIGATE_START = 'kbase-ui-plugin-landing-pages/navigate/start',\n    NAVIGATE_SUCCESS = 'kbase-ui-plugin-landing-pages/navigate/success',\n    NAVIGATE_ERROR = 'kbase-ui-plugin-landing-pages/navigate/error'\n}\n\nexport interface Navigate extends Action<AppActions.NAVIGATE> {\n    type: AppActions.NAVIGATE;\n    relationEngineID: RelationEngineID;\n}\n\nexport interface NavigateStart extends Action<AppActions.NAVIGATE_START> {\n    type: AppActions.NAVIGATE_START;\n}\n\nexport interface NavigateSuccess extends Action<AppActions.NAVIGATE_SUCCESS> {\n    type: AppActions.NAVIGATE_SUCCESS;\n    navigation: NavigationSome;\n}\n\nexport interface NavigateError extends Action<AppActions.NAVIGATE_ERROR> {\n    type: AppActions.NAVIGATE_ERROR;\n    message: string;\n}\n\nexport function navigateStart(): NavigateStart {\n    return {\n        type: AppActions.NAVIGATE_START\n    };\n}\n\nexport function navigateError(message: string): NavigateError {\n    return {\n        type: AppActions.NAVIGATE_ERROR,\n        message\n    }\n}\n\nexport function navigateSuccess(\n    navigation: NavigationSome\n): NavigateSuccess {\n    return {\n        type: AppActions.NAVIGATE_SUCCESS,\n        navigation\n    };\n}\n\nexport function navigate(relationEngineID: RelationEngineID) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n        dispatch(navigateStart());\n\n        const {\n            auth: { userAuthorization },\n            app: {\n                config: {\n                    services: {\n                        ServiceWizard: { url }\n                    }\n                }\n            }\n        } = getState();\n\n        if (!userAuthorization) {\n            return;\n        }\n\n        const reClient = new RelationEngineAPIClient({\n            url,\n            token: userAuthorization.token\n        });\n\n        try {\n            const [nodeInfo] = await reClient.getNodeInfo(relationEngineID);\n            switch (nodeInfo.collection) {\n                case 'taxonomy':\n                    // TODO: add source info here, or let the taxonomy landing page do\n                    // it by itself? I think it is better to do it after the first dispatch\n                    // here, because then the landing page can fold it into its type system,\n                    // rather than requiring the top level to do that. E.g. source->enum.\n                    dispatch(navigateSuccess({\n                        type: ViewType.TAXONOMY,\n                        ref: {\n                            collection: RelationEngineCollection.TAXONOMY,\n                            namespace: stringToTaxonomyNamespace(nodeInfo.namespace),\n                            id: nodeInfo.id,\n                            timestamp: nodeInfo.timestamp\n                        }\n                    }));\n                    // const x = {\n                    //     type: ViewType.TAXONOMY,\n                    //     ref: {\n                    //         collection: RelationEngineCollection.TAXONOMY,\n                    //         namespace: stringToTaxonomyNamespace(nodeInfo.namespace),\n                    //         id: nodeInfo.id,\n                    //         timestamp: nodeInfo.timestamp\n                    //     }\n                    // };\n                    break;\n                case 'ontology':\n                    dispatch(navigateSuccess({\n                        type: ViewType.ONTOLOGY,\n                        ref: {\n                            collection: RelationEngineCollection.ONTOLOGY,\n                            namespace: stringToOntologyNamespace(nodeInfo.namespace),\n                            id: nodeInfo.id,\n                            timestamp: nodeInfo.timestamp\n                        }\n                    }));\n                    break;\n            }\n        } catch (ex) {\n            console.error('ERROR', ex);\n            dispatch(navigateError(ex.message));\n        }\n\n    };\n}\n\nexport function view(view: View) {\n    return async (dispatch: ThunkDispatch<StoreState, void, Action>, getState: () => StoreState) => {\n\n\n        // determine which view should be invoked\n\n        // issue the store update accordingly\n\n        // the view should be invoked by the ... dispatcher?\n\n    };\n}\n","import { Action, Reducer } from 'redux';\nimport { baseReducer, BaseStoreState } from '@kbase/ui-components';\nimport { StoreState } from '../store';\nimport { AppActions, NavigateSuccess } from '../actions';\n\nfunction navigateSuccess(state: StoreState, action: NavigateSuccess): StoreState {\n    return {\n        ...state,\n        // view: {\n        //     status: ViewStatus.LOADED,\n        //     relationEngineID: action.relationEngineID,\n        //     relationEngineNodeType: action.relationEngineNodeType,\n        //     viewType: action.viewType,\n        //     currentView: action.view\n        // }\n        navigation: action.navigation,\n        trigger: Date.now()\n    };\n}\n\n// function navigateStart(state: StoreState, action: NavigateStart): StoreState {\n//     return {\n//         ...state,\n//         view: {\n//             status: ViewStatus.LOADING\n//         }\n//     };\n// }\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n    const baseState = baseReducer(state as BaseStoreState, action);\n    if (baseState) {\n        return baseState as StoreState;\n    }\n    if (!state) {\n        return state;\n    }\n    switch (action.type) {\n        // case AppActions.NAVIGATE_START:\n        //     return navigateStart(state, action as NavigateStart);\n        case AppActions.NAVIGATE_SUCCESS:\n            return navigateSuccess(state, action as NavigateSuccess);\n    }\n    return state;\n};\n\nexport default reducer;\n","import { BaseStoreState, makeBaseStoreState } from '@kbase/ui-components';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\n// import { TaxonomyStoreState } from '../../landingPages/taxonomy/redux/store';\nimport { TaxonReference } from '../../types/taxonomy';\nimport { OntologyReference } from '../../types/ontology';\nimport { AsyncViewStatus, TopLevelView, ViewType, ViewBase } from './view';\nimport { TaxonomyView } from './taxonomy';\nimport { OntologyView } from './ontology';\n\n\nexport type RelationEngineID = string;\nexport enum RelationEngineNodeType {\n    TAXON,\n    ONTOLOGY_TERM\n}\n\nexport enum ViewStatus {\n    NONE,\n    LOADING,\n    LOADED,\n    ERROR\n}\n\n// export interface RelationEngineViewBase {\n//     status: ViewStatus;\n// }\n\n// export interface RelationEngineViewNone {\n//     status: ViewStatus.NONE;\n// }\n\n// export interface RelationEngineViewLoading {\n//     status: ViewStatus.LOADING;\n// }\n\n// export interface RelationEngineViewLoaded {\n//     status: ViewStatus.LOADED;\n//     relationEngineID: RelationEngineID;\n//     relationEngineNodeType: RelationEngineNodeType;\n//     viewType: ViewType;\n//     currentView: LandingPageView;\n// }\n\n// export interface RelationEngineViewError {\n//     status: ViewStatus.ERROR;\n//     message: string;\n// }\n\n// export type RelationEngineView =\n//     | RelationEngineViewNone\n//     | RelationEngineViewLoading\n//     | RelationEngineViewLoaded\n//     | RelationEngineViewError;\n\nexport interface LandingPageStoreState { }\n\n\n\n\nexport interface NavigationBase {\n    type: ViewType;\n    relationEngineID: RelationEngineID;\n}\n\nexport interface NavigationNone {\n    type: ViewType.NONE;\n}\n\nexport interface NavigationTaxonomy {\n    type: ViewType.TAXONOMY;\n    ref: TaxonReference\n}\n\nexport interface NavigationOntology {\n    type: ViewType.ONTOLOGY;\n    ref: OntologyReference\n}\n\nexport type NavigationSome = NavigationTaxonomy | NavigationOntology;\nexport type Navigation = NavigationNone | NavigationSome;\n\n// export interface ViewState<T, S> {\n//     type: T;\n//     state: S;\n// }\n\n// export type LandingPageView = TaxonomyView;\n\n// OKAY, back to REDUX\n\n// export interface TaxonomyView {\n\n// }\n\n// export interface OntologyView {\n\n// }\n\n\n\nexport type View = ViewBase<TaxonomyView> | ViewBase<OntologyView> | null;\n\n\n// STORE STATE type definition\nexport interface StoreState extends BaseStoreState {\n    navigation: Navigation;\n    trigger: number;\n    view: TopLevelView;\n}\n\n// Store Construction\nexport function makeInitialStoreState(): StoreState {\n    const baseStoreState = makeBaseStoreState();\n    return {\n        ...baseStoreState,\n        // viewer: null,\n        navigation: {\n            type: ViewType.NONE\n        },\n        trigger: 0,\n        view: {\n            status: AsyncViewStatus.NONE\n        }\n    };\n}\n\nexport function createReduxStore() {\n    return createStore(reducer, makeInitialStoreState(), compose(applyMiddleware(thunk)));\n}\n","import { UIError } from \"../types\";\n\nexport interface DBProps<T> {\n    onUpdate: () => void;\n    initialData: T;\n}\n\nexport interface TheDB<T> {\n    data: T;\n}\n\nexport enum DBStatus {\n    NONE,\n    LOADING,\n    LOADED,\n    RELOADING,\n    ERROR\n}\n\nexport interface DBStateNone {\n    status: DBStatus.NONE;\n}\n\nexport interface DBStateLoading {\n    status: DBStatus.LOADING;\n}\n\nexport interface DBStateReLoading {\n    status: DBStatus.RELOADING;\n}\n\nexport interface DBStateLoaded {\n    status: DBStatus.LOADED;\n}\n\nexport interface DBStateError {\n    status: DBStatus.ERROR;\n    error: UIError;\n}\n\nexport default class DB<T> {\n    db: TheDB<T>;\n    stopped: boolean;\n    onUpdate: () => void;\n    constructor(props: DBProps<T>) {\n        this.onUpdate = props.onUpdate;\n        this.db = {\n            data: props.initialData\n        };\n        this.stopped = false;\n    }\n\n    forceComponentUpdate() {\n        if (this.stopped) {\n            return;\n        }\n        this.onUpdate();\n    }\n\n    set(updateFun: (state: T) => T) {\n        this.db.data = updateFun(this.db.data);\n        this.forceComponentUpdate();\n    }\n\n    get(): T {\n        return this.db.data;\n    }\n\n    stop() {\n        this.stopped = true;\n    }\n}\n","import { TaxonReference, Taxon, TaxonomyNamespace, NCBITaxon, taxonomyNamespaceToString } from '../../../types/taxonomy';\nimport TaxonAPIClient from './TaxonAPIClient';\nimport { RelationEngineCollection } from '../../../types';\n\n// const INITIAL_BATCH_SIZE = 100;\n// const BATCH_SIZE = 1000;\n// const TOTAL_LIMIT = 10000;\n// const PARALLELISM = 2;\n\nexport interface GetChildrenOptions {\n    offset: number;\n    limit: number;\n    searchTerm: string;\n}\n\nexport interface WorkspaceObjectType {\n    module: string;\n    name: string;\n    majorVersion: number;\n    minorVersion: number;\n}\n\nexport enum WorkspaceType {\n    UNKNOWN,\n    NARRATIVE,\n    REFDATA\n}\n\nexport interface LinkedObject {\n    linkedAt: number;\n    workspaceID: number;\n    objectID: number;\n    version: number;\n    objectName: string;\n    workspaceUpdatedAt: number;\n    createdAt: number;\n    type: WorkspaceObjectType;\n    workspaceType: WorkspaceType;\n    title: string;\n}\n\nexport interface GetLinkedObjectsOptions {\n    offset: number;\n    limit: number;\n}\n\nexport interface GetLinkedObjectsResult {\n    linkedObjects: Array<LinkedObject>;\n    totalCount: number;\n}\n\nexport class TaxonomyModel {\n    taxonomyClient: TaxonAPIClient;\n    constructor({ token, url }: { token: string; url: string }) {\n        this.taxonomyClient = new TaxonAPIClient({ token, url });\n    }\n\n    async getLineage(taxonRef: TaxonReference): Promise<Array<Taxon>> {\n        const {\n            namespace, id, timestamp\n        } = taxonRef;\n        const result = await this.taxonomyClient.getLineage({\n            ns: taxonomyNamespaceToString(namespace),\n            id,\n            ts: timestamp\n        });\n        // TODO: should be conditional based on the source of the taxonomy??\n        const taxons: Array<NCBITaxon> = result.results.map((taxonResult) => {\n            let isBiological: boolean;\n            if (taxonResult.scientific_name === 'root' || taxonResult.scientific_name === 'cellular organisms') {\n                isBiological = false;\n            } else {\n                isBiological = true;\n            }\n            return {\n                ref: {\n                    collection: RelationEngineCollection.TAXONOMY,\n                    namespace: TaxonomyNamespace.NCBI,\n                    id: taxonResult.id,\n                    timestamp: result.ts\n                },\n                name: taxonResult.scientific_name,\n                rank: taxonResult.rank,\n                ncbiID: taxonResult.NCBI_taxon_id,\n                geneticCode: parseInt(taxonResult.gencode),\n                aliases: taxonResult.aliases.map(({ name, category }) => {\n                    return {\n                        name,\n                        category\n                    };\n                }),\n                isBiological\n            };\n        });\n        return taxons;\n    }\n\n    async getChildren(taxonRef: TaxonReference, options: GetChildrenOptions): Promise<[Array<Taxon>, number]> {\n        const {\n            namespace, id, timestamp\n        } = taxonRef;\n\n        const result = await this.taxonomyClient.getChildren({\n            ns: taxonomyNamespaceToString(namespace),\n            id,\n            ts: timestamp,\n            offset: options.offset,\n            limit: options.limit,\n            searchTerm: options.searchTerm\n        });\n\n        const taxa: Array<NCBITaxon> = result.results.map((taxonResult) => {\n            let isBiological: boolean;\n            if (taxonResult.scientific_name === 'root' || taxonResult.scientific_name === 'cellular organisms') {\n                isBiological = false;\n            } else {\n                isBiological = true;\n            }\n            return {\n                ref: {\n                    collection: RelationEngineCollection.TAXONOMY,\n                    namespace: TaxonomyNamespace.NCBI,\n                    id: taxonResult.id,\n                    timestamp: result.ts\n                },\n                name: taxonResult.scientific_name,\n                rank: taxonResult.rank,\n                ncbiID: taxonResult.NCBI_taxon_id,\n                geneticCode: parseInt(taxonResult.gencode),\n                aliases: taxonResult.aliases.map(({ name, category }) => {\n                    return {\n                        name,\n                        category\n                    };\n                }),\n                isBiological\n            };\n        });\n        return [taxa, result.total_count];\n    }\n\n    // async getChildrenx(taxonID: TaxonID, options: GetChildrenOptions): Promise<[Array<Taxon>, number, number]> {\n    //     // Loop over results until done!\n    //     // Get the first batch. In the majority of cases, this will be it.\n\n    //     const getBatch = async (batch: number, batchSize: number): Promise<[Array<Taxon>, number]> => {\n    //         const offset = batch * batchSize;\n    //         const result = await this.taxonomyClient.getChildren({\n    //             taxonID,\n    //             offset,\n    //             limit: batchSize\n    //         });\n\n    //         const taxa = result.results.map((taxonResult) => {\n    //             let isBiological: boolean;\n    //             if (taxonResult.scientific_name === 'root' || taxonResult.scientific_name === 'cellular organisms') {\n    //                 isBiological = false;\n    //             } else {\n    //                 isBiological = true;\n    //             }\n    //             return {\n    //                 type: TaxonomySource.NCBI,\n    //                 id: taxonResult._id,\n    //                 name: taxonResult.scientific_name,\n    //                 rank: taxonResult.rank,\n    //                 ncbiID: taxonResult.NCBI_taxon_id,\n    //                 geneticCode: parseInt(taxonResult.gencode),\n    //                 aliases: taxonResult.aliases.map(({ name, category }) => {\n    //                     return {\n    //                         name,\n    //                         category\n    //                     };\n    //                 }),\n    //                 isBiological\n    //             };\n    //         });\n    //         return [taxa, result.total_count];\n    //     };\n\n    //     const [taxa, totalCount] = await getBatch(0, INITIAL_BATCH_SIZE);\n\n    //     if (totalCount <= taxa.length) {\n    //         return [taxa, totalCount, totalCount];\n    //     }\n\n    //     // Here we cap the total results requested to TOTAL_LIMIT\n    //     let totalLimit = Math.min(totalCount, TOTAL_LIMIT);\n\n    //     // How many batches do we need to fetch?\n    //     const totalBatchCount = Math.ceil((totalLimit - INITIAL_BATCH_SIZE) / BATCH_SIZE);\n\n    //     // In order to avoid overwhelming the service, we need to limit the\n    //     // # of concurrent requests.\n    //     const iterations = Math.ceil(totalBatchCount / PARALLELISM);\n\n    //     console.log('BATCHES', totalBatchCount, iterations);\n\n    //     let result = taxa;\n\n    //     console.log('taxa', taxa);\n\n    //     for (let iter = 0; iter < iterations; iter += 1) {\n    //         const pendingBatches: Array<Promise<[Array<Taxon>, number]>> = [];\n\n    //         const batchCount = Math.min(PARALLELISM, totalBatchCount - iter * PARALLELISM);\n\n    //         console.log(`iter ${iter}`);\n\n    //         for (let batch = 0; batch < batchCount; batch += 1) {\n    //             const offset = iter * PARALLELISM + batch;\n    //             const batchSize = Math.min(BATCH_SIZE, totalLimit - offset * BATCH_SIZE);\n    //             console.log('BATCH SIZE', batchSize, iter, batch, totalLimit - offset * BATCH_SIZE);\n    //             pendingBatches.push(getBatch(offset, batchSize));\n    //             // const [nextResult] = await getBatch(i);\n    //             // console.log('adding another batch', nextResult);\n    //             // result = result.concat(nextResult);\n    //         }\n\n    //         const batches = await Promise.all(pendingBatches);\n\n    //         result = result.concat.apply(\n    //             result,\n    //             batches.map(([taxa, count]) => {\n    //                 return taxa;\n    //             })\n    //         );\n    //     }\n\n    //     return [result, totalCount, totalLimit];\n    // }\n\n    async getTaxon(taxonRef: TaxonReference): Promise<Taxon> {\n        const {\n            namespace, id, timestamp\n        } = taxonRef;\n\n        const result = await this.taxonomyClient.getTaxon({\n            ns: taxonomyNamespaceToString(namespace),\n            id,\n            ts: timestamp\n        });\n\n        // if (!result.count) {\n        //     throw new Error(`Taxon not found`);\n        // }\n        const taxonResult = result.results[0];\n        let isBiological: boolean;\n        if (taxonResult.scientific_name === 'root' || taxonResult.scientific_name === 'cellular organisms') {\n            isBiological = false;\n        } else {\n            isBiological = true;\n        }\n\n        // TODO: here and above, we need to determine the namespace enum value by \n        // comparing the string coming in...\n        const taxon: Taxon = {\n            ref: {\n                collection: RelationEngineCollection.TAXONOMY,\n                namespace: TaxonomyNamespace.NCBI,\n                id: taxonResult.id,\n                timestamp: result.ts\n            },\n            name: taxonResult.scientific_name,\n            rank: taxonResult.rank,\n            ncbiID: taxonResult.NCBI_taxon_id,\n            geneticCode: parseInt(taxonResult.gencode),\n            aliases: taxonResult.aliases.map(({ name, category }) => {\n                return {\n                    name,\n                    category\n                };\n            }),\n            isBiological\n        };\n        return taxon;\n    }\n\n    async getLinkedObjects(taxonRef: TaxonReference, options: GetLinkedObjectsOptions): Promise<GetLinkedObjectsResult> {\n        const params = {\n            taxon_ns: taxonomyNamespaceToString(taxonRef.namespace),\n            taxon_id: taxonRef.id,\n            ts: taxonRef.timestamp,\n            offset: options.offset,\n            limit: options.limit\n        };\n        const result = await this.taxonomyClient.getAssociatedWorkspaceObjects(params);\n\n        const linkedObjects = result.results.map((result) => {\n            let workspaceType: WorkspaceType;\n            let title: string;\n            if (result.ws_obj.workspace.narr_name) {\n                workspaceType = WorkspaceType.NARRATIVE;\n                title = result.ws_obj.workspace.narr_name;\n            } else if (result.ws_obj.workspace.refdata_source) {\n                workspaceType = WorkspaceType.REFDATA;\n                title = result.ws_obj.workspace.refdata_source + ' Reference Data';\n            } else {\n                workspaceType = WorkspaceType.UNKNOWN;\n                title = 'Unknown Workspace Type';\n            }\n            return {\n                linkedAt: result.edge.updated_at,\n                objectID: result.ws_obj.object_id,\n                workspaceID: result.ws_obj.workspace_id,\n                version: result.ws_obj.version,\n                objectName: result.ws_obj.name,\n                createdAt: result.ws_obj.epoch,\n                workspaceUpdatedAt: result.ws_obj.updated_at,\n                type: {\n                    module: result.ws_obj.type.module_name,\n                    name: result.ws_obj.type.type_name,\n                    majorVersion: result.ws_obj.type.maj_ver,\n                    minorVersion: result.ws_obj.type.min_ver\n                },\n                workspaceType,\n                title\n            };\n        });\n        return {\n            linkedObjects,\n            totalCount: result.total_count\n        };\n    }\n}\n","import { DynamicServiceClient, DynamicServiceClientParams } from '@kbase/ui-lib';\n\ninterface TaxonomyAPIParams extends DynamicServiceClientParams { }\n\ntype TaxonID = string;\n\ninterface GetAncestorsParams {\n    id: TaxonID;\n}\n\ninterface GetDescendentsParams {\n    id: TaxonID;\n}\n\n// interface GetTaxonResultSuccess {\n//     count: true;\n//     taxon: Taxon;\n// }\n\n// interface GetTaxonResultNotFound {\n//     found: false;\n// }\n\n// type GetTaxonResult = GetTaxonResultSuccess | GetTaxonResultNotFound;\n\ninterface TaxonAlias {\n    canonical: Array<string>;\n    category: string;\n    name: string;\n}\n\ninterface TaxonResult {\n    NCBI_taxon_id: number;\n    _id: string;\n    _key: string;\n    _rev: string;\n    id: string;\n    ns: string;\n    ts: number;\n    aliases: Array<TaxonAlias>;\n    canonical_scientific_name: Array<string>;\n    gencode: string;\n    rank: string;\n    scientific_name: string;\n}\n\nexport interface GetTaxonParams {\n    ns: string;\n    id: TaxonID;\n    ts: number\n}\n\ninterface GetTaxonResult {\n    count: number;\n    cursor_id: number | null;\n    has_more: false;\n    stats: {\n        executionTime: number;\n        filtered: number;\n        httpRequests: number;\n        scannedFull: number;\n        scannedIndex: number;\n        writesExecuted: number;\n        writesIgnored: number;\n    };\n    results: Array<TaxonResult>;\n    ts: number;\n}\n\ninterface GetLineageResult {\n    stats: {\n        executionTime: number;\n        filtered: number;\n        httpRequests: number;\n        scannedFull: number;\n        scannedIndex: number;\n        writesExecuted: number;\n        writesIgnored: number;\n    };\n    results: Array<TaxonResult>;\n    ts: number;\n}\n\ninterface GetChildrenResult {\n    stats: {\n        executionTime: number;\n        filtered: number;\n        httpRequests: number;\n        scannedFull: number;\n        scannedIndex: number;\n        writesExecuted: number;\n        writesIgnored: number;\n    };\n    results: Array<TaxonResult>;\n    total_count: number;\n    ts: number;\n}\nexport interface Stats {\n    executionTime: number;\n    filtered: number;\n    httpRequests: number;\n    scannedFull: number;\n    scannedIndex: number;\n    writesExecuted: number;\n    writesIgnored: number;\n}\nexport interface GetAssociatedWorkspaceObjectsResultResult {\n    edge: {\n        _id: string;\n        assigned_by: string;\n        updated_at: number;\n    };\n    ws_obj: {\n        _id: string;\n        deleted: boolean;\n        epoch: number;\n        hash: string;\n        is_public: boolean;\n        name: string;\n        object_id: number;\n        size: number;\n        updated_at: number;\n        version: number;\n        workspace_id: number;\n        type: {\n            module_name: string;\n            type_name: string;\n            maj_ver: number;\n            min_ver: number;\n        },\n        workspace: {\n            narr_name: string | null;\n            refdata_source: string | null;\n        }\n    };\n}\n\nexport interface GetAssociatedWorkspaceObjectsResult {\n    results: Array<GetAssociatedWorkspaceObjectsResultResult>;\n    total_count: number;\n    stats: Stats;\n    ts: number;\n}\n\nexport interface GetLineageParams {\n    ns: string;\n    id: TaxonID;\n    ts: number;\n}\n\nexport interface GetChildrenParams {\n    ns: string;\n    id: TaxonID;\n    ts: number;\n    offset: number;\n    limit: number;\n    search_text: string;\n}\n\nexport interface GetAssociatedWorkspaceObjectsParams {\n    taxon_ns: string;\n    taxon_id: TaxonID;\n    ts: number;\n    limit: number;\n    offset: number;\n}\n\nexport default class TaxonomyAPIClient extends DynamicServiceClient {\n    static module: string = 'taxonomy_re_api';\n\n    async getLineage({ ns, id, ts }: { ns: string, id: TaxonID, ts: number }): Promise<GetLineageResult> {\n        const params: GetLineageParams = {\n            ns, id, ts\n        };\n        const [result] = await this.callFunc<[GetLineageParams], [GetLineageResult]>('get_lineage', [\n            params\n        ]);\n        return result;\n    }\n\n    async getChildren({\n        ns,\n        id,\n        ts,\n        offset,\n        limit,\n        searchTerm\n    }: {\n        ns: string,\n        id: TaxonID,\n        ts: number,\n        offset: number,\n        limit: number,\n        searchTerm: string\n    }): Promise<GetChildrenResult> {\n        const [result] = await this.callFunc<[GetChildrenParams], [GetChildrenResult]>('get_children', [\n            {\n                ns, id, ts,\n                offset,\n                limit,\n                search_text: searchTerm\n            }\n        ]);\n        return result;\n    }\n\n    async getTaxon({ ns, id, ts }: { ns: string, id: TaxonID, ts: number }): Promise<GetTaxonResult> {\n        const params: GetTaxonParams = {\n            ns, id, ts\n        }\n        const [result] = await this.callFunc<[GetTaxonParams], [GetTaxonResult]>('get_taxon', [\n            params\n        ]);\n        return result;\n    }\n\n    async getAssociatedWorkspaceObjects({\n        taxon_ns,\n        taxon_id,\n        ts,\n        offset,\n        limit\n    }: {\n        taxon_ns: string,\n        taxon_id: TaxonID,\n        ts: number,\n        offset: number,\n        limit: number\n    }): Promise<GetAssociatedWorkspaceObjectsResult> {\n        const params: GetAssociatedWorkspaceObjectsParams = {\n            taxon_ns, taxon_id, ts, limit, offset\n        }\n        const [result] = await this.callFunc<[GetAssociatedWorkspaceObjectsParams], [GetAssociatedWorkspaceObjectsResult]>('get_associated_ws_objects', [\n            params\n        ]);\n        console.log('associated', result);\n        return result;\n    }\n}\n","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../../../lib/DB';\nimport { AppConfig } from '@kbase/ui-components';\nimport { Taxon, TaxonReference } from '../../../types/taxonomy';\nimport { TaxonomyModel } from '../lib/model';\n\nexport type TaxonDBStateNone = DBStateNone;\nexport type TaxonDBStateLoading = DBStateLoading;\nexport type TaxonDBStateError = DBStateError;\n\nexport interface TaxonDBStateLoaded extends DBStateLoaded {\n    targetTaxon: Taxon;\n    selectedTaxon: Taxon;\n}\n\nexport type TaxonDBState = TaxonDBStateNone | TaxonDBStateLoading | TaxonDBStateLoaded | TaxonDBStateError;\n\nexport interface TaxonDBProps extends DBProps<TaxonDBState> {\n    token: string;\n    config: AppConfig;\n}\n\n// TODO: make props part of generic\nexport default class TaxonDB extends DB<TaxonDBState> {\n    props: TaxonDBProps;\n    constructor(props: TaxonDBProps) {\n        super(props);\n        this.props = props;\n    }\n    async getTargetTaxon(taxonRef: TaxonReference) {\n        try {\n            this.set((state: TaxonDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADING\n                };\n            });\n\n            const client = new TaxonomyModel({\n                token: this.props.token,\n                url: this.props.config.services.ServiceWizard.url\n            });\n\n            const taxon = await client.getTaxon(taxonRef);\n            this.set((state: TaxonDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    targetTaxon: taxon,\n                    selectedTaxon: taxon\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: TaxonDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    error: {\n                        code: 'not-found',\n                        source: 'TaxonDB.getTargetTaxon',\n                        message: ex.message,\n                    }\n                };\n            });\n        }\n    }\n\n    async getSelectedTaxon(taxonRef: TaxonReference) {\n        try {\n            // this.set((state: TaxonDBState) => {\n            //     return {\n            //         ...state,\n            //         status: DBStatus.LOADING\n            //     };\n            // });\n\n            const client = new TaxonomyModel({\n                token: this.props.token,\n                url: this.props.config.services.ServiceWizard.url\n            });\n\n            const taxon = await client.getTaxon(taxonRef);\n            this.set((state: TaxonDBState) => {\n                return {\n                    ...state,\n                    selectedTaxon: taxon\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: TaxonDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    error: {\n                        code: 'not-found',\n                        source: 'TaxonDB.getSelectedTaxon',\n                        message: ex.message,\n                    }\n                };\n            });\n        }\n    }\n}\n","import React from 'react';\nimport './SourceInfo.css';\n\nexport interface SourceInfoProps {}\n\ninterface SourceInfoState {}\n\nexport class SourceInfo extends React.Component<SourceInfoProps, SourceInfoState> {\n    render() {\n        return (\n            <div className=\"Row\">\n                <div className=\"Col-auto\">\n                    <img src=\"images/ncbi-logo.jpg\" style={{ height: '64px' }} alt=\"NCBI Logo\" />\n                </div>\n                <div className=\"Col\">\n                    <div className=\"InfoTable\">\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                                Source\n                            </div>\n                            <div className=\"InfoTable-dataCol\">\n                                <a\n                                    href=\"https://www.ncbi.nlm.nih.gov/guide/taxonomy/\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    NCBI\n                                </a>\n                            </div>\n                        </div>\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                                Version\n                            </div>\n                            <div className=\"InfoTable-dataCol\">SOME VERSION</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Taxon, TaxonReference, taxonomyNamespaceToString } from '../../types/taxonomy';\nimport { Tooltip, Icon } from 'antd';\nimport './TaxonItem.css';\nimport { relationEngineCollectionToString } from '../../types';\n\nexport interface Props {\n    taxon: Taxon;\n    isActive: boolean;\n    selectTaxonRef: (ref: TaxonReference) => void;\n    navigateToTaxonRef: (ref: TaxonReference) => void;\n}\n\ninterface State {\n    hovering: boolean;\n}\n\nexport default class TaxonItem extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            hovering: false\n        };\n    }\n    clickTaxon() {\n        this.props.selectTaxonRef(this.props.taxon.ref);\n    }\n    clickNavigateToTaxon() {\n        // const fixedID = this.props.taxon.id.replace('/', ':');\n        const hash = [\n            'review',\n            relationEngineCollectionToString(this.props.taxon.ref.collection),\n            taxonomyNamespaceToString(this.props.taxon.ref.namespace),\n            this.props.taxon.ref.id,\n            String(this.props.taxon.ref.timestamp)\n        ].join('/');\n        // const hash = `review/${fixedID}`;\n        // TODO: use the integration api?\n        if (window.parent) {\n            window.parent.location.hash = hash;\n        } else {\n            window.location.hash = hash;\n        }\n        // window.history.pushState({}, 'my title', `/#review/${this.props.taxon.id}`);\n        // this.props.navigateToTaxonID(this.props.taxon.id);\n    }\n\n    onMouseEnter(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: true });\n    }\n\n    onMouseLeave(ev: React.MouseEvent<HTMLDivElement>) {\n        this.setState({ hovering: false });\n    }\n\n    renderOver() {\n        return (\n            <React.Fragment>\n                <div className=\"TaxonItem-name\" onClick={this.clickNavigateToTaxon.bind(this)}>\n                    {this.props.taxon.name}\n                </div>\n                <div className=\"TaxonItem-inspector\" onClick={this.clickTaxon.bind(this)}>\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderActive() {\n        return (\n            <React.Fragment>\n                <div className=\"TaxonItem-name\" onClick={this.clickNavigateToTaxon.bind(this)}>\n                    {this.props.taxon.name}\n                </div>\n                <div className=\"TaxonItem-inspector\">\n                    <Icon type=\"arrow-right\" />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderNormal() {\n        return (\n            <React.Fragment>\n                <div className=\"TaxonItem-name\">{this.props.taxon.name}</div>\n            </React.Fragment>\n        );\n    }\n\n    renderItem() {\n        if (this.props.isActive) {\n            return this.renderActive();\n        }\n        if (this.state.hovering) {\n            return this.renderOver();\n        } else {\n            return this.renderNormal();\n        }\n    }\n\n    render() {\n        const taxon = this.props.taxon;\n        const classNames = ['TaxonItem'];\n        if (this.props.isActive) {\n            classNames.push('TaxonItem-active');\n        }\n\n        const tooltipTitle = (\n            <div>\n                <div style={{ borderBottom: '1px solid silver' }}>{taxon.name}</div>\n                <div>{taxon.rank}</div>\n            </div>\n        );\n\n        return (\n            <Tooltip title={tooltipTitle} placement=\"right\">\n                <div\n                    className={classNames.join(' ')}\n                    key={this.props.taxon.ref.id}\n                    onMouseEnter={this.onMouseEnter.bind(this)}\n                    onMouseLeave={this.onMouseLeave.bind(this)}\n                >\n                    {this.renderItem()}\n                </div>\n            </Tooltip>\n        );\n    }\n}\n","import DB, {\n    DBProps,\n    DBStatus,\n    DBStateNone,\n    DBStateLoading,\n    DBStateLoaded,\n    DBStateError,\n    DBStateReLoading\n} from '../../../lib/DB';\nimport { AppConfig } from '@kbase/ui-components';\nimport { Taxon, TaxonReference } from '../../../types/taxonomy';\nimport { TaxonomyModel } from '../lib/model';\n\nexport type TaxonDBStateNone = DBStateNone;\nexport type TaxonDBStateLoading = DBStateLoading;\nexport type TaxonDBStateError = DBStateError;\n\nexport interface TaxonDBStateLoaded extends DBStateLoaded {\n    taxa: Array<Taxon>;\n    total: number;\n    page: number;\n    pageSize: number;\n}\n\nexport interface TaxonDBStateReLoading extends DBStateReLoading {\n    taxa: Array<Taxon>;\n    total: number;\n    page: number;\n    pageSize: number;\n}\n\nexport type TaxonDBState =\n    | TaxonDBStateNone\n    | TaxonDBStateLoading\n    | TaxonDBStateLoaded\n    | TaxonDBStateReLoading\n    | TaxonDBStateError;\n\nexport interface TaxonDBProps extends DBProps<TaxonDBState> {\n    token: string;\n    config: AppConfig;\n}\n\nexport default class TaxonChildrenDB extends DB<TaxonDBState> {\n    token: string;\n    serviceWizardURL: string;\n    constructor(props: TaxonDBProps) {\n        super(props);\n        this.token = props.token;\n        this.serviceWizardURL = props.config.services.ServiceWizard.url;\n    }\n    // Remember, pages are 1 based; offset is 0 based.\n    // async fetchTaxa(taxonID: TaxonID, page: number, pageSize: number) {\n    //     try {\n    //         this.set((state: TaxonDBState) => {\n    //             return {\n    //                 ...state,\n    //                 status: DBStatus.LOADING\n    //             };\n    //         });\n\n    //         const client = new TaxonomyModel({\n    //             token: this.token,\n    //             url: this.serviceWizardURL\n    //         });\n\n    //         const offset = (page - 1) * pageSize;\n    //         const limit = pageSize;\n\n    //         const [taxa, totalCount] = await client.getChildren(taxonID, {\n    //             offset,\n    //             limit\n    //         });\n    //         this.set((state: TaxonDBState) => {\n    //             return {\n    //                 ...state,\n    //                 status: DBStatus.LOADED,\n    //                 taxa,\n    //                 total: totalCount,\n    //                 page,\n    //                 pageSize\n    //             };\n    //         });\n    //     } catch (ex) {\n    //         console.error('ERROR', ex);\n    //         this.set((state: TaxonDBState) => {\n    //             return {\n    //                 status: DBStatus.ERROR,\n    //                 message: ex.message\n    //             };\n    //         });\n    //     }\n    // }\n\n    async fetchChildren({\n        taxonRef,\n        page,\n        pageSize,\n        searchTerm\n    }: {\n        taxonRef: TaxonReference;\n        page: number;\n        pageSize: number;\n        searchTerm: string;\n    }) {\n        try {\n            this.set((state: TaxonDBState) => {\n                if (state.status === DBStatus.LOADED) {\n                    return {\n                        ...state,\n                        status: DBStatus.RELOADING\n                    };\n                } else {\n                    return {\n                        ...state,\n                        status: DBStatus.LOADING\n                    };\n                }\n            });\n\n            const client = new TaxonomyModel({\n                token: this.token,\n                url: this.serviceWizardURL\n            });\n\n            const offset = (page - 1) * pageSize;\n            const limit = pageSize;\n\n            const [taxa, totalCount] = await client.getChildren(taxonRef, {\n                offset,\n                limit,\n                searchTerm\n            });\n            this.set((state: TaxonDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    taxa,\n                    total: totalCount,\n                    page,\n                    pageSize\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: TaxonDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    error: {\n                        code: 'not-found',\n                        source: 'TaxonChildrenDB.fetchChildren',\n                        message: ex.message,\n                    }\n                };\n            });\n        }\n    }\n}\n","import React from 'react';\nimport { Taxon, TaxonReference } from '../../types/taxonomy';\nimport './TaxonList.css';\nimport TaxonItem from './TaxonItem';\nimport { Empty } from 'antd';\n\nexport interface Props {\n    taxa: Array<Taxon>;\n    maxItems: number;\n    totalItems: number;\n    selectedTaxonRef: TaxonReference | null;\n    selectTaxonRef: (ref: TaxonReference) => void;\n    navigateToTaxonRef: (ref: TaxonReference) => void;\n}\n\ninterface State { }\n\nexport default class TaxonList extends React.Component<Props, State> {\n    selectTaxon(ref: TaxonReference) {\n        this.props.selectTaxonRef(ref);\n    }\n    navigateToTaxon(ref: TaxonReference) {\n        this.props.navigateToTaxonRef(ref);\n    }\n    renderItemsPlain() {\n        return this.props.taxa.map((taxon, index) => {\n            const isActive = this.props.selectedTaxonRef !== null &&\n                this.props.selectedTaxonRef.id === taxon.ref.id;\n            return (\n                <TaxonItem\n                    taxon={taxon}\n                    isActive={isActive}\n                    selectTaxonRef={this.selectTaxon.bind(this)}\n                    key={String(index)}\n                    navigateToTaxonRef={this.navigateToTaxon.bind(this)}\n                />\n            );\n        });\n    }\n    renderNoItems() {\n        return <Empty description=\"No Children\" image={Empty.PRESENTED_IMAGE_SIMPLE} />;\n    }\n    render() {\n        if (this.props.taxa.length === 0) {\n            return this.renderNoItems();\n        }\n        return this.renderItemsPlain();\n    }\n}\n","import React from 'react';\nimport { UIError } from \"../types\";\nimport { Alert, Icon } from 'antd';\n\nexport interface ErrorViewProps {\n    error: UIError\n}\n\ninterface ErrorViewState {\n\n}\n\nexport default class ErrorView extends React.Component<ErrorViewProps, ErrorViewState> {\n    renderMessage() {\n        return (\n            // <Icon type=\"exclamation-circle\" />\n            <span>\n                <Icon type=\"exclamation-circle\" style={{ color: 'red' }} />\n                {' '}\n                {this.props.error.message}\n            </span>\n        )\n    }\n    render() {\n        return (\n            <Alert type=\"error\" message={this.renderMessage()}></Alert>\n        )\n    }\n}","import React from 'react';\nimport { Pagination, Icon, Input, Spin } from 'antd';\nimport TaxonList from '../TaxonList';\nimport { TaxonReference } from '../../../types/taxonomy';\nimport { TaxonDBState, TaxonDBStateError, TaxonDBStateLoaded, TaxonDBStateReLoading } from './TaxonChildrenDB';\nimport { DBStatus } from '../../../lib/DB';\nimport './index.css';\nimport ErrorView from '../../../components/ErrorView';\n\nconst DEFAULT_PAGE_SIZE = 10;\n\nexport interface Props {\n    db: TaxonDBState;\n    taxonRef: TaxonReference;\n    selectedTaxonRef: TaxonReference | null;\n    // taxa: Array<Taxon>;\n    // total: number;\n    selectTaxonRef: (taxonRef: TaxonReference) => void;\n    navigateToTaxonRef: (taxonRef: TaxonReference) => void;\n    fetchChildren: (taxonRef: TaxonReference, page: number, pageSize: number, searchTerm: string) => void;\n}\n\nexport interface State { }\n\nexport default class TaxonChildren extends React.Component<Props, State> {\n    searchTerm: string;\n    page: number;\n    pageSize: number | null;\n    constructor(props: Props) {\n        super(props);\n        this.searchTerm = '';\n        this.page = 1;\n        this.pageSize = null;\n    }\n    componentDidMount() {\n        this.props.fetchChildren(this.props.taxonRef, 1, DEFAULT_PAGE_SIZE, '');\n    }\n    renderTaxaNone() {\n        return <div>None</div>;\n    }\n    renderTaxaLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderTitleLoaded(db: TaxonDBStateLoaded | TaxonDBStateReLoading) {\n        if (db.total === 0) {\n            return <div className=\"Col-auto TaxonChildren-box-title\">No Children</div>;\n        }\n\n        const totalCount = Intl.NumberFormat('en-US', {\n            useGrouping: true\n        }).format(db.total);\n        const currentItem = (db.page - 1) * db.pageSize + 1;\n        const lastItem = currentItem + db.taxa.length - 1;\n\n        return (\n            <div className=\"Col-auto TaxonChildren-box-title\">\n                Children ({currentItem}-{lastItem} of {totalCount})\n            </div>\n        );\n    }\n\n    renderTitleReLoading(db: TaxonDBStateReLoading) {\n        return <Spin size=\"small\">{this.renderTitleLoaded(db)}</Spin>;\n    }\n\n    renderTitle() {\n        const db = this.props.db;\n        switch (db.status) {\n            case DBStatus.NONE:\n            case DBStatus.LOADING:\n                return <div>Loading...</div>;\n            case DBStatus.ERROR:\n                return <ErrorView error={db.error} />\n            case DBStatus.LOADED:\n                return this.renderTitleLoaded(db);\n            case DBStatus.RELOADING:\n                return this.renderTitleReLoading(db);\n        }\n    }\n    doSearch(term: string) {\n        this.searchTerm = term;\n        this.props.fetchChildren(this.props.taxonRef, 1, this.pageSize || DEFAULT_PAGE_SIZE, term);\n    }\n    renderSearch() {\n        const disabled =\n            this.props.db.status !== DBStatus.LOADED ||\n            (this.props.db.total <= this.props.db.pageSize && !this.searchTerm);\n        return (\n            <div style={{ marginBottom: '4px' }}>\n                <Input.Search placeholder=\"Search Children\" onSearch={this.doSearch.bind(this)} disabled={disabled} />\n            </div>\n        );\n    }\n    renderTaxaLoaded(db: TaxonDBStateLoaded | TaxonDBStateReLoading) {\n        return (\n            <React.Fragment>\n                <TaxonList\n                    taxa={db.taxa}\n                    selectedTaxonRef={this.props.selectedTaxonRef}\n                    selectTaxonRef={this.props.selectTaxonRef}\n                    navigateToTaxonRef={this.props.navigateToTaxonRef}\n                    totalItems={db.total}\n                    maxItems={DEFAULT_PAGE_SIZE}\n                />\n            </React.Fragment>\n        );\n    }\n    renderTaxaReLoading(db: TaxonDBStateReLoading) {\n        return <Spin tip=\"Loading\">{this.renderTaxaLoaded(db)}</Spin>;\n    }\n    renderTaxaError(db: TaxonDBStateError) {\n        return <ErrorView error={db.error} />\n    }\n    renderTaxa() {\n        switch (this.props.db.status) {\n            case DBStatus.NONE:\n                return this.renderTaxaNone();\n            case DBStatus.LOADING:\n                return this.renderTaxaLoading();\n            case DBStatus.LOADED:\n                return this.renderTaxaLoaded(this.props.db);\n            case DBStatus.RELOADING:\n                return this.renderTaxaReLoading(this.props.db);\n            case DBStatus.ERROR:\n                return this.renderTaxaError(this.props.db);\n        }\n    }\n    changePage(page: number, pageSize: number | undefined) {\n        this.page = page;\n        this.pageSize = pageSize || DEFAULT_PAGE_SIZE;\n        this.props.fetchChildren(this.props.taxonRef, this.page, this.pageSize, this.searchTerm);\n    }\n    renderPaginationNone() {\n        return <Pagination size=\"small\" showLessItems={true} hideOnSinglePage={false} />;\n    }\n    renderPaginationLoading() {\n        return <Pagination size=\"small\" showLessItems={true} hideOnSinglePage={false} />;\n    }\n    renderPaginationError() {\n        return <Pagination size=\"small\" showLessItems={true} hideOnSinglePage={false} />;\n    }\n    renderPaginationLoaded(db: TaxonDBStateLoaded) {\n        return (\n            <Pagination\n                size=\"small\"\n                defaultPageSize={db.pageSize}\n                // defaultCurrent={1}\n                showLessItems={true}\n                current={db.page}\n                hideOnSinglePage={false}\n                total={db.total}\n                onChange={this.changePage.bind(this)}\n            />\n        );\n    }\n    renderPaginationReLoading(db: TaxonDBStateReLoading) {\n        return (\n            <Pagination\n                size=\"small\"\n                defaultPageSize={db.pageSize}\n                // defaultCurrent={1}\n                showLessItems={true}\n                current={db.page}\n                hideOnSinglePage={false}\n                total={db.total}\n                disabled={true}\n            />\n        );\n    }\n    renderPagination() {\n        const db = this.props.db;\n        switch (db.status) {\n            case DBStatus.NONE:\n                return this.renderPaginationNone();\n            case DBStatus.LOADING:\n                return this.renderPaginationLoading();\n            case DBStatus.ERROR:\n                return this.renderPaginationError();\n            case DBStatus.LOADED:\n                return this.renderPaginationLoaded(db);\n            case DBStatus.RELOADING:\n                return this.renderPaginationReLoading(db);\n        }\n    }\n    renderChildren() {\n        return (\n            <div>\n                {this.renderTitle()}\n                {this.renderSearch()}\n                {this.renderPagination()}\n                {this.renderTaxa()}\n            </div>\n        );\n    }\n\n    render() {\n        return this.renderChildren();\n    }\n}\n","import React from 'react';\nimport TaxonDB, { TaxonDBState, TaxonDBStateError } from './TaxonChildrenDB';\nimport { DBStatus } from '../../../lib/DB';\n\nimport { AppConfig } from '@kbase/ui-components';\nimport TaxonChildren from './TaxonChildren';\nimport { TaxonReference } from '../../../types/taxonomy';\nimport { Alert } from 'antd';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    taxonRef: TaxonReference;\n    selectedTaxonRef: TaxonReference | null;\n    selectTaxonRef: (taxonRef: TaxonReference) => void;\n    navigateToTaxonRef: (taxonRef: TaxonReference) => void;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: TaxonDB;\n    constructor(props: Props) {\n        super(props);\n        this.db = new TaxonDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n    }\n\n    componentDidMount() {\n        // this.db.stop();\n    }\n\n    fetchChildren(taxonRef: TaxonReference, page: number, pageSize: number, searchTerm: string) {\n        return this.db.fetchChildren({ taxonRef, page, pageSize, searchTerm });\n    }\n\n    renderSuccess(db: TaxonDBState) {\n        return <TaxonChildren\n            db={db}\n            taxonRef={this.props.taxonRef}\n            selectedTaxonRef={this.props.selectedTaxonRef}\n            selectTaxonRef={this.props.selectTaxonRef}\n            navigateToTaxonRef={this.props.navigateToTaxonRef}\n            fetchChildren={this.fetchChildren.bind(this)}\n        />\n    }\n\n    renderError(db: TaxonDBStateError) {\n        return <Alert type=\"error\" message={db.error.message} />\n    }\n\n    renderTest() {\n        return \"test\";\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case (DBStatus.ERROR):\n                return this.renderError(db);\n            default:\n                // return this.renderTest()\n                return this.renderSuccess(db);\n        }\n    }\n}\n","import { AppConfig } from '@kbase/ui-components';\nimport { StoreState } from '../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps { }\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../../../lib/DB';\nimport { AppConfig } from '@kbase/ui-components';\nimport { Taxon, TaxonReference } from '../../../types/taxonomy';\nimport { TaxonomyModel } from '../lib/model';\n\nexport type LineageDBStateNone = DBStateNone;\nexport type LineageDBStateLoading = DBStateLoading;\nexport type LineageDBStateError = DBStateError;\n\nexport interface LineageDBStateLoaded extends DBStateLoaded {\n    lineage: Array<Taxon>;\n}\n\nexport type LineageDBState = LineageDBStateNone | LineageDBStateLoading | LineageDBStateLoaded | LineageDBStateError;\n\nexport interface LineageDBProps extends DBProps<LineageDBState> {\n    token: string;\n    config: AppConfig;\n}\n\n// TODO: make props part of generic\nexport default class LineageDB extends DB<LineageDBState> {\n    props: LineageDBProps;\n    constructor(props: LineageDBProps) {\n        super(props);\n        this.props = props;\n    }\n    async getLineage(taxonRef: TaxonReference) {\n        try {\n            this.set((state: LineageDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADING\n                };\n            });\n\n            const client = new TaxonomyModel({\n                token: this.props.token,\n                url: this.props.config.services.ServiceWizard.url\n            });\n            const lineage = await client.getLineage(taxonRef);\n            this.set((state: LineageDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    lineage\n                };\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: LineageDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    error: {\n                        code: 'not-found',\n                        source: 'LineageDB.getLineage',\n                        message: ex.message,\n                    }\n                };\n            });\n        }\n    }\n}\n","import React from 'react';\nimport { Taxon, TaxonReference } from '../../../types/taxonomy';\nimport TaxonList from '../TaxonList';\n\nexport interface Props {\n    lineage: Array<Taxon>;\n    selectedTaxonRef: TaxonReference;\n    selectTaxonRef: (ref: TaxonReference) => void;\n    navigateToTaxonRef: (ref: TaxonReference) => void;\n}\n\ninterface State { }\n\nexport default class Lineage extends React.Component<Props, State> {\n    render() {\n        return (\n            <TaxonList\n                taxa={this.props.lineage}\n                selectedTaxonRef={this.props.selectedTaxonRef}\n                selectTaxonRef={this.props.selectTaxonRef}\n                navigateToTaxonRef={this.props.navigateToTaxonRef}\n                totalItems={this.props.lineage.length}\n                maxItems={10}\n            />\n        );\n    }\n}\n","import React from 'react';\nimport LineageDB, { LineageDBStateLoaded } from './LineageDB';\nimport { DBStatus, DBStateError } from '../../../lib/DB';\n\nimport { AppConfig } from '@kbase/ui-components';\nimport Lineage from './Lineage';\nimport { TaxonReference } from '../../../types/taxonomy';\nimport { Icon } from 'antd';\nimport ErrorView from '../../../components/ErrorView';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    taxonRef: TaxonReference;\n    selectedTaxonRef: TaxonReference;\n    selectTaxonRef: (taxonRef: TaxonReference) => void;\n    navigateToTaxonRef: (taxonRef: TaxonReference) => void;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: LineageDB;\n    constructor(props: Props) {\n        super(props);\n        this.db = new LineageDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n    }\n\n    componentDidMount() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                this.db.getLineage(this.props.taxonRef);\n        }\n    }\n\n    componentWillUnmount() {\n        // this.db.stop();\n    }\n\n    renderLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderError(db: DBStateError) {\n        return <ErrorView error={db.error} />\n    }\n\n    renderLoaded(db: LineageDBStateLoaded) {\n        return (\n            <Lineage\n                lineage={db.lineage}\n                selectedTaxonRef={this.props.selectedTaxonRef}\n                selectTaxonRef={this.props.selectTaxonRef}\n                navigateToTaxonRef={this.props.navigateToTaxonRef}\n            />\n        );\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                // this.db.getLineage(this.props.taxonRef);\n                return this.renderLoading();\n            case DBStatus.LOADING:\n                return this.renderLoading();\n            case DBStatus.ERROR:\n                return this.renderError(db);\n            case DBStatus.LOADED:\n                return this.renderLoaded(db);\n        }\n    }\n}\n","import { AppConfig } from '@kbase/ui-components';\nimport { StoreState } from '../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps { }\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import React from 'react';\nimport { Taxon, TaxonReference } from '../../types/taxonomy';\nimport './LineageNavigator.css';\nimport TaxonItem from './TaxonItem';\nimport TaxonChildren from './taxonChildren';\nimport Lineage from './lineage';\n\nexport interface LineageProps {\n    selectedTaxon: Taxon;\n    targetTaxon: Taxon;\n    selectTaxonRef: (ref: TaxonReference) => void;\n    navigateToTaxonRef: (ref: TaxonReference) => void;\n}\n\ninterface LineageState { }\n\nexport default class LineageNavigator extends React.Component<LineageProps, LineageState> {\n    onClick(ref: TaxonReference) {\n        this.props.selectTaxonRef(ref);\n        // alert('navigate to ' + taxonId);\n    }\n\n    // menuSelected(param: SelectParam) {\n    //     this.props.selectTaxonRef(param.key);\n    //     // alert('navigate to ' + param.key);\n    // }\n\n    clickTaxon(taxon: Taxon) {\n        this.props.selectTaxonRef(taxon.ref);\n    }\n\n    renderLineage() {\n        return (\n            <Lineage\n                taxonRef={this.props.targetTaxon.ref}\n                selectedTaxonRef={this.props.selectedTaxon.ref}\n                selectTaxonRef={this.props.selectTaxonRef}\n                navigateToTaxonRef={this.props.navigateToTaxonRef}\n            />\n        );\n        // return 'disabled';\n    }\n\n    renderChildrenCount(count: number) {\n        if (count === 0) {\n            return <div className=\"\">No children</div>;\n        }\n        if (count === 1) {\n            return <div>One child</div>;\n        }\n        return (\n            <div>\n                {Intl.NumberFormat('en-US', {\n                    useGrouping: true\n                }).format(count)}{' '}\n                children\n            </div>\n        );\n    }\n\n    renderChildren() {\n        let selectedRef: TaxonReference | null;\n        if (this.props.selectedTaxon) {\n            selectedRef = this.props.selectedTaxon.ref;\n        } else {\n            selectedRef = null;\n        }\n\n        return (\n            <TaxonChildren\n                taxonRef={this.props.targetTaxon.ref}\n                selectedTaxonRef={selectedRef}\n                selectTaxonRef={this.props.selectTaxonRef}\n                navigateToTaxonRef={this.props.navigateToTaxonRef}\n            />\n        );\n    }\n\n    // renderChildrenxscrolling() {\n    //     let selectedId;\n    //     if (this.props.selectedTaxon) {\n    //         selectedId = this.props.selectedTaxon.id;\n    //     } else {\n    //         selectedId = null;\n    //     }\n\n    //     return (\n    //         <div className=\"scrolling\">\n    //             <TaxonList\n    //                 taxa={this.props.offspring}\n    //                 selectedTaxonID={selectedId}\n    //                 selectTaxonID={this.props.selectTaxonID}\n    //                 navigateToTaxonID={this.props.navigateToTaxonID}\n    //                 totalItems={this.props.totalOffspring}\n    //                 maxItems={10}\n    //             />\n    //         </div>\n    //     );\n    // }\n\n    renderTargetTaxon() {\n        const isActive =\n            this.props.selectedTaxon &&\n            this.props.selectedTaxon.ref.id === this.props.targetTaxon.ref.id &&\n            this.props.selectedTaxon.ref.timestamp === this.props.targetTaxon.ref.timestamp;\n\n        return (\n            <TaxonItem\n                taxon={this.props.targetTaxon}\n                isActive={isActive}\n                selectTaxonRef={this.props.selectTaxonRef}\n                navigateToTaxonRef={this.props.navigateToTaxonRef}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"Col scrollable\" style={{ overflowY: 'auto' }}>\n                <div className=\"Col-auto Nav-box\">\n                    <div className=\"Nav-box-title\">Lineage</div>\n                    {this.renderLineage()}\n                </div>\n                <div className=\"Col-auto Nav-box Lineage-target-taxon\">{this.renderTargetTaxon()}</div>\n                <div className=\"Col-auto scrollable Nav-box\">{this.renderChildren()}</div>\n            </div>\n        );\n    }\n}\n","import React, { CSSProperties } from 'react';\nimport { Taxon } from '../../types/taxonomy';\n\nexport interface Props {\n    taxon: Taxon;\n}\n\nexport interface State { }\n\nexport default class TaxonSummary extends React.Component<Props, State> {\n    render() {\n        let nameStyle: CSSProperties = {};\n        if (this.props.taxon.rank === 'species') {\n            nameStyle = { fontStyle: 'italic' };\n        }\n        return (\n            <div className=\"InfoTable\">\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                        Name\n                    </div>\n                    <div className=\"InfoTable-dataCol\" style={nameStyle}>\n                        {this.props.taxon.name}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                        Rank\n                    </div>\n                    <div className=\"InfoTable-dataCol\">{this.props.taxon.rank}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { NCBITaxon, TaxonAlias } from '../../../types/taxonomy';\nimport { Table } from 'antd';\nimport geneticCodes from '../data/geneticCodes.json';\n\n// as Array<[number, string]>\n\ntype GeneticCodes = Array<[number, string]>;\n\nfunction ensureGeneticCodes(geneticCodes: any): GeneticCodes {\n    if (!(geneticCodes instanceof Array)) {\n        throw new Error('Invalid genetic codes file!');\n    }\n\n    return geneticCodes.map(([id, name]) => {\n        if (typeof id !== 'number') {\n            throw new Error('Invalid genetic code id in file');\n        }\n        if (typeof name !== 'string') {\n            throw new Error('Invalid genetic code label in file');\n        }\n        return [id, name];\n    });\n}\n\nconst gc = ensureGeneticCodes(geneticCodes);\n\nconst geneticCodesMap: Map<number, string> = gc.reduce((geneticCodesMap, [id, label]) => {\n    geneticCodesMap.set(id, label);\n    return geneticCodesMap;\n}, new Map<number, string>());\n\nexport interface TaxonDetailProps {\n    taxon: NCBITaxon;\n}\n\ninterface TaxonDetailState { }\n\nexport default class TaxonDetailNCBI extends React.Component<TaxonDetailProps, TaxonDetailState> {\n    renderAliases() {\n        const aliasNameSorter = (a: TaxonAlias, b: TaxonAlias) => {\n            return stringSorter(a.name, b.name);\n        };\n\n        const aliasCategorySorter = (a: TaxonAlias, b: TaxonAlias) => {\n            return stringSorter(a.category, b.category);\n        };\n\n        const stringSorter = (a: string, b: string) => {\n            const fixedA = a.replace(/^[\"']/, '');\n            const fixedB = b.replace(/^[\"']/, '');\n            return fixedA.localeCompare(fixedB);\n        };\n        return (\n            <Table\n                dataSource={this.props.taxon.aliases}\n                className=\"KBaseAntdOverride-remove-table-border\"\n                size=\"small\"\n                // pagination={{ position: 'top' }}\n                pagination={false}\n                scroll={{ y: '25em' }}\n                rowKey=\"name\"\n                bordered={false}\n            >\n                <Table.Column\n                    title=\"Name\"\n                    dataIndex=\"name\"\n                    key=\"name\"\n                    defaultSortOrder=\"ascend\"\n                    sorter={aliasNameSorter}\n                />\n                <Table.Column\n                    title=\"Category\"\n                    dataIndex=\"category\"\n                    key=\"category\"\n                    width=\"20em\"\n                    sorter={aliasCategorySorter}\n                />\n            </Table>\n        );\n    }\n\n    renderTaxonDetail() {\n        const width = '8em';\n        let nameStyle: React.CSSProperties = {};\n        if (this.props.taxon.rank === 'species') {\n            nameStyle.fontStyle = 'italic';\n        }\n        return (\n            <div className=\"InfoTable\">\n                <div className=\"InfoTable-row\" key=\"name\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        Name\n                    </div>\n                    <div className=\"InfoTable-dataCol\" style={nameStyle}>\n                        {this.props.taxon.name}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\" key=\"rank\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        Rank\n                    </div>\n                    <div className=\"InfoTable-dataCol\">{this.props.taxon.rank}</div>\n                </div>\n                <div className=\"InfoTable-row\" key=\"ncbiid\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        NCBI ID\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        <a\n                            href={`https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=info&id=${\n                                this.props.taxon.ncbiID\n                                }`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            {this.props.taxon.ncbiID}\n                        </a>\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\" key=\"genetic-code\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        Genetic Code\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.props.taxon.geneticCode} -{' '}\n                        {geneticCodesMap.get(this.props.taxon.geneticCode) || 'Unknown'}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\" key=\"aliases\">\n                    <div className=\"InfoTable-labelCol\" style={{ width }}>\n                        Aliases\n                    </div>\n                    <div className=\"InfoTable-dataCol\">{this.renderAliases()}</div>\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return <div>{this.renderTaxonDetail()}</div>;\n    }\n}\n","import React from 'react';\nimport { Taxon, TaxonomyNamespace, NCBITaxon } from '../../../types/taxonomy';\nimport TaxonDetailNCBI from './TaxonDetailNCBI';\nimport { Alert } from 'antd';\n\nexport interface TaxonDetailProps {\n    taxon: Taxon;\n}\n\ninterface TaxonDetailState { }\n\nexport default class TaxonDetail extends React.Component<TaxonDetailProps, TaxonDetailState> {\n    render() {\n        const taxon = this.props.taxon;\n        switch (taxon.ref.namespace) {\n            case TaxonomyNamespace.NCBI:\n                // TODO: why does this not prove to TS that we have a NCBITaxon?\n                return <TaxonDetailNCBI taxon={taxon as NCBITaxon} />;\n            default:\n                return <Alert type=\"error\" message=\"This taxon type is not supported\" />;\n        }\n    }\n}\n","export function getProp<T>(obj: object, propPath: string | Array<string>, defaultValue: any): T {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length; i += 1) {\n        if (temp === undefined || typeof temp !== 'object' || temp === null) {\n            return defaultValue;\n        }\n        temp = temp[propPath[i]];\n    }\n    if (temp === undefined) {\n        return defaultValue;\n    }\n    return temp;\n}\n\nexport function hasProp(obj: object, propPath: string | Array<string>): boolean {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length; i += 1) {\n        if (temp === undefined || typeof temp !== 'object' || temp === null) {\n            return false;\n        }\n        temp = temp[propPath[i]];\n    }\n    if (temp === undefined) {\n        return false;\n    }\n    return true;\n}\n\nexport function setProp(obj: object, propPath: string | Array<string>, value: any) {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    if (propPath.length === 0) {\n        return;\n    }\n    // pop off the last property for setting at the end.\n    const propKey = propPath[propPath.length - 1];\n    let key;\n    // Walk the path, creating empty objects if need be.\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length - 1; i += 1) {\n        key = propPath[i];\n        if (temp[key] === undefined) {\n            temp[key] = {};\n        }\n        obj = temp[key];\n    }\n    // Finally set the property.\n    temp[propKey] = value;\n    return value;\n}\n\nexport function incrProp(obj: object, propPath: string | Array<string>, increment: number): number | undefined {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    if (propPath.length === 0) {\n        return;\n    }\n    increment = increment === undefined ? 1 : increment;\n    const propKey = propPath[propPath.length - 1];\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length - 1; i += 1) {\n        const key = propPath[i];\n        if (temp[key] === undefined) {\n            temp[key] = {};\n        }\n        temp = temp[key];\n    }\n    if (temp[propKey] === undefined) {\n        temp[propKey] = increment;\n    } else {\n        if (typeof temp[propKey] === 'number') {\n            temp[propKey] += increment;\n        } else {\n            throw new Error('Can only increment a number');\n        }\n    }\n    return temp[propKey];\n}\n\nexport function deleteProp(obj: object, propPath: string | Array<string>) {\n    if (typeof propPath === 'string') {\n        propPath = propPath.split('.');\n    } else if (!(propPath instanceof Array)) {\n        throw new TypeError('Invalid type for key: ' + typeof propPath);\n    }\n    if (propPath.length === 0) {\n        return false;\n    }\n    const propKey = propPath[propPath.length - 1];\n    let temp: any = obj;\n    for (let i = 0; i < propPath.length - 1; i += 1) {\n        const key = propPath[i];\n        if (temp[key] === undefined) {\n            // for idempotency, and utility, do not throw error if\n            // the key doesn't exist.\n            return false;\n        }\n        obj = temp[key];\n    }\n    if (temp[propKey] === undefined) {\n        return false;\n    }\n    delete temp[propKey];\n    return true;\n}\n\n// class Props {\n//     constructor(config = {}) {\n//         this.obj = config.data || {};\n//     }\n\n//     getItem(props, defaultValue) {\n//         return getProp(this.obj, props, defaultValue);\n//     }\n\n//     hasItem(propPath) {\n//         return hasProp(this.obj, propPath);\n\n//     }\n\n//     setItem(path, value) {\n//         return setProp(this.obj, path, value);\n//     }\n\n//     incrItem(path, increment) {\n//         return incrProp(this.obj, path, increment);\n//     }\n\n//     deleteItem(path) {\n//         return deleteProp(this.obj, path);\n//     }\n\n//     getRaw() {\n//         return this.obj;\n//     }\n// }\n\n// return Object.freeze({ Props, getProp, hasProp, setProp, incrProp, deleteProp });\n","import React from 'react';\n\nimport WikipediaClient, { WikipediaInfo } from '../landingPages/taxonomy/lib/Wikipedia';\nimport marked from 'marked';\nimport { Icon, Alert, Tooltip } from 'antd';\nimport Loading from './Loading';\nimport './Wikipedia.css';\n\nexport interface WikipediaProps {\n    term: string;\n}\n\nenum AsyncComponentLoadingState {\n    NONE,\n    LOADING,\n    LOADED,\n    ERROR\n}\n\ninterface StateNone {\n    state: AsyncComponentLoadingState.NONE;\n}\n\ninterface StateLoading {\n    state: AsyncComponentLoadingState.LOADING;\n}\n\ninterface StateLoaded {\n    state: AsyncComponentLoadingState.LOADED;\n    wikipediaInfo: WikipediaInfo;\n}\n\ninterface StateError {\n    state: AsyncComponentLoadingState.ERROR;\n    error: string;\n}\n\ntype WikipediaState = StateNone | StateLoading | StateLoaded | StateError;\n\nexport default class Wikipedia extends React.Component<WikipediaProps, WikipediaState> {\n    wikipediaClient: WikipediaClient;\n    canceled: boolean;\n    constructor(props: WikipediaProps) {\n        super(props);\n        this.wikipediaClient = new WikipediaClient();\n        this.canceled = false;\n        this.state = {\n            state: AsyncComponentLoadingState.NONE\n        };\n    }\n\n    componentWillUnmount() {\n        this.canceled = true;\n        // this.state = {\n        //     state: AsyncComponentLoadingState.CANCELED\n        // };\n    }\n\n    renderArticle(wikipediaInfo: WikipediaInfo) {\n        const content = marked(wikipediaInfo.introText);\n        return <div style={{ overflow: 'auto' }} dangerouslySetInnerHTML={{ __html: content }} />;\n    }\n\n    renderImage(wikipediaInfo: WikipediaInfo) {\n        if (!wikipediaInfo.imageUrl) {\n            return (\n                <div className=\"Wikipedia-empty-image\">\n                    <div className=\"-content\">Image not found</div>\n                </div>\n            );\n        }\n        return (\n            <div>\n                <img src={wikipediaInfo.imageUrl} style={{ width: '100%' }} alt={`${this.props.term}`} />\n            </div>\n        );\n    }\n\n    renderMatch(wikipediaInfo: WikipediaInfo) {\n        if (wikipediaInfo.exactMatch) {\n            const message = (\n                <React.Fragment>\n                    <Icon type=\"check\" style={{ color: 'green' }} /> Exact match on \"\n                    {wikipediaInfo.matchingTerms.join(' ')}\"\n                </React.Fragment>\n            );\n            return <Alert type=\"success\" message={message} />;\n        } else {\n            const message = (\n                <React.Fragment>\n                    <Icon type=\"warning\" style={{ color: 'orange' }} /> Inexact match on: \"\n                    {wikipediaInfo.matchingTerms.join(' ')}\"\n                </React.Fragment>\n            );\n            return <Alert type=\"warning\" message={message} />;\n        }\n    }\n\n    renderWikipediaLogoCredit() {\n        return (\n            <div>\n                <div style={{ borderBottom: '1px solid gray' }}>Link to the original Wikipedia entry</div>\n                <div style={{ fontSize: '80%' }}>\n                    <p style={{ textAlign: 'center' }}>\n                        credit:\n                        <a\n                            href=\"https://creativecommons.org/licenses/by-sa/3.0/\"\n                            title=\"Creative Commons Attribution-ShareAlike 3.0\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            CC BY-SA 3.0\n                        </a>\n                        <a\n                            href=\"https://en.wikipedia.org/w/index.php?curid=33285413\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Link\n                        </a>\n                    </p>\n                </div>\n            </div>\n        );\n    }\n\n    renderWikipediaInfo(wikipediaInfo: WikipediaInfo) {\n        return (\n            <div className=\"Row scrollable\">\n                <div className=\"Col Col-grow-2 scrollable\">\n                    <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '10px' }}>\n                        <div style={{ flex: '1 1 0px' }}>{this.renderMatch(wikipediaInfo)}</div>\n                        <div style={{ flex: '0 0 auto', alignSelf: 'center', marginLeft: '10px' }}>\n                            <div style={{ height: '32px', textAlign: 'center' }}>\n                                <Tooltip title={this.renderWikipediaLogoCredit()}>\n                                    <a href={wikipediaInfo.pageUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                                        <img\n                                            src=\"images/wikipedia-logo.svg\"\n                                            style={{ height: '100%' }}\n                                            alt=\"Wikipedia Logo\"\n                                        />\n                                    </a>\n                                </Tooltip>\n                            </div>\n                            <div />\n                        </div>\n                    </div>\n                    <div\n                        className=\"scrollable\"\n                        style={{ flex: '2 1 0px', paddingRight: '4px', marginRight: '4px', overflowY: 'auto' }}\n                    >\n                        {this.renderArticle(wikipediaInfo)}\n                    </div>\n                </div>\n\n                <div className=\"Col Col-grow-1\" style={{ flex: '1 1 0px', marginLeft: '10px' }}>\n                    {this.renderImage(wikipediaInfo)}\n                </div>\n            </div>\n        );\n    }\n\n    updateInfo() {\n        const wikipediaClient = new WikipediaClient();\n        const { term } = this.props;\n        this.setState({\n            state: AsyncComponentLoadingState.LOADING\n        });\n        wikipediaClient\n            .findTerm(term)\n            .then((wikipediaInfo) => {\n                if (this.canceled) {\n                    return;\n                }\n                this.setState({\n                    state: AsyncComponentLoadingState.LOADED,\n                    wikipediaInfo\n                });\n            })\n            .catch((err) => {\n                if (this.canceled) {\n                    return;\n                }\n                return this.setState({\n                    state: AsyncComponentLoadingState.ERROR,\n                    error: err.message\n                });\n            });\n    }\n\n    componentDidMount() {\n        this.updateInfo();\n    }\n\n    componentDidUpdate(props: WikipediaProps, state: WikipediaState) {\n        if (props.term !== this.props.term) {\n            this.updateInfo();\n        }\n    }\n\n    renderNone() {\n        return <div />;\n    }\n\n    renderLoading() {\n        return <Loading message=\"Searching Wikipedia...\" />;\n    }\n\n    renderLoaded(state: StateLoaded) {\n        return this.renderWikipediaInfo(state.wikipediaInfo);\n    }\n\n    renderError(state: StateError) {\n        return <Alert type=\"error\" message={state.error} />;\n    }\n\n    render() {\n        if (this.canceled) {\n            return;\n        }\n        switch (this.state.state) {\n            case AsyncComponentLoadingState.NONE:\n                return this.renderNone();\n            case AsyncComponentLoadingState.LOADING:\n                return this.renderLoading();\n            case AsyncComponentLoadingState.LOADED:\n                return this.renderLoaded(this.state);\n            case AsyncComponentLoadingState.ERROR:\n                return this.renderError(this.state);\n        }\n    }\n}\n","import * as props from './props';\n\nexport interface WikipediaInfo {\n    imageUrl: string;\n    pageUrl: string;\n    introText: string;\n    title: string;\n    pageId: number;\n    exactMatch: boolean;\n    matchingTerms: Array<string>;\n}\n\ninterface WikipediaParse {\n    headhtml: Map<string, string>;\n    pageid: number;\n    redirects: Array<string>;\n    text: Map<string, string>;\n    title: string;\n}\n\nclass NotFound extends Error {\n    constructor(message: string) {\n        super(message);\n\n        this.name = 'NotFound';\n    }\n}\n\nconst WIKIPEDIA_API_URL = 'https://en.wikipedia.org/w/api.php';\nconst IMAGE_SIZE = 500;\n\nexport default class Wikipedia {\n    scrubTerm(proposedTerm: string): string {\n        // convervatively, remove all non-alpha characters\n        const chars = proposedTerm.split('');\n        const validChar = /[\\w \\s]/;\n        const newChars = chars.filter((char) => {\n            if (validChar.exec(char)) {\n                return true;\n            }\n            return false;\n        });\n        return newChars.join('');\n    }\n\n    async findTerm(term: string): Promise<WikipediaInfo> {\n        if (!term) {\n            throw new Error('Empty term passed');\n        }\n        const lookupTerm = this.scrubTerm(term);\n        return this.getWikipediaInfo(lookupTerm).then(\n            ({ imageUrl, pageUrl, introText, title, pageId, matchingTerms, exactMatch }) => {\n                // this.imageUrl(imageUrl);\n                // this.pageUrl(url);\n                const fixedIntroText = introText\n                    .replace(/====/g, '####')\n                    .replace(/===/g, '###')\n                    .replace(/==/g, '##')\n                    .replace(/\\n/g, '  \\n');\n\n                return { imageUrl, pageUrl, introText: fixedIntroText, title, pageId, matchingTerms, exactMatch };\n            }\n        );\n    }\n\n    async getWikipediaInfo(term: string): Promise<WikipediaInfo> {\n        return this.getPage(term).then(\n            ({\n                wikiResponse,\n                matchingTerms,\n                exactMatch\n            }: {\n                wikiResponse: any;\n                matchingTerms: Array<string>;\n                exactMatch: boolean;\n            }) => {\n                // this.imageCaption(wikiResponse.parse.title);\n                return Promise.all([\n                    this.getImage({ size: IMAGE_SIZE, pageId: wikiResponse.parse.pageid }),\n                    this.getPageInfo({ pageId: wikiResponse.parse.pageid })\n                ]).then(([imageUrl, pageInfo]) => {\n                    return {\n                        imageUrl: imageUrl,\n                        pageUrl: pageInfo.url,\n                        introText: pageInfo.introText,\n                        title: wikiResponse.parse.title,\n                        pageId: wikiResponse.parse.pageid,\n                        matchingTerms,\n                        exactMatch\n                    };\n                });\n            }\n        );\n    }\n\n    // see: https://www.mediawiki.org/wiki/API:Main_page\n    // https://en.wikipedia.org/w/api.php?action=help&modules=parse\n    async getPage(term: string): Promise<{ wikiResponse: any; matchingTerms: Array<string>; exactMatch: boolean }> {\n        const terms = term.split(/\\s+/);\n        let matchingTerms: Array<string>;\n        let exactMatch = true;\n        return new Promise((resolve, reject) => {\n            const fetchPage = (terms: Array<string>) => {\n                if (terms.length === 0) {\n                    reject(new NotFound('No Wikipedia page found matching \"' + term + '\"'));\n                    // resolve(null);\n                }\n                // const http = new HttpClient.HttpClient();\n                // const header = new HttpClient.HttpHeader({\n                //     accept: 'application/json'\n                // });\n                const apiUrl = new URL(WIKIPEDIA_API_URL);\n                const query = apiUrl.searchParams;\n                query.set('action', 'parse');\n                query.set('format', 'json');\n                query.set('prop', 'text|headhtml');\n                query.set('section', '0');\n                query.set('redirects', '');\n                query.set('page', terms.join(' '));\n                const headers = {\n                    accept: 'application/json'\n                };\n                // must set this to enable cors\n                query.set('origin', '*');\n                fetch(apiUrl.toString(), {\n                    method: 'GET',\n                    headers\n                })\n                    .then((result) => {\n                        switch (result.status) {\n                            case 200:\n                                try {\n                                    return result.json().then((wikiResponse) => {\n                                        if (wikiResponse.error) {\n                                            if (wikiResponse.error.code === 'missingtitle') {\n                                                terms.pop();\n                                                exactMatch = false;\n                                                fetchPage(terms);\n                                                return null;\n                                            } else {\n                                                console.error('wikipedia api error', wikiResponse);\n                                                reject(new Error('Wikipedia api error: ' + wikiResponse.error.code));\n                                            }\n                                        } else {\n                                            matchingTerms = terms;\n                                            resolve({\n                                                wikiResponse,\n                                                matchingTerms,\n                                                exactMatch\n                                            });\n                                        }\n                                    });\n                                } catch (ex) {\n                                    reject(new Error('Error parsing wikipedia response: ' + ex.message));\n                                }\n                                break;\n                            default:\n                                const message = 'Unexpected response from wikipedia api: ' + result.status;\n                                console.error(message, result);\n                                reject(new Error(message));\n                        }\n                    })\n                    .catch((err) => {\n                        reject(err);\n                    });\n            };\n            fetchPage(terms);\n        });\n    }\n\n    async getPageInfo({ pageId }: { pageId: string }): Promise<any> {\n        const apiURL = new URL(WIKIPEDIA_API_URL);\n        const query = apiURL.searchParams;\n        query.set('action', 'query');\n        query.set('pageids', pageId);\n        query.set('prop', 'info|extracts');\n        query.set('explaintext', 'true');\n        query.set('inprop', 'url');\n        query.set('origin', '*');\n        query.set('format', 'json');\n\n        // const http = new HttpClient.HttpClient();\n        return fetch(apiURL.toString(), {\n            method: 'GET'\n        }).then((result) => {\n            switch (result.status) {\n                case 200:\n                    try {\n                        return result.json().then((wikiResponse) => {\n                            return {\n                                url: props.getProp<string>(\n                                    wikiResponse,\n                                    ['query', 'pages', String(pageId), 'fullurl'],\n                                    null\n                                ),\n                                introText: props.getProp<string>(\n                                    wikiResponse,\n                                    ['query', 'pages', String(pageId), 'extract'],\n                                    null\n                                )\n                            };\n                        });\n                    } catch (ex) {\n                        console.error('error getting page info', ex.message);\n                        throw ex;\n                    }\n                default:\n                    var message = 'Unexpected response from wikipedia api: ' + result.status;\n                    console.error(message, result);\n                    throw new Error(message);\n            }\n        });\n    }\n\n    async getImage({ size, pageId }: { size: number; pageId: number }): Promise<string> {\n        const apiURL = new URL(WIKIPEDIA_API_URL);\n        const query = apiURL.searchParams;\n        query.set('action', 'query');\n        query.set('format', 'json');\n        query.set('prop', 'pageimages');\n        query.set('pithumbsize', String(size));\n        query.set('pageids', String(pageId));\n        query.set('origin', '*');\n        const headers = {\n            accept: 'application/json'\n        };\n\n        return fetch(apiURL.toString(), {\n            method: 'GET',\n            headers\n        })\n            .then((result) => {\n                switch (result.status) {\n                    case 200:\n                        try {\n                            return result.json().then((wikiResponse) => {\n                                return props.getProp<string>(\n                                    wikiResponse,\n                                    ['query', 'pages', String(pageId), 'thumbnail', 'source'],\n                                    null\n                                );\n                            });\n                        } catch (ex) {\n                            throw new Error('Error parsing wikipedia response: ' + ex.message);\n                        }\n                    default:\n                        var message = 'Unexpected response from wikipedia api: ' + result.status;\n                        console.error(message, result);\n                        throw new Error(message);\n                }\n            })\n            .catch((err) => {\n                const message = 'Error getting image from wikipedia: ' + err.message;\n                console.error(message, err);\n                throw new Error('Error getting image from wikipedia: ' + err.message);\n            });\n    }\n}\n","import React from 'react';\nimport { Spin } from 'antd';\nimport './Loading.css';\n\nexport interface Props {\n    message: string;\n}\n\ninterface State {}\n\nexport default class Loading extends React.Component<Props, State> {\n    render() {\n        return (\n            <div className=\"Loading-box\">\n                <Spin size=\"large\" />\n                <br />\n                {this.props.message}\n            </div>\n        );\n    }\n}\n","// import { UIError } from \"../types\";\n\nexport interface DBProps<T> {\n    onUpdate: () => void;\n    initialData: T;\n}\n\nexport interface TheDB<T> {\n    data: T;\n}\n\nexport enum DBCollectionStatus {\n    NONE,\n    LOADING,\n    LOADED,\n    ERROR,\n    RELOADING\n}\n\nexport interface DBCollectionBase {\n    status: DBCollectionStatus\n}\n\nexport interface DBCollectionNone extends DBCollectionBase {\n    status: DBCollectionStatus.NONE\n}\n\nexport interface DBCollectionLoading<T> extends DBCollectionBase {\n    status: DBCollectionStatus.LOADING,\n    data: T\n}\n\nexport interface DBCollectionLoaded<T> extends DBCollectionBase {\n    status: DBCollectionStatus.LOADED,\n    data: T\n}\n\nexport interface DBCollectionReloading<T> extends DBCollectionBase {\n    status: DBCollectionStatus.RELOADING,\n    data: T\n}\n\nexport interface DBCollectionError<T> extends DBCollectionBase {\n    status: DBCollectionStatus.ERROR,\n    error: T\n}\n\nexport default class DB<T> {\n    db: TheDB<T>;\n    stopped: boolean;\n    onUpdate: () => void;\n    constructor(props: DBProps<T>) {\n        this.onUpdate = props.onUpdate;\n        this.db = {\n            data: props.initialData\n        };\n        this.stopped = false;\n    }\n\n    forceComponentUpdate() {\n        if (this.stopped) {\n            return;\n        }\n        this.onUpdate();\n    }\n\n    set(updateFun: (state: T) => T) {\n        this.db.data = updateFun(this.db.data);\n        this.forceComponentUpdate();\n    }\n\n    get(): T {\n        return this.db.data;\n    }\n\n    stop() {\n        this.stopped = true;\n    }\n}\n","import React from 'react';\nimport { Taxon } from '../../../types/taxonomy';\nimport Wikipedia from '../../../components/Wikipedia';\n\nexport interface TaxonDescriptionProps {\n    taxon: Taxon;\n}\n\ninterface TaxonDescriptionState { }\n\nexport default class TaxonDescription extends React.Component<TaxonDescriptionProps, TaxonDescriptionState> {\n    renderTaxonDescription() {\n        return <Wikipedia term={this.props.taxon.name} />;\n    }\n\n    /**\n     * Intercept nodes which don't have a widely known biological association with\n     * the node name (\"scientific name\"), and for which a wikipedia lookup would not\n     * be very useful.\n     */\n    notBiological() {\n        switch (this.props.taxon.name) {\n            case 'root':\n                return (\n                    <div>\n                        <p>This taxon is the topmost node in the NCBI Taxonomy tree.</p>\n                    </div>\n                );\n            case 'cellular organisms':\n                return (\n                    <div>\n                        <p>This taxon represents all cellular organisms.</p>\n                    </div>\n                );\n            default:\n                return (\n                    <div>\n                        <p>Unknown non-biological taxon.</p>\n                    </div>\n                );\n        }\n    }\n\n    render() {\n        if (this.props.taxon.isBiological) {\n            return <div className=\"Col scrollable\">{this.renderTaxonDescription()}</div>;\n        }\n        return this.notBiological();\n    }\n}\n","import DB, { DBProps, DBCollectionNone, DBCollectionLoading, DBCollectionLoaded, DBCollectionReloading, DBCollectionError, DBCollectionStatus } from '../../../../lib/DB2';\nimport { AppConfig } from '@kbase/ui-components';\nimport { TaxonomyModel, LinkedObject, GetLinkedObjectsResult } from '../../lib/model';\nimport { TaxonReference } from '../../../../types/taxonomy';\nimport { UIError } from '../../../../types';\n\nexport interface LinkedObjectsData {\n    linkedObjects: Array<LinkedObject>;\n    totalCount: number;\n    page: number;\n    pageSize: number;\n}\n\nexport type LinkedObjectsStateNone = DBCollectionNone;\nexport type LinkedObjectsStateLoading = DBCollectionLoading<LinkedObjectsData>;\nexport type LinkedObjectsStateLoaded = DBCollectionLoaded<LinkedObjectsData>;\nexport type LinkedObjectsStateReloading = DBCollectionReloading<LinkedObjectsData>;\nexport type LinkedObjectsStateError = DBCollectionError<UIError>;\n\nexport type LinkedObjectsCollection =\n    LinkedObjectsStateNone |\n    LinkedObjectsStateLoading |\n    LinkedObjectsStateLoaded |\n    LinkedObjectsStateReloading |\n    LinkedObjectsStateError;\n\n// export type LinkedDataDBStateNone = DBStateNone;\n// export type LinkedDataDBStateLoading = DBStateLoading;\n// export type LinkedDataDBStateError = DBStateError;\n\n// export interface LinkedDataDBStateLoaded extends DBStateLoaded {\n//     linkedObjects: Array<LinkedObject>;\n\n// }\n\n// export type LinkedDataDBState =\n//     | LinkedDataDBStateNone\n//     | LinkedDataDBStateLoading\n//     | LinkedDataDBStateLoaded\n//     | LinkedDataDBStateError;\n\n\nexport enum SortDirection {\n    ASCENDING,\n    DESCENDING\n}\n\nexport function stringToSortDirection(direction: string) {\n    switch (direction) {\n        case 'ascending':\n            return SortDirection.ASCENDING;\n        case 'descending':\n            return SortDirection.DESCENDING;\n        default:\n            throw new Error('Unknown sort direction: ' + direction);\n    }\n}\n\nexport interface SortSpec {\n    sortColumn: string;\n    sortDirection: SortDirection;\n}\n\nexport interface LinkedObjectsDBState {\n    linkedObjectsCollection: LinkedObjectsCollection\n}\n\nexport interface LinkedDataDBProps extends DBProps<LinkedObjectsDBState> {\n    token: string;\n    config: AppConfig;\n}\n\nexport class AsyncTask<T> {\n    taskFun: () => Promise<T>;\n    hasResult: boolean;\n    result: T | null;\n    canceled: boolean;\n    constructor(taskFun: () => Promise<T>) {\n        this.taskFun = taskFun;\n        this.result = null;\n        this.hasResult = false;\n        this.canceled = false;\n    }\n\n    async run() {\n        try {\n            this.result = await this.taskFun();\n            return this.result;\n        } catch (ex) {\n            throw (ex);\n        }\n    }\n\n    cancel() {\n        this.canceled = true;\n    }\n\n    get(): T {\n        if (this.result === null) {\n            throw new Error('Attempt to fetch value when not set');\n        }\n        return this.result;\n    }\n\n    isCanceled(): boolean {\n        return this.canceled;\n    }\n}\n\nexport default class LinkedDataDB extends DB<LinkedObjectsDBState> {\n    token: string;\n    serviceWizardURL: string;\n    currentTask: AsyncTask<GetLinkedObjectsResult> | null;\n    constructor(props: LinkedDataDBProps) {\n        super(props);\n        this.token = props.token;\n        this.serviceWizardURL = props.config.services.ServiceWizard.url;\n        this.currentTask = null;\n    }\n\n    async fetchLinkedObjects({ taxonRef, page, pageSize }: { taxonRef: TaxonReference; page: number; pageSize: number }) {\n        if (this.currentTask) {\n            this.currentTask.cancel();\n        }\n        const task = async (): Promise<GetLinkedObjectsResult> => {\n            const client = new TaxonomyModel({\n                token: this.token,\n                url: this.serviceWizardURL\n            });\n\n            const offset = (page - 1) * pageSize;\n            const limit = pageSize;\n\n            const result = await client.getLinkedObjects(taxonRef, {\n                offset,\n                limit\n            });\n            console.log('linked', result);\n            return result;\n        };\n\n        // Set up loading based on the current state.\n\n        this.set((state: LinkedObjectsDBState) => {\n            switch (state.linkedObjectsCollection.status) {\n                case DBCollectionStatus.LOADING:\n                case DBCollectionStatus.LOADED:\n                case DBCollectionStatus.RELOADING:\n                    return {\n                        ...state,\n                        linkedObjectsCollection: {\n                            ...state.linkedObjectsCollection,\n                            status: DBCollectionStatus.LOADING\n                        }\n                    };\n                case DBCollectionStatus.NONE:\n                case DBCollectionStatus.ERROR:\n                default:\n                    return {\n                        ...state,\n                        linkedObjectsCollection: {\n                            status: DBCollectionStatus.LOADING,\n                            data: {\n                                linkedObjects: [],\n                                page, pageSize,\n                                totalCount: 0\n                            }\n                        }\n                    };\n            }\n        });\n\n        const newTask = new AsyncTask<GetLinkedObjectsResult>(task);\n        this.currentTask = newTask;\n\n        try {\n            const result = await newTask.run();\n            if (newTask.isCanceled()) {\n                return;\n            }\n            this.set((state: LinkedObjectsDBState) => {\n                return {\n                    ...state,\n                    linkedObjectsCollection: {\n                        status: DBCollectionStatus.LOADED,\n                        data: {\n                            ...result,\n                            page,\n                            pageSize\n                        }\n                    }\n                };\n            });\n            this.currentTask = null;\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: LinkedObjectsDBState) => {\n                return {\n                    ...state,\n                    linkedObjectsCollection: {\n                        status: DBCollectionStatus.ERROR,\n                        error: {\n                            code: 'not-found',\n                            message: ex.message,\n                            source: 'LinkedDataDB.fetchLinkedObjects'\n                        }\n                    }\n                };\n            });\n        }\n    }\n\n    async queryLinkedObjects({ taxonRef, page, pageSize, sort }: { taxonRef: TaxonReference; page: number; pageSize: number, sort: SortSpec | null }) {\n        if (this.currentTask) {\n            this.currentTask.cancel();\n        }\n        const task = async (): Promise<GetLinkedObjectsResult> => {\n            const client = new TaxonomyModel({\n                token: this.token,\n                url: this.serviceWizardURL\n            });\n\n            const offset = (page - 1) * pageSize;\n            const limit = pageSize;\n\n            const result = await client.getLinkedObjects(taxonRef, {\n                offset,\n                limit\n            });\n\n            return result;\n        };\n\n        // Set up loading based on the current state.\n\n        this.set((state: LinkedObjectsDBState) => {\n            switch (state.linkedObjectsCollection.status) {\n                case DBCollectionStatus.LOADING:\n                case DBCollectionStatus.LOADED:\n                case DBCollectionStatus.RELOADING:\n                    return {\n                        ...state,\n                        linkedObjectsCollection: {\n                            ...state.linkedObjectsCollection,\n                            status: DBCollectionStatus.LOADING\n                        }\n                    };\n                case DBCollectionStatus.NONE:\n                case DBCollectionStatus.ERROR:\n                default:\n                    return {\n                        ...state,\n                        linkedObjectsCollection: {\n                            status: DBCollectionStatus.LOADING,\n                            data: {\n                                linkedObjects: [],\n                                page, pageSize,\n                                totalCount: 0\n                            }\n                        }\n                    };\n            }\n        });\n\n        const newTask = new AsyncTask<GetLinkedObjectsResult>(task);\n        this.currentTask = newTask;\n\n        try {\n            const result = await newTask.run();\n            if (newTask.isCanceled()) {\n                return;\n            }\n            this.set((state: LinkedObjectsDBState) => {\n                return {\n                    ...state,\n                    linkedObjectsCollection: {\n                        status: DBCollectionStatus.LOADED,\n                        data: {\n                            ...result,\n                            page,\n                            pageSize\n                        }\n                    }\n                };\n            });\n            this.currentTask = null;\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: LinkedObjectsDBState) => {\n                return {\n                    ...state,\n                    linkedObjectsCollection: {\n                        status: DBCollectionStatus.ERROR,\n                        error: {\n                            code: 'not-found',\n                            message: ex.message,\n                            source: 'LinkedDataDB.fetchLinkedObjects'\n                        }\n                    }\n                };\n            });\n        }\n    }\n}\n","import React from 'react';\nimport { LinkedObject, WorkspaceType, WorkspaceObjectType } from '../../lib/model';\nimport { Table, Tooltip, Spin, Alert } from 'antd';\nimport Column from 'antd/lib/table/Column';\nimport { LinkedObjectsCollection, LinkedObjectsData } from './LinkedDataDB';\nimport { DBCollectionStatus } from '../../../../lib/DB2';\nimport { UIError } from '../../../../types';\nimport { SorterResult, PaginationConfig } from 'antd/lib/table';\nimport { SortSpec, stringToSortDirection } from './LinkedDataDB';\n\nconst DEFAULT_PAGE_SIZE = 12;\n\nexport interface Props {\n    linkedObjectsCollection: LinkedObjectsCollection\n    setPage: (page: number, pageSize: number) => void\n    updateView: (page: number, pageSize: number, sort: SortSpec | null) => void\n}\n\ninterface State { }\n\nexport default class LinkedData extends React.Component<Props, State> {\n    onChangePage(page: number, pageSize?: number) {\n        this.props.setPage(page, pageSize || DEFAULT_PAGE_SIZE);\n    }\n\n    onChangeTable(pagination: PaginationConfig, filters: Record<string, string[]>, sorter: SorterResult<LinkedObject>) {\n        let sort: SortSpec | null;\n        if (sorter.column && sorter.column.dataIndex) {\n            const sortColumn = sorter.column.dataIndex;\n            const sortDirection = stringToSortDirection(sorter.order === 'descend' ? 'descending' : 'ascending');\n            sort = {\n                sortColumn, sortDirection\n            };\n        } else {\n            sort = null;\n        }\n\n        this.props.updateView(pagination.current || 1, pagination.pageSize || DEFAULT_PAGE_SIZE, sort);\n    }\n\n    componentDidMount() {\n        this.props.setPage(1, DEFAULT_PAGE_SIZE);\n    }\n\n    componentDidUpdate(previousProps: Props) {\n        switch (previousProps.linkedObjectsCollection.status) {\n            case DBCollectionStatus.NONE:\n            case DBCollectionStatus.LOADING:\n            case DBCollectionStatus.LOADED:\n            case DBCollectionStatus.ERROR:\n            case DBCollectionStatus.RELOADING:\n        }\n    }\n\n    renderLinkedObjects(data: LinkedObjectsData, isLoading: boolean) {\n        return <Table<LinkedObject>\n            dataSource={data.linkedObjects}\n            size=\"small\"\n            className=\"KBaseAntdOverride-remove-table-border ScrollingFlexTable\"\n            // pagination={false}\n            // scroll={{ y: '100%' }}\n            bordered={false}\n            rowKey={(linkedObject: LinkedObject) => {\n                return [linkedObject.workspaceID, linkedObject.objectID, linkedObject.version].join('/');\n            }}\n            pagination={{\n                position: 'top',\n                // onChange: this.onChangePage.bind(this),\n                defaultPageSize: DEFAULT_PAGE_SIZE,\n                total: data.totalCount\n            }}\n            loading={isLoading}\n            onChange={this.onChangeTable.bind(this)}\n        >\n            <Column\n                title=\"Type\"\n                dataIndex=\"type\"\n                width=\"10%\"\n                render={(type: WorkspaceObjectType) => {\n                    const typeID = [[type.module, type.name].join('.'), [type.majorVersion, type.minorVersion].join('.')].join('-');\n                    return <a href={`/#spec/type/${typeID}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {type.name}\n                    </a>\n                }}\n            />\n            <Column\n                title=\"Object\"\n                dataIndex=\"objectName\"\n                width=\"35%\"\n                // sorter={(a: LinkedObject, b: LinkedObject) => {\n                //     return a.objectName.localeCompare(b.objectName);\n                // }}\n                sorter={true}\n                render={(objectName: string, linkedObject: LinkedObject) => {\n                    const url = [\n                        '',\n                        '#dataview',\n                        linkedObject.workspaceID,\n                        linkedObject.objectID,\n                        linkedObject.version\n                    ].join('/');\n                    const headerStyle = {\n                        fontStyle: 'italic',\n                        marginRight: '3px'\n                    }\n                    const tooltip = (\n                        <div>\n                            <div>\n                                <span style={headerStyle}>\n                                    Ref\n                                </span>\n                                <span>\n                                    {linkedObject.workspaceID}/{linkedObject.objectID}/{linkedObject.version}\n                                </span>\n                            </div>\n                            <div>\n                                <span style={headerStyle}>\n                                    Workspace ID\n                                </span>\n                                <span>\n                                    {linkedObject.workspaceID}\n                                </span>\n                            </div>\n                            <div>\n                                <span style={headerStyle}>\n                                    Object ID\n                                </span>\n                                <span>\n                                    {linkedObject.objectID}\n                                </span>\n                            </div>\n                            <div>\n                                <span style={headerStyle}>\n                                    Version\n                                </span>\n                                <span>\n                                    {linkedObject.version}\n                                </span>\n                            </div>\n                        </div>\n                    )\n                    return (\n                        <Tooltip title={tooltip}>\n                            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                {objectName}\n                            </a>\n                        </Tooltip>\n                    )\n                }}\n            />\n            <Column\n                title=\"Narrative\"\n                width=\"35%\"\n                dataIndex=\"workspaceID\"\n                render={(workspaceID: number, linkedObject: LinkedObject) => {\n                    switch (linkedObject.workspaceType) {\n                        case WorkspaceType.NARRATIVE:\n                            return <a href={`/narrative/${workspaceID}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                                {linkedObject.title}\n                            </a>\n                        case WorkspaceType.REFDATA:\n                            return <span>{linkedObject.title}</span>;\n                        case WorkspaceType.UNKNOWN:\n                            return <span>{linkedObject.title}</span>;\n\n                    }\n\n                }}\n            />\n            <Column\n                title=\"Object Created\"\n                dataIndex=\"createdAt\"\n                width=\"10%\"\n                // sorter={(a: LinkedObject, b: LinkedObject) => {\n                //     return a.createdAt - b.createdAt;\n                // }}\n                sorter={true}\n                render={(createdAt: number) => {\n                    return Intl.DateTimeFormat('en-US').format(createdAt);\n                }}\n            />\n            <Column\n                title=\"Linked At\"\n                dataIndex=\"linkedAt\"\n                width=\"10%\"\n                // sorter={(a: LinkedObject, b: LinkedObject) => {\n                //     return a.linkedAt - b.linkedAt;\n                // }}\n                sorter={true}\n                defaultSortOrder='descend'\n                render={(linkedAt: number) => {\n                    return Intl.DateTimeFormat('en-US').format(linkedAt);\n                }}\n            />\n        </Table>\n    }\n    renderLoading() {\n        return (\n            <Spin />\n        )\n    }\n    renderError(error: UIError) {\n        return (\n            <Alert type=\"error\" message={error.message} />\n        )\n    }\n    render() {\n        const collection = this.props.linkedObjectsCollection;\n        switch (collection.status) {\n            case DBCollectionStatus.NONE:\n                return this.renderLoading();\n            case DBCollectionStatus.ERROR:\n                return this.renderError(collection.error);\n            case DBCollectionStatus.LOADING:\n                return this.renderLinkedObjects(collection.data, true);\n            case DBCollectionStatus.LOADED:\n                return this.renderLinkedObjects(collection.data, false);\n            case DBCollectionStatus.RELOADING:\n                return this.renderLinkedObjects(collection.data, true)\n        }\n    }\n}\n","import React from 'react';\nimport { DBCollectionStatus } from '../../../../lib/DB2';\n\nimport { AppConfig } from '@kbase/ui-components';\nimport LinkedData from './view';\nimport { TaxonReference } from '../../../../types/taxonomy';\nimport LinkedDataDB, { SortSpec } from './LinkedDataDB';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    taxonRef: TaxonReference;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: LinkedDataDB;\n    lastTaxonRef: TaxonReference;\n    constructor(props: Props) {\n        super(props);\n        this.db = new LinkedDataDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                linkedObjectsCollection: {\n                    status: DBCollectionStatus.NONE\n                }\n            },\n            token: props.token,\n            config: props.config\n        });\n        this.lastTaxonRef = props.taxonRef;\n    }\n\n    componentDidUpdate() {\n        if (this.lastTaxonRef !== this.props.taxonRef) {\n            this.lastTaxonRef = this.props.taxonRef;\n            this.db.fetchLinkedObjects({ taxonRef: this.props.taxonRef, page: 1, pageSize: 12 })\n        }\n    }\n\n    fetchLinkedObjects(page: number, pageSize: number) {\n        return this.db.fetchLinkedObjects({ taxonRef: this.props.taxonRef, page, pageSize });\n    }\n\n    queryLinkedObjects(page: number, pageSize: number, sort: SortSpec | null) {\n        return this.db.queryLinkedObjects({ taxonRef: this.props.taxonRef, page, pageSize, sort });\n    }\n\n    // renderNone() {\n    //     return <Icon type=\"loading\" />;\n    // }\n\n    // renderLoading() {\n    //     return <Icon type=\"loading\" />;\n    // }\n\n    // renderError(db: LinkedDataDBStateError) {\n    //     return (\n    //         <ErrorView error={db.error} />\n    //     )\n    // }\n\n    // renderLoaded(db: LinkedDataDBStateLoaded) {\n    //     return <LinkedData linkedObjects={db.linkedObjects} fetchLinkedObjects={this.fetchLinkedObjects.bind(this)} />;\n    // }\n\n    // componentDidMount() {\n    //     const db = this.db.get();\n    //     switch (db.status) {\n    //         case DBStatus.NONE:\n    //             this.db.fetchLinkedObjects({ taxonRef: this.props.taxonRef, page: 1, pageSize: 1000 });\n    //     }\n    // }\n\n    // componentDidUpdate(prevProps: Props) {\n    //     if (prevProps.taxonRef.id !== this.props.taxonRef.id ||\n    //         prevProps.taxonRef.namespace !== this.props.taxonRef.namespace ||\n    //         prevProps.taxonRef.timestamp !== this.props.taxonRef.timestamp) {\n\n    //         this.db.fetchLinkedObjects({ taxonRef: this.props.taxonRef, page: 1, pageSize: 1000 });\n    //     }\n    // }\n\n    render() {\n        const db = this.db.get();\n        return <LinkedData\n            linkedObjectsCollection={db.linkedObjectsCollection}\n            updateView={this.queryLinkedObjects.bind(this)}\n            setPage={this.fetchLinkedObjects.bind(this)} />;\n        // this.renderLoaded(db);\n        // switch (db.status) {\n        //     case DBStatus.NONE:\n        //         // this.db.fetchLinkedObjects({ taxonRef: this.props.taxonRef, page: 1, pageSize: 1000 });\n        //         return this.renderNone();\n        //     case DBStatus.LOADING:\n        //         return this.renderLoading();\n        //     case DBStatus.ERROR:\n        //         return this.renderError(db);\n        //     case DBStatus.LOADED:\n        //         return this.renderLoaded(db);\n        // }\n    }\n}\n","import { AppConfig } from '@kbase/ui-components';\nimport { StoreState } from '../../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps { }\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import React from 'react';\nimport { Tabs } from 'antd';\nimport TaxonDetail from './TaxonDetail';\nimport TaxonDescription from './TaxonDescription';\nimport LinkedData from './linkedData';\nimport { Taxon } from '../../../types/taxonomy';\n\nexport interface TaxonInfoProps {\n    taxon: Taxon;\n}\n\ninterface TaxonInfoState { }\n\nexport default class TaxonInfo extends React.Component<TaxonInfoProps, TaxonInfoState> {\n    render() {\n        return (\n            <Tabs defaultActiveKey=\"detail\" animated={false} className=\"FullHeight-tabs\">\n                <Tabs.TabPane tab=\"Detail\" key=\"detail\" forceRender={false}>\n                    <div className=\"Col\" style={{ overflowY: 'auto' }}>\n                        <TaxonDetail taxon={this.props.taxon} />\n                    </div>\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Description\" key=\"description\" forceRender={false}>\n                    <TaxonDescription taxon={this.props.taxon} />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Linked Data\" key=\"linkedData\" forceRender={false}>\n                    <div className=\"Col\" style={{ overflowY: 'auto' }}>\n                        <LinkedData taxonRef={this.props.taxon.ref} />\n                    </div>\n                </Tabs.TabPane>\n            </Tabs>\n        );\n    }\n}\n","import React from 'react';\n\nimport { SourceInfo } from '../SourceInfo';\nimport LineageNavigator from '../LineageNavigator';\nimport TaxonSummary from '../TaxonSummary';\nimport { Taxon, TaxonReference } from '../../../types/taxonomy';\nimport { Row, Col } from 'antd';\nimport TaxonInfo from '../taxonInfo/TaxonInfo';\nimport './Taxonomy.css';\n\nexport interface TaxonomyProps {\n    // lineage: Array<Taxon>;\n    selectedTaxon: Taxon;\n    targetTaxon: Taxon;\n    selectTaxonRef: (taxonRef: TaxonReference) => void;\n    navigateToTaxonREf: (taxonRef: TaxonReference) => void;\n    setTitle: (title: string) => void;\n}\n\ninterface TaxonomyState { }\n\nexport default class Taxonomy extends React.Component<TaxonomyProps, TaxonomyState> {\n    renderTaxonInfo() {\n        if (!this.props.selectedTaxon) {\n            return <div>No taxon selected</div>;\n        }\n        return <TaxonInfo taxon={this.props.selectedTaxon} />;\n        // return 'disabled';\n    }\n\n    componentDidMount() {\n        this.props.setTitle('Taxonomy Landing Page for \"' + this.props.targetTaxon.name + '\"');\n    }\n\n    render() {\n        return (\n            <div className=\"Col scrollable Taxonomy\">\n                <div className=\"Col-auto Taxonomy-summary-section\">\n                    <Row>\n                        <Col span={12}>\n                            <TaxonSummary taxon={this.props.targetTaxon} />\n                        </Col>\n                        <Col span={12}>\n                            <SourceInfo />\n                        </Col>\n                    </Row>\n                </div>\n                <div className=\"Row scrollable\">\n                    <div className=\"Col scrollable\" style={{ flex: '0 0 20em' }}>\n                        <LineageNavigator\n                            selectedTaxon={this.props.selectedTaxon}\n                            // lineage={this.props.lineage}\n                            selectTaxonRef={this.props.selectTaxonRef}\n                            targetTaxon={this.props.targetTaxon}\n                            navigateToTaxonRef={this.props.navigateToTaxonREf}\n                        />\n                    </div>\n\n                    <div className=\"Col scrollable\" style={{ marginLeft: '10px' }}>\n                        {this.renderTaxonInfo()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport TaxonDB, { TaxonDBStateLoaded } from './TaxonDB';\nimport { DBStatus, DBStateError } from '../../../lib/DB';\nimport { AppConfig } from '@kbase/ui-components';\nimport Taxonomy from './Taxonomy';\nimport { TaxonReference } from '../../../types/taxonomy';\nimport { Icon } from 'antd';\nimport ErrorView from '../../../components/ErrorView';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    taxonRef: TaxonReference;\n    // taxonID: TaxonID;\n    navigate: (taxonRef: TaxonReference) => void;\n    setTitle: (title: string) => void;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: TaxonDB;\n    currentlyNavigatedTaxonRef: TaxonReference | null;\n    constructor(props: Props) {\n        super(props);\n        this.db = new TaxonDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n        this.currentlyNavigatedTaxonRef = null;\n    }\n\n    selectTaxon(taxonRef: TaxonReference) {\n        return this.db.getSelectedTaxon(taxonRef);\n    }\n\n    navigateToTaxon(taxonRef: TaxonReference) {\n        return this.props.navigate(taxonRef);\n    }\n\n    renderLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderError(db: DBStateError) {\n        // NB this is rendered raw in the container, which is a flex row.\n        return (\n            <div className=\"Col\">\n                <div style={{ width: '50%', margin: '20px auto 0 auto' }}>\n                    <ErrorView error={db.error} />\n                </div>\n            </div>\n        );\n    }\n\n    renderLoaded(db: TaxonDBStateLoaded) {\n        return (\n            <Taxonomy\n                targetTaxon={db.targetTaxon}\n                selectedTaxon={db.selectedTaxon}\n                selectTaxonRef={this.selectTaxon.bind(this)}\n                navigateToTaxonREf={this.navigateToTaxon.bind(this)}\n                setTitle={this.props.setTitle}\n            />\n        );\n    }\n\n    componentDidMount() {\n        this.db.getTargetTaxon(this.props.taxonRef);\n    }\n\n    componentDidUpdate(previousProps: Props) {\n        if (previousProps.taxonRef.id !== this.props.taxonRef.id ||\n            previousProps.taxonRef.timestamp !== this.props.taxonRef.timestamp) {\n            this.db.getTargetTaxon(this.props.taxonRef);\n        }\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                // this.db.getTargetTaxon(this.props.taxonID);\n                return this.renderLoading();\n            case DBStatus.LOADING:\n                return this.renderLoading();\n            case DBStatus.ERROR:\n                return this.renderError(db);\n            case DBStatus.LOADED:\n                return this.renderLoaded(db);\n            // if (this.props.taxonID !== db.targetTaxon.id) {\n            //     this.db.getTargetTaxon(this.props.taxonID);\n            //     return this.renderLoaded(db);\n            // } else {\n            //     return this.renderLoaded(db);\n            // }\n        }\n    }\n}\n","import { AppConfig, sendTitle } from '@kbase/ui-components';\nimport { StoreState } from '../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { navigate } from '../../../redux/actions';\nimport { TaxonReference, taxonomyNamespaceToString } from '../../../types/taxonomy';\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps {\n    navigate: (ref: TaxonReference) => void;\n    setTitle: (title: string) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, props: OwnProps): DispatchProps {\n    return {\n        navigate: (ref: TaxonReference) => {\n            const relationEngineID = [\n                'taxonomy',\n                taxonomyNamespaceToString(ref.namespace),\n                ref.id,\n                String(ref.timestamp)\n            ].join('/');\n            dispatch(navigate(relationEngineID) as any);\n        },\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import { RelationEngineID, StoreState } from '../../redux/store';\n// import { TaxonID } from './redux/store';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { navigate } from '../../redux/actions';\nimport { connect } from 'react-redux';\nimport Taxonomy from './main';\nimport { sendTitle } from '@kbase/ui-components';\n\nexport interface OwnProps {\n    // taxonID: TaxonID;\n}\n\nexport interface StateProps {\n    // taxonID: TaxonID;\n}\n\nexport interface DispatchProps {\n    navigate: (relationEngineID: RelationEngineID) => void;\n    setTitle: (title: string) => void;\n    // load: (taxonID: TaxonID) => void;\n}\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    return {};\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        navigate: (relationEngineId: RelationEngineID) => {\n            dispatch(navigate(relationEngineId) as any);\n        },\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        }\n        // load: (taxonID: TaxonID) => {\n        //     dispatch(load(taxonID) as any);\n        // }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Taxonomy);\n","import { DynamicServiceClient } from \"@kbase/ui-lib\";\n\nexport interface GetParentsParams {\n    ns: Namespace;\n    id: string;\n    ts: number;\n}\n\nexport type Namespace = 'go';\n\nexport interface GetParentsResult {\n    results: Array<RelatedTerm>;\n    ns: Namespace;\n    ts: number;\n}\n\nexport interface GetChildrenParams {\n    ns: Namespace;\n    id: string;\n    ts: number;\n}\n\nexport interface GetChildrenResult {\n    results: Array<RelatedTerm>;\n    ns: Namespace;\n    ts: number;\n}\n\nexport interface Synonym {\n    pred: string;\n    val: string;\n    xrefs: Array<XRef>\n}\n\nexport interface XRef {\n    val: string;\n}\n\n// export interface Termx {\n//     ns: string;\n//     id: string;\n//     ts: number;\n//     name: string;\n//     scientific_name: string;\n//     relation: string;\n//     synonyms: Array<Synonym>;\n//     goID?: string;\n//     commnent: string;\n//     definition: string;\n// }\n\n// doesn't include the underscore fields\n// TODO: the api should not return any underscore\n// fields.\nexport interface TermNode {\n    namespace: string;\n    id: string;\n    alt_ids: Array<string>;\n    name: string;\n    comments: Array<string>;\n    def: {\n        val: string;\n        xrefs: Array<XRef>;\n    };\n    created: number;\n    expired: number;\n    subsets: Array<string>;\n    synonyms: Array<Synonym>;\n    type: string;\n    xrefs: Array<XRef>;\n\n    first_version: string;\n    last_version: string;\n    release_created: number;\n    release_expired: number;\n}\n\n// aka relation\n/*\n case 'is_a':\n            return OntologyRelation.IS_A;\n        case 'part_of':\n            return OntologyRelation.PART_OF;\n        case 'has_part':\n            return OntologyRelation.HAS_PART;\n        case 'regulates':\n            return OntologyRelation.REGULATES;\n        case 'positively_regulates':\n            return OntologyRelation.POSITIVELY_REGULATES;\n        case 'negatively_regulates':\n            return OntologyRelation.NEGATIVELY_REGULATES;\n        case 'occurs_in':\n            return OntologyRelation.OCCURS_IN;\n        case 'ends_during':\n            return OntologyRelation.ENDS_DURING;\n        case 'happens_during':\n            return OntologyRelation.HAPPENS_DURING;\n*/\nexport type EdgeType = 'is_a' | 'part_of' | 'has_part' | 'regulates' | 'positively_regulates' |\n    'negatively_regulates' | 'occurs_in' | 'ends_during' | 'happens_during';\n\nexport interface TermEdge {\n    id: string;\n    type: EdgeType;\n    created: number;\n    expired: number;\n    first_version: string;\n    last_version: string;\n    from: string;\n    to: string;\n    release_created: number;\n    release_expired: number;\n}\n\nexport interface RelatedTerm {\n    term: TermNode;\n    edge: TermEdge;\n}\n\n// export interface TermBrief {\n//     ns: Namespace;\n//     id: string;\n//     ts: number;\n//     name: string;\n//     scientific_name: string;\n//     relation: string;\n// }\n\nexport type TermBrief = TermNode;\n\nexport interface GetTermsParams {\n    ids: Array<string>;\n    ts: number;\n    ns: Namespace;\n}\n\nexport interface GetTermsResult {\n    results: Array<TermNode>;\n    ts: number;\n    ns: string;\n    // ignore the stats\n}\n\nexport interface GetRelatedObjectsParams {\n    ns: Namespace;\n    id: string;\n    ts: number;\n}\n\nexport interface GetRelatedObjectsResult {\n\n}\n\nexport interface GetHierarchicalAncestorsParams {\n    ns: Namespace;\n    id: string;\n    ts: number;\n    offset: number;\n    limit: number;\n}\n\nexport interface GetHierarchicalAncestorsResult {\n    results: Array<RelatedTerm>;\n    ns: Namespace;\n    ts: number;\n}\n\nexport interface GetAssociatedWSObjectsParams {\n    id: string,\n    ns: Namespace,\n    ts: number,\n    offset: number,\n    limit: number\n}\n\nexport interface RelatedWSObject {\n    features: Array<{\n        feature_id: string;\n        updated_at: number;\n    }>,\n    ws_obj: {\n        name: string,\n        workspace_id: number;\n        object_id: number;\n        version: number;\n    }\n}\n\nexport interface GetAssociatedWSObjectsResults {\n    results: Array<RelatedWSObject>;\n    ns: string;\n    ts: number;\n    stats: any;\n}\n\nexport default class OntologyAPIClient extends DynamicServiceClient {\n    static module: string = 'OntologyAPI';\n\n    async getParents({ ns, id, ts }: { ns: Namespace, id: string, ts: number }): Promise<GetParentsResult> {\n        const params: GetParentsParams = {\n            ns, id, ts\n        };\n        const [result] = await this.callFunc<[GetParentsParams], [GetParentsResult]>('get_parents', [\n            params\n        ]);\n        return result;\n    }\n\n    async getTerms({ ns, ids, ts }: GetTermsParams): Promise<GetTermsResult> {\n        const params: GetTermsParams = {\n            ns, ids, ts\n        }\n        const [result] = await this.callFunc<[GetTermsParams], [GetTermsResult]>('get_terms', [\n            params\n        ]);\n        return result;\n    }\n\n    async getChildren({ ns, id, ts }: { ns: Namespace, id: string, ts: number }): Promise<GetChildrenResult> {\n        const params: GetChildrenParams = {\n            ns, id, ts\n        };\n        const [result] = await this.callFunc<[GetChildrenParams], [GetChildrenResult]>('get_children', [\n            params\n        ]);\n        return result;\n    }\n\n    async getRelatedObjects({ ns, id, ts }: { ns: Namespace, id: string, ts: number }): Promise<GetRelatedObjectsResult> {\n        const params: GetRelatedObjectsParams = {\n            ns, id, ts\n        };\n        const [result] = await this.callFunc<[GetRelatedObjectsParams], [GetRelatedObjectsResult]>('get_children', [\n            params\n        ]);\n        return result;\n    }\n\n    async getHierarchicalAncestors({ ns, id, ts }: { ns: Namespace, id: string, ts: number }): Promise<GetHierarchicalAncestorsResult> {\n        const params: GetHierarchicalAncestorsParams = {\n            ns, id, ts, offset: 0, limit: 1000\n        };\n        const [result] = await this.callFunc<[GetHierarchicalAncestorsParams], [GetHierarchicalAncestorsResult]>('get_hierarchical_ancestors', [\n            params\n        ]);\n        return result;\n    }\n\n    async getAssociatedWSObjects(params: GetAssociatedWSObjectsParams): Promise<GetAssociatedWSObjectsResults> {\n        const [result] = await this.callFunc<[GetAssociatedWSObjectsParams], [GetAssociatedWSObjectsResults]>('get_associated_ws_objects', [\n            params\n        ]);\n        return result;\n    }\n}","import OntologyAPIClient, { Namespace, TermNode, RelatedTerm, EdgeType } from './OntologyAPIClient';\nimport { OntologyReference, OntologyNamespace, OntologyTerm, OntologySource, GOOntologyTerm, OntologyRelatedTerm, OntologyRelation } from '../../../types/ontology';\nimport { RelationEngineCollection } from '../../../types';\n\nexport interface GetTermParams {\n    ref: OntologyReference\n}\n\nexport interface GetTermResult {\n    term: OntologyTerm;\n}\n\nexport interface GetTermsParams {\n    refs: Array<OntologyReference>\n}\n\nexport interface GetTermsResult {\n    terms: Array<OntologyTerm>;\n}\n\nexport interface GetParentsParams {\n    ref: OntologyReference;\n}\n\n// TODO: this should be a \"related term\", although maybe the relation \n// collapses out with ontology - are they all is_a at least for parents, children?\nexport interface GetParentsResult {\n    terms: Array<OntologyRelatedTerm>\n}\n\nexport interface GetChildrenParams {\n    ref: OntologyReference;\n}\n\n// TODO: this should be a \"related term\", although maybe the relation \n// collapses out with ontology - are they all is_a at least for parents, children?\nexport interface GetChildrenResult {\n    terms: Array<OntologyRelatedTerm>\n}\n\nexport interface GetAncestorGraphParams {\n    ref: OntologyReference;\n}\n\nexport interface GetRelatedFeaturesParams {\n    ref: OntologyReference;\n    offset: number;\n    limit: number;\n}\n\nexport interface WorkspaceObjectReference {\n    workspaceID: number;\n    objectID: number;\n    version: number;\n}\n\nexport interface RelatedFeature {\n    objectName: string;\n    featureID: string;\n    relatedAt: number;\n    objectRef: WorkspaceObjectReference;\n}\n\nexport interface GetRelatedFeaturesResult {\n    features: Array<RelatedFeature>\n}\n\nexport type NodeID = string;\n\nexport interface TermsGraphNode {\n    term: OntologyTerm;\n    isRoot: boolean;\n    id: NodeID;\n}\n\nexport interface TermsGraphRelation {\n    relation: OntologyRelation;\n    from: NodeID;\n    to: NodeID;\n}\n\nexport interface TermsGraph {\n    terms: Array<TermsGraphNode>;\n    relations: Array<TermsGraphRelation>;\n}\n\nexport interface GetAncestorGraphResult {\n    termsGraph: TermsGraph;\n}\n\nexport function ontologyNamespaceToString(namespace: OntologyNamespace): Namespace {\n    switch (namespace) {\n        case OntologyNamespace.GO:\n            return 'go';\n    }\n}\n\nexport function stringToOntologyNamespace(ns: Namespace): OntologyNamespace {\n    switch (ns) {\n        case 'go':\n            return OntologyNamespace.GO\n        default:\n            throw new Error('Unknown ontology namespace: ' + ns);\n    }\n}\n\nexport function termNodeToTerm(term: TermNode, ts: number): OntologyTerm {\n    const namespace = stringToOntologyNamespace('go');\n    switch (namespace) {\n        case OntologyNamespace.GO:\n            const temp: GOOntologyTerm = {\n                type: OntologySource.GO,\n                ref: {\n                    collection: RelationEngineCollection.ONTOLOGY,\n                    namespace: OntologyNamespace.GO, // TODO: stringToOntologyNamespace(term.ns),\n                    id: term.id,\n                    timestamp: ts\n                },\n                namespace: term.namespace,\n                comments: term.comments,\n                definition: term.def.val,\n                goID: term.id,\n                isObsolete: false, // ignored for now, \n                name: term.name,\n                synonyms: {\n                    exact: term.synonyms.filter((synonym) => {\n                        return synonym.pred === 'hasExactSynonym'\n                    }).map((synonym) => {\n                        return synonym.val;\n                    }),\n                    narrow: term.synonyms.filter((synonym) => {\n                        return synonym.pred === 'hasNarrowSynonym'\n                    }).map((synonym) => {\n                        return synonym.val;\n                    }),\n                    broad: term.synonyms.filter((synonym) => {\n                        return synonym.pred === 'hasBroadSynonym'\n                    }).map((synonym) => {\n                        return synonym.val;\n                    }),\n                    related: term.synonyms.filter((synonym) => {\n                        return synonym.pred === 'hasRelatedSynonym'\n                    }).map((synonym) => {\n                        return synonym.val;\n                    }),\n                }, // TODO:\n            };\n            return temp;\n    }\n}\n\n/*\n  IS_A = 'OntologyRelation$is_a',\n    PART_OF = 'OntologyRelation$part_of',\n    HAS_PART = 'OntologyRelation$has_part',\n    REGULATES = 'OntologyRelation$regulates',\n    POSITIVELY_REGULATES = 'OntologyRelation$positivelyRegulates',\n    NEGATIVELY_REGULATES = 'OntologyRelation$negativelyRegulates',\n    OCCURS_IN = 'OntologyRelation$occursIn',\n    ENDS_DURING = 'OntologyRelation$endsDuring',\n    HAPPENS_DURING = 'OntologyRelation$happensDuring'\n*/\n\nexport function stringToTermRelation(relationString: EdgeType): OntologyRelation {\n    switch (relationString) {\n        case 'is_a':\n            return OntologyRelation.IS_A;\n        case 'part_of':\n            return OntologyRelation.PART_OF;\n        case 'has_part':\n            return OntologyRelation.HAS_PART;\n        case 'regulates':\n            return OntologyRelation.REGULATES;\n        case 'positively_regulates':\n            return OntologyRelation.POSITIVELY_REGULATES;\n        case 'negatively_regulates':\n            return OntologyRelation.NEGATIVELY_REGULATES;\n        case 'occurs_in':\n            return OntologyRelation.OCCURS_IN;\n        case 'ends_during':\n            return OntologyRelation.ENDS_DURING;\n        case 'happens_during':\n            return OntologyRelation.HAPPENS_DURING;\n        default:\n            throw new Error('Unknown relation: ' + relationString);\n    }\n}\n\nexport function relationToString(relation: OntologyRelation): EdgeType {\n    switch (relation) {\n        case OntologyRelation.IS_A:\n            return 'is_a';\n        case OntologyRelation.PART_OF:\n            return 'part_of';\n        case OntologyRelation.HAS_PART:\n            return 'has_part';\n        case OntologyRelation.REGULATES:\n            return 'regulates';\n        case OntologyRelation.POSITIVELY_REGULATES:\n            return 'positively_regulates';\n        case OntologyRelation.NEGATIVELY_REGULATES:\n            return 'negatively_regulates';\n        case OntologyRelation.OCCURS_IN:\n            return 'occurs_in';\n        case OntologyRelation.ENDS_DURING:\n            return 'ends_during';\n        case OntologyRelation.HAPPENS_DURING:\n            return 'happens_during';\n    }\n}\n\nexport function relatedTermToTerm(relatedTerm: RelatedTerm, ts: number): OntologyRelatedTerm {\n    const term = termNodeToTerm(relatedTerm.term, ts);\n    const relation = stringToTermRelation(relatedTerm.edge.type)\n    return {\n        term, relation\n    }\n}\n\nexport default class OntologyModel {\n    ontologyClient: OntologyAPIClient;\n    token: string;\n    url: string;\n    constructor({ token, url }: { token: string; url: string }) {\n        this.token = token;\n        this.url = url;\n        this.ontologyClient = new OntologyAPIClient({ token, url });\n    }\n\n    // async getTerms({ refs }: GetTermsParams): Promise<GetTermsResult> {\n    //     const client = new OntologyAPIClient({\n    //         token: this.token,\n    //         url: this.url\n    //     });\n\n    //     if (refs.length === 0) {\n    //         return { terms: [] };\n    //     }\n\n    //     const ns = ontologyNamespaceToString(refs[0].namespace);\n    //     const ids = refs.map(({ id }))\n\n    //     const result = await client.getTerms({\n    //         ns,\n    //         ids: [ref.id],\n    //         ts: ref.timestamp\n    //     })\n\n    //     return {\n    //         term: rawTermToTerm(result.term, result.ts)\n    //     };\n\n    // }\n\n    async getTerm({ ref }: GetTermParams): Promise<GetTermResult> {\n        const client = new OntologyAPIClient({\n            token: this.token,\n            url: this.url\n        });\n\n        const result = await client.getTerms({\n            ns: ontologyNamespaceToString(ref.namespace),\n            ids: [ref.id],\n            ts: ref.timestamp || Date.now()\n        });\n\n        return {\n            term: termNodeToTerm(result.results[0], result.ts)\n        };\n    }\n\n    async getParents({ ref }: GetParentsParams): Promise<GetParentsResult> {\n        const client = new OntologyAPIClient({\n            token: this.token,\n            url: this.url\n        });\n\n        const result = await client.getParents({\n            ns: ontologyNamespaceToString(ref.namespace),\n            id: ref.id,\n            ts: ref.timestamp || Date.now()\n        });\n\n        return {\n            terms: result.results.map((item) => {\n                return relatedTermToTerm(item, result.ts);\n            })\n        };\n    }\n\n    async getChildren({ ref }: GetChildrenParams): Promise<GetChildrenResult> {\n        const client = new OntologyAPIClient({\n            token: this.token,\n            url: this.url\n        });\n\n        const result = await client.getChildren({\n            ns: ontologyNamespaceToString(ref.namespace),\n            id: ref.id,\n            ts: ref.timestamp || Date.now()\n        });\n\n        return {\n            terms: result.results.map((item) => {\n                return relatedTermToTerm(item, result.ts);\n            })\n        };\n    }\n\n    async getRelatedFeatures({ ref, offset, limit }: GetRelatedFeaturesParams): Promise<GetRelatedFeaturesResult> {\n        const client = new OntologyAPIClient({\n            token: this.token,\n            url: this.url\n        });\n\n        const result = await client.getAssociatedWSObjects({\n            ns: ontologyNamespaceToString(ref.namespace),\n            id: ref.id,\n            ts: ref.timestamp || Date.now(),\n            offset, limit\n        })\n\n        // const features: Array<RelatedFeature> = result.results.reduce((features, genomeWithFeatures) => {\n        //     genomeWithFeatures.features.forEach((feature) => {\n        //         features.push({\n        //             featureID: feature.feature_id,\n        //             relatedAt: feature.updated_at,\n        //             objectName: genomeWithFeatures.ws_obj.name,\n        //             objectRef: {\n        //                 workspaceID: genomeWithFeatures.ws_obj.workspace_id,\n        //                 objectID: genomeWithFeatures.ws_obj.object_id,\n        //                 version: genomeWithFeatures.ws_obj.version\n        //             }\n        //         });\n        //     })\n        //     return features;\n        // }, []: Array<RelatedFeature>);\n\n\n        const features: Array<RelatedFeature> = []\n        result.results.forEach((genomeWithFeatures) => {\n            genomeWithFeatures.features.forEach((feature) => {\n                features.push({\n                    featureID: feature.feature_id,\n                    relatedAt: feature.updated_at,\n                    objectName: genomeWithFeatures.ws_obj.name,\n                    objectRef: {\n                        workspaceID: genomeWithFeatures.ws_obj.workspace_id,\n                        objectID: genomeWithFeatures.ws_obj.object_id,\n                        version: genomeWithFeatures.ws_obj.version\n                    }\n                });\n            })\n        });\n\n        return {\n            features\n        }\n    }\n\n    async getAncestorGraph({ ref }: GetAncestorGraphParams): Promise<GetAncestorGraphResult> {\n        const client = new OntologyAPIClient({\n            token: this.token,\n            url: this.url\n        });\n\n        const result = await client.getHierarchicalAncestors({\n            ns: ontologyNamespaceToString(ref.namespace),\n            id: ref.id,\n            ts: ref.timestamp || Date.now()\n        });\n\n        const relations: Array<TermsGraphRelation> = [];\n        result.results.forEach((item) => {\n            const relation = stringToTermRelation(item.edge.type);\n            // if (item.edge.from === 'GO:0008150' || item.edge.to === 'GO:0008150') {\n            //     console.log('R', item.edge.from === item.edge.to, item.edge.from, item.edge.to);\n            // }\n            // if (item.term.id === 'GO:0008150') {\n            //     console.log('T', item);\n            // }\n            if (relations.some((r) => {\n                return r.from === item.edge.from &&\n                    r.to === item.edge.to &&\n                    r.relation === relation\n            })) {\n                return;\n            }\n            relations.push({\n                relation,\n                from: item.edge.from,\n                to: item.edge.to\n            });\n        });\n        const relationsMap = relations.reduce((m, r) => {\n            let nodes = m.get(r.from);\n            if (!nodes) {\n                nodes = [];\n            }\n            nodes.push(r);\n            m.set(r.from, nodes);\n            return m;\n        }, new Map<string, Array<TermsGraphRelation>>());\n\n        const terms = new Map<string, TermsGraphNode>();\n        result.results.forEach((item) => {\n            if (!terms.has(item.term.id)) {\n                const term = termNodeToTerm(item.term, result.ts);\n                let isRoot = false;\n                const nodes = relationsMap.get(term.ref.id);\n                if (!nodes) {\n                    isRoot = true;\n                }\n\n                terms.set(item.term.id, {\n                    id: term.ref.id,\n                    term, isRoot\n                });\n            }\n        });\n\n        return {\n            termsGraph: {\n                terms: Array.from(terms.values()),\n                relations\n            }\n        };\n    }\n}","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../../../lib/DB';\nimport { OntologyTerm, OntologyReference } from '../../../types/ontology';\nimport { AppConfig } from '@kbase/ui-components';\nimport OntologyModel from '../lib/model';\n\nexport type OntologyDBStateNone = DBStateNone;\nexport type OntologyDBStateLoading = DBStateLoading;\nexport type OntologyDBStateError = DBStateError;\nexport interface OntologyDBStateLoaded extends DBStateLoaded {\n    targetTerm: OntologyTerm;\n    selectedTerm: OntologyTerm;\n}\n\nexport type OntologyDBState = OntologyDBStateNone | OntologyDBStateLoading | OntologyDBStateLoaded | OntologyDBStateError;\n\nexport interface OntologyDBProps extends DBProps<OntologyDBState> {\n    token: string;\n    config: AppConfig;\n}\n\nexport default class OntologyDB extends DB<OntologyDBState> {\n    props: OntologyDBProps;\n    constructor(props: OntologyDBProps) {\n        super(props);\n        this.props = props;\n    }\n\n    async getTargetTerm(termRef: OntologyReference) {\n        this.set((state: OntologyDBState) => {\n            return {\n                ...state,\n                status: DBStatus.LOADING\n            };\n        });\n\n        const client = new OntologyModel({\n            token: this.props.token,\n            url: this.props.config.services.ServiceWizard.url\n        });\n\n        try {\n\n            const { term } = await client.getTerm({\n                ref: termRef\n            });\n\n            this.set((state: OntologyDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    targetTerm: term,\n                    selectedTerm: term\n                }\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: OntologyDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.ERROR,\n                    error: ex.message\n                };\n            });\n        }\n    }\n\n    async setSelectedTerm(termRef: OntologyReference) {\n        const state = this.get();\n\n        if (state.status !== DBStatus.LOADED) {\n            return;\n        }\n\n        const client = new OntologyModel({\n            token: this.props.token,\n            url: this.props.config.services.ServiceWizard.url\n        });\n\n        const { term } = await client.getTerm({ ref: termRef })\n\n        this.set((state: OntologyDBState) => {\n            return {\n                ...state,\n                selectedTerm: term\n            };\n        });\n    }\n}","import React from 'react';\nimport { OntologySource, GOOntologyTerm, OntologyTerm } from '../../types/ontology';\nimport { Icon, Tooltip } from 'antd';\n\nexport interface Props {\n    term: OntologyTerm;\n    newWindow: boolean;\n}\n\ninterface State {\n}\n\nexport default class TermLink extends React.Component<Props, State> {\n    renderGOLink(term: GOOntologyTerm) {\n        const href = `http://amigo.geneontology.org/amigo/term/${term.goID}`;\n        const target = this.props.newWindow ? '_blank' : '_parent';\n        const tooltip = (\n            <React.Fragment>\n                <p>Link to the Gene Ontology AmiGO page for this term.</p>\n                <p>Opens in a separate window or tab.</p>\n            </React.Fragment>\n        )\n        return (\n            <Tooltip title={tooltip}>\n                <a href={href} target={target}>\n                    {term.ref.id} <Icon type=\"link\" />\n                </a>\n            </Tooltip>\n        )\n    }\n\n    render() {\n        const term = this.props.term;\n        switch (term.type) {\n            case (OntologySource.GO):\n                return this.renderGOLink(term);\n        }\n    }\n}","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../../../../lib/DB';\nimport { OntologyReference } from '../../../../types/ontology';\nimport { AppConfig } from '@kbase/ui-components';\nimport OntologyModel, { RelatedFeature } from '../../lib/model';\n\nexport type LinkedObjectsDBStateNone = DBStateNone;\nexport type LinkedObjectsDBStateLoading = DBStateLoading;\nexport type LinkedObjectsDBStateError = DBStateError;\n\nexport interface LinkedObjectsDBStateLoaded extends DBStateLoaded {\n    linkedObjects: Array<RelatedFeature>\n}\n\nexport type LinkedObjectsDBState = LinkedObjectsDBStateNone | LinkedObjectsDBStateLoading | LinkedObjectsDBStateError | LinkedObjectsDBStateLoaded;\n\nexport interface LinkedObjectsProps extends DBProps<LinkedObjectsDBState> {\n    token: string;\n    config: AppConfig;\n}\n\nexport default class LinkedObjectsDB extends DB<LinkedObjectsDBState> {\n    props: LinkedObjectsProps;\n    constructor(props: LinkedObjectsProps) {\n        super(props);\n        this.props = props;\n\n    }\n    async getLinkedObjects(termRef: OntologyReference) {\n        const client = new OntologyModel({\n            url: this.props.config.services.ServiceWizard.url,\n            token: this.props.token\n        });\n        try {\n            this.set((state: LinkedObjectsDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADING\n                }\n            });\n\n            const linkedObjects = await client.getRelatedFeatures({\n                ref: termRef,\n                // TODO: provided by table ui\n                offset: 0,\n                limit: 1000\n            })\n\n            // do the call here when it is available\n\n            // const linkedObjects: Array<LinkedObject> = [\n            //     {\n            //         object: {\n            //             workspaceID: 43747,\n            //             id: 4,\n            //             version: 1\n            //         },\n            //         type: {\n            //             module: 'KBaseGenomes',\n            //             name: 'Genome'\n            //         },\n            //         scientificName: 'Escherichia coli',\n            //         feature: 'CF61_RS00005a'\n            //     },\n            //     {\n            //         object: {\n            //             workspaceID: 43747,\n            //             id: 4,\n            //             version: 1\n            //         },\n            //         type: {\n            //             module: 'KBaseGenomes',\n            //             name: 'Genome'\n            //         },\n            //         scientificName: 'Escherichia coli',\n            //         feature: 'CF61_RS00005b'\n            //     },\n            //     {\n            //         object: {\n            //             workspaceID: 43747,\n            //             id: 4,\n            //             version: 1\n            //         },\n            //         type: {\n            //             module: 'KBaseGenomes',\n            //             name: 'Genome'\n            //         },\n            //         scientificName: 'Escherichia coli',\n            //         feature: 'CF61_RS00005c'\n            //     },\n            //     {\n            //         object: {\n            //             workspaceID: 43747,\n            //             id: 4,\n            //             version: 1\n            //         },\n            //         type: {\n            //             module: 'KBaseGenomes',\n            //             name: 'Genome'\n            //         },\n            //         scientificName: 'Escherichia coli',\n            //         feature: 'CF61_RS00005d'\n            //     }\n            // ]\n\n            this.set((state: LinkedObjectsDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    linkedObjects: linkedObjects.features\n                }\n            });\n        } catch (ex) {\n            this.set((state: LinkedObjectsDBState) => {\n                return {\n                    status: DBStatus.ERROR,\n                    error: {\n                        code: 'not-found',\n                        source: 'LinkedObjectsDB.getLinkedObjects',\n                        message: ex.message\n                    }\n                }\n            });\n        }\n    }\n\n}\n","import React from 'react';\nimport './style.css';\nimport { Table } from 'antd';\nimport { RelatedFeature } from '../../lib/model';\n\nexport interface Props {\n    linkedObjects: Array<RelatedFeature>;\n}\n\ninterface State {\n}\n\nexport default class LinkedObjects extends React.Component<Props, State> {\n    renderTable() {\n        return <Table<RelatedFeature>\n            dataSource={this.props.linkedObjects}\n            className=\"KBaseAntdOverride-remove-table-border ScrollingFlexTable\"\n            size=\"small\"\n            pagination={false}\n            scroll={{ y: '100%' }}\n            rowKey={(row: RelatedFeature) => {\n                return [\n                    row.objectRef.workspaceID,\n                    row.objectRef.objectID,\n                    row.objectRef.version,\n                    row.featureID\n                ].join(':');\n            }}\n            bordered={false}\n        >\n            <Table.Column\n                dataIndex={\"objectName\"}\n                title=\"Object Name\"\n                width=\"40%\"\n                render={(objectName: string, row: RelatedFeature) => {\n                    const hash = [\n                        'dataview',\n                        String(row.objectRef.workspaceID),\n                        String(row.objectRef.objectID),\n                        String(row.objectRef.version)\n                    ].join('/');\n                    const url = new URL('', window.location.origin);\n                    url.hash = hash;\n                    return (\n                        <a href={url.toString()} target=\"_blank\">\n                            {objectName}\n                        </a>\n                    )\n                }}\n            />\n            <Table.Column\n                dataIndex={\"featureID\"}\n                title=\"Feature\"\n                width=\"40%\"\n                render={(featureID: string, row: RelatedFeature) => {\n                    const hash = [\n                        'dataview',\n                        String(row.objectRef.workspaceID),\n                        String(row.objectRef.objectID),\n                        String(row.objectRef.version)\n                    ].join('/');\n                    // Note the sample url just to make URL happy.\n                    const url = new URL('', window.location.origin);\n                    url.hash = hash;\n                    const search = url.searchParams;\n                    search.set('sub', 'Feature');\n                    search.set('subid', featureID);\n                    return (\n                        <a href={url.toString()} target=\"_blank\">\n                            {featureID}\n                        </a>\n                    )\n                }}\n            />\n            <Table.Column\n                dataIndex={\"relatedAt\"}\n                width=\"20%\"\n                title=\"Linked\"\n                render={(relatedAt: number) => {\n                    return Intl.DateTimeFormat('en-US').format(relatedAt);\n                }}\n            />\n        </Table>\n    }\n    renderNone() {\n        return (\n            <p style={{ fontStyle: 'italic' }}>\n                No objects use this term.\n            </p>\n        )\n    }\n    render() {\n        if (this.props.linkedObjects.length === 0) {\n            return this.renderNone();\n        }\n        return this.renderTable();\n    }\n}","import React from 'react';\nimport LinkedObjectsDB, { LinkedObjectsDBStateLoaded } from './LinkedObjectsDB';\nimport { DBStatus, DBStateError } from '../../../../lib/DB';\n\nimport { AppConfig } from '@kbase/ui-components';\nimport View from './view';\nimport { OntologyReference } from '../../../../types/ontology';\nimport { Icon } from 'antd';\nimport ErrorView from '../../../../components/ErrorView';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    termRef: OntologyReference;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: LinkedObjectsDB;\n    constructor(props: Props) {\n        super(props);\n        this.db = new LinkedObjectsDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n    }\n\n    componentDidMount() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                this.db.getLinkedObjects(this.props.termRef);\n        }\n    }\n\n    renderLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderError(db: DBStateError) {\n        return <ErrorView error={db.error} />\n    }\n\n    renderLoaded(db: LinkedObjectsDBStateLoaded) {\n        return (\n            <View\n                linkedObjects={db.linkedObjects}\n            />\n        );\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                return this.renderLoading();\n            case DBStatus.LOADING:\n                return this.renderLoading();\n            case DBStatus.ERROR:\n                return this.renderError(db);\n            case DBStatus.LOADED:\n                return this.renderLoaded(db);\n        }\n    }\n}\n","import { AppConfig } from '@kbase/ui-components';\nimport { StoreState } from '../../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps { }\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {};\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../../../lib/DB';\nimport { OntologyReference, OntologyRelatedTerm } from '../../../types/ontology';\nimport { AppConfig } from '@kbase/ui-components';\nimport OntologyModel from '../lib/model';\n\nexport type ParentsDBStateNone = DBStateNone;\nexport type ParentsDBStateLoading = DBStateLoading;\nexport type ParentsDBStateError = DBStateError;\nexport interface ParentsDBStateLoaded extends DBStateLoaded {\n    terms: Array<OntologyRelatedTerm>;\n}\n\nexport type ParentsDBState = ParentsDBStateNone | ParentsDBStateLoading | ParentsDBStateLoaded | ParentsDBStateError;\n\nexport interface ParentsDBProps extends DBProps<ParentsDBState> {\n    token: string;\n    config: AppConfig;\n}\n\nexport default class ParentsDB extends DB<ParentsDBState> {\n    props: ParentsDBProps;\n    constructor(props: ParentsDBProps) {\n        super(props);\n        this.props = props;\n    }\n\n    async getChildrenTerms(termRef: OntologyReference) {\n        this.set((state: ParentsDBState) => {\n            return {\n                ...state,\n                status: DBStatus.LOADING\n            };\n        });\n\n        const client = new OntologyModel({\n            token: this.props.token,\n            url: this.props.config.services.ServiceWizard.url\n        });\n\n        try {\n\n            const { terms } = await client.getChildren({\n                ref: termRef\n            });\n\n            terms.sort((a: OntologyRelatedTerm, b: OntologyRelatedTerm) => {\n                return a.term.name.localeCompare(b.term.name);\n            });\n\n            this.set((state: ParentsDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    terms: terms\n                }\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: ParentsDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.ERROR,\n                    error: ex.message\n                };\n            });\n        }\n    }\n\n}","import React from 'react';\nimport { OntologyRelatedTerm, OntologyRelation } from '../../../types/ontology';\nimport './style.css';\nimport { Empty, Table, Tooltip } from 'antd';\nimport Column from 'antd/lib/table/Column';\nimport { relationToString } from '../lib/model';\n\nexport interface Props {\n    terms: Array<OntologyRelatedTerm>;\n}\n\ninterface State { }\n\nexport default class OntologyList extends React.Component<Props, State> {\n    renderRelation(relation: OntologyRelation) {\n        return relationToString(relation);\n\n    }\n    renderItemsTable() {\n        return <Table<OntologyRelatedTerm>\n            dataSource={this.props.terms}\n            className=\"KBaseAntdOverride-remove-table-border ScrollingFlexTable\"\n            size=\"small\"\n            pagination={false}\n            rowKey={(row: OntologyRelatedTerm) => {\n                return row.term.ref.id;\n            }}\n            scroll={{ y: '100%' }}\n        >\n            <Column dataIndex='term.name' title=\"Name\" width=\"60%\" />\n            <Column dataIndex=\"term.goID\" title=\"ID\" width=\"20%\"\n                render={(id: string, term: OntologyRelatedTerm) => {\n                    const tooltip = (\n                        <div>\n                            {term.term.name}<br />\n                            {term.term.goID}\n                            <hr />\n                            {term.term.definition}\n                        </div>\n                    )\n                    return (\n                        <Tooltip title={tooltip} placement=\"left\">\n                            <a href={`/#review/ontology/go/${id}/${term.term.ref.timestamp}`} target=\"_parent\">\n                                {id}\n                            </a>\n                        </Tooltip>\n                    )\n                }} />\n            <Column dataIndex=\"relation\" title=\"Relation\" width=\"20%\"\n                render={(relation: OntologyRelation) => {\n                    return this.renderRelation(relation);\n                }} />\n        </Table>\n    }\n    renderNoItems() {\n        return <Empty description=\"No Children\" image={Empty.PRESENTED_IMAGE_SIMPLE} />;\n    }\n    render() {\n        if (this.props.terms.length === 0) {\n            return this.renderNoItems();\n        }\n        return this.renderItemsTable();\n    }\n}\n","import React from 'react';\nimport ParentsDB, { ParentsDBStateLoaded } from './ChildrenDB';\nimport { DBStatus, DBStateError } from '../../../lib/DB';\nimport { AppConfig } from '@kbase/ui-components';\nimport View from './view';\nimport { Icon } from 'antd';\nimport ErrorView from '../../../components/ErrorView';\nimport { OntologyReference } from '../../../types/ontology';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    termRef: OntologyReference;\n    // navigateToTermRef: (termRef: OntologyReference) => void;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: ParentsDB;\n    currentlyNavigatedOntologyRef: OntologyReference | null;\n    constructor(props: Props) {\n        super(props);\n        this.db = new ParentsDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n        this.currentlyNavigatedOntologyRef = null;\n    }\n\n    // selectTerm(termRef: OntologyReference) {\n    //     return this.db.getSelectedTerm(termRef);\n    // }\n\n    // navigateToTerm(termRef: OntologyReference) {\n    //     return this.props.navigateToTermRef(termRef);\n    // }\n\n    renderLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderError(db: DBStateError) {\n        // NB this is rendered raw in the container, which is a flex row.\n        return (\n            <div className=\"Col\">\n                <div style={{ width: '50%', margin: '20px auto 0 auto' }}>\n                    <ErrorView error={db.error} />\n                </div>\n            </div>\n        );\n    }\n\n    renderLoaded(db: ParentsDBStateLoaded) {\n        return (\n            <View\n                terms={db.terms}\n            />\n        );\n    }\n\n    componentDidMount() {\n        this.db.getChildrenTerms(this.props.termRef);\n    }\n\n    componentDidUpdate(previousProps: Props) {\n        // if (previousProps.termRef.id !== this.props.termRef.id ||\n        //     previousProps.termRef.timestamp !== this.props.termRef.timestamp) {\n        //     this.db.getTargetTerm(this.props.termRef);\n        // }\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                // this.db.getTargetTaxon(this.props.taxonID);\n                return this.renderLoading();\n            case DBStatus.LOADING:\n                return this.renderLoading();\n            case DBStatus.ERROR:\n                return this.renderError(db);\n            case DBStatus.LOADED:\n                return this.renderLoaded(db);\n            // if (this.props.taxonID !== db.targetTaxon.id) {\n            //     this.db.getTargetTaxon(this.props.taxonID);\n            //     return this.renderLoaded(db);\n            // } else {\n            //     return this.renderLoaded(db);\n            // }\n        }\n    }\n}\n","import { AppConfig, sendTitle } from '@kbase/ui-components';\nimport { StoreState } from '../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { navigate } from '../../../redux/actions';\nimport { OntologyReference } from '../../../types/ontology';\nimport { ontologyNamespaceToString } from '../lib/model';\n\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps {\n    navigate: (ref: OntologyReference) => void;\n    setTitle: (title: string) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, props: OwnProps): DispatchProps {\n    return {\n        navigate: (ref: OntologyReference) => {\n            const relationEngineID = [\n                'ontology',\n                ontologyNamespaceToString(ref.namespace),\n                ref.id,\n                String(ref.timestamp)\n            ].join('/');\n            dispatch(navigate(relationEngineID) as any);\n        },\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import DB, { DBProps, DBStatus, DBStateNone, DBStateLoading, DBStateLoaded, DBStateError } from '../../../lib/DB';\nimport { OntologyReference, OntologyTerm } from '../../../types/ontology';\nimport { AppConfig } from '@kbase/ui-components';\nimport OntologyModel, { TermsGraph, TermsGraphNode } from '../lib/model';\n\nexport type AncestorGraphDBStateNone = DBStateNone;\nexport type AncestorGraphDBStateLoading = DBStateLoading;\nexport type AncestorGraphDBStateError = DBStateError;\nexport interface AncestorGraphDBStateLoaded extends DBStateLoaded {\n    graph: TermsGraph;\n    term: OntologyTerm;\n}\n\nexport type AncestorGraphDBState = AncestorGraphDBStateNone | AncestorGraphDBStateLoading | AncestorGraphDBStateLoaded | AncestorGraphDBStateError;\n\nexport interface AncestorGraphDBProps extends DBProps<AncestorGraphDBState> {\n    token: string;\n    config: AppConfig;\n}\n\nexport default class AncestorGraphDB extends DB<AncestorGraphDBState> {\n    props: AncestorGraphDBProps;\n    constructor(props: AncestorGraphDBProps) {\n        super(props);\n        this.props = props;\n    }\n\n    async getAncestorGraph(termRef: OntologyReference) {\n        this.set((state: AncestorGraphDBState) => {\n            return {\n                ...state,\n                status: DBStatus.LOADING\n            };\n        });\n\n        const client = new OntologyModel({\n            token: this.props.token,\n            url: this.props.config.services.ServiceWizard.url\n        });\n\n        try {\n\n            const { term } = await client.getTerm({\n                ref: termRef\n            })\n\n            const { termsGraph } = await client.getAncestorGraph({\n                ref: termRef\n            });\n\n            const node: TermsGraphNode = {\n                id: term.ref.id,\n                isRoot: false,\n                term: term\n            };\n            termsGraph.terms.push(node);\n\n            this.set((state: AncestorGraphDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.LOADED,\n                    graph: termsGraph,\n                    term\n                }\n            });\n        } catch (ex) {\n            console.error('ERROR', ex);\n            this.set((state: AncestorGraphDBState) => {\n                return {\n                    ...state,\n                    status: DBStatus.ERROR,\n                    error: {\n                        code: 'error',\n                        source: 'ancestor-graph-data-fetch',\n                        message: ex.message\n                    }\n                };\n            });\n        }\n    }\n\n}","import React from 'react';\nimport { Network, Node, DataSet, Edge, Options } from 'vis-network';\nimport './NetworkGraph.css';\n\nexport interface NetworkNode {\n    id: string;\n    label: string;\n    isTerm: boolean;\n    isRoot: boolean;\n    isSelected: boolean;\n}\nexport interface NetworkEdge {\n    from: string;\n    to: string;\n    label: string;\n}\n\nexport interface NetworkData {\n    nodes: Array<NetworkNode>;\n    edges: Array<NetworkEdge>;\n}\n\nexport interface NetworkGraphProps {\n    data: NetworkData;\n    selectedNodeID: string | null;\n    height: string;\n    selectNodeID: (nodeID: string) => void;\n}\n\ninterface NetworkGraphState {\n}\n\nexport default class NetworkGraph extends React.Component<NetworkGraphProps, NetworkGraphState> {\n    networkGraphNode: React.RefObject<HTMLDivElement>;\n    graphNode: React.RefObject<HTMLDivElement>;\n    network?: Network;\n    constructor(props: NetworkGraphProps) {\n        super(props);\n        this.graphNode = React.createRef();\n        this.networkGraphNode = React.createRef();\n    }\n\n    mountGraph() {\n        if (this.graphNode.current === null) {\n            return;\n        }\n        const nodes = new DataSet<Node, 'id'>({});\n        nodes.add(this.props.data.nodes.map((term) => {\n            let color: string;\n            if (term.isTerm) {\n                color = 'red';\n            } else {\n                color = 'black';\n            }\n            if (term.isRoot) {\n                color = 'green';\n            }\n            return {\n                id: term.id,\n                label: term.label,\n                color: {\n                    border: color\n                },\n                shape: term.isRoot || term.isTerm ? 'ellipse' : 'box',\n                // fixed: term.isTerm || term.isRoot,\n                // y: term.isTerm ? 800 : (term.isRoot ? 0 : undefined)\n            }\n        }));\n        const edges = new DataSet<Edge, 'id'>({});\n        edges.add(this.props.data.edges.map((e) => {\n            return {\n                from: e.from,\n                to: e.to,\n                arrows: 'to',\n                label: e.label\n            };\n        }));\n\n\n        const graphHeight = '400px';\n        const options: Options = {\n            layout: {\n                hierarchical: {\n                    enabled: true,\n                    direction: 'DU',\n                    sortMethod: 'directed',\n                    nodeSpacing: 300\n                }\n            },\n            physics: false,\n            height: graphHeight,\n            // autoResize: true,\n            // width: '100%',\n            // height: '100%'\n            nodes: {\n                color: {\n                    highlight: {\n                        border: 'blue',\n                        background: 'rgb(204, 255, 255, 1)'\n                    }\n                },\n                margin: {\n                    top: 10,\n                    right: 10,\n                    bottom: 10,\n                    left: 10\n                }\n            }\n        }\n\n\n        this.network = new Network(this.graphNode.current, { nodes, edges }, options);\n        this.network.on('selectNode', ({ nodes: [nodeID] }) => {\n            this.props.selectNodeID(nodeID);\n        });\n        if (this.props.selectedNodeID) {\n            this.network.selectNodes([this.props.selectedNodeID])\n        }\n    }\n\n    componentDidMount() {\n        this.mountGraph();\n\n        window.addEventListener('resize', () => {\n            this.onResize();\n        });\n        this.onResize();\n    }\n\n    onResize() {\n        let graphHeight: string;\n        if (this.networkGraphNode.current) {\n            graphHeight = this.networkGraphNode.current.clientHeight + 'px';\n        } else {\n            graphHeight = '400px';\n        }\n        if (this.network) {\n            this.network.setSize('100%', graphHeight);\n            this.network.redraw();\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.selectedNodeID && this.network) {\n            this.network.selectNodes([this.props.selectedNodeID])\n        }\n    }\n\n    render() {\n        return <div ref={this.networkGraphNode} className=\"NetworkGraph\">\n            <div ref={this.graphNode} className=\"NetworkGraph-graphWrapper\">\n\n            </div>\n        </div>\n    }\n}","import React from 'react';\nimport { TermsGraph, relationToString, TermsGraphNode } from '../lib/model';\nimport NetworkGraph, { NetworkData } from './NetworkGraph';\nimport { OntologyTerm, ontologyNamespaceToString } from '../../../types/ontology';\nimport './style.css';\nimport { Table } from 'antd';\n\nexport interface AncestorGraphProps {\n    term: OntologyTerm;\n    graph: TermsGraph\n}\n\ninterface AncestorGraphState {\n    selectedNodeID: string | null;\n}\n\nexport default class AncestorGraph extends React.Component<AncestorGraphProps, AncestorGraphState> {\n    constructor(props: AncestorGraphProps) {\n        super(props);\n        this.state = {\n            selectedNodeID: null\n        };\n    }\n    selectGraphNode(termNode: TermsGraphNode) {\n        this.setState({\n            selectedNodeID: termNode.term.ref.id\n        })\n    }\n    renderTable() {\n        return <Table\n            dataSource={this.props.graph.terms}\n            size=\"small\"\n            pagination={false}\n            scroll={{ y: '100%' }}\n            className=\"KBaseAntdOverride-remove-table-border ScrollingFlexTable\"\n            rowSelection={{\n                // onSelect: (termNode: TermsGraphNode) => {\n                //     this.selectGraphNode(termNode)\n                // }\n                type: 'radio',\n                fixed: false,\n                hideDefaultSelections: true,\n                selectedRowKeys: this.state.selectedNodeID ? [this.state.selectedNodeID] : []\n            }}\n            rowKey={(node: TermsGraphNode) => {\n                return node.id;\n            }}>\n\n            <Table.Column dataIndex=\"term\"\n                defaultSortOrder=\"ascend\"\n                sorter={(a: TermsGraphNode, b: TermsGraphNode) => {\n                    return a.term.name.localeCompare(b.term.name);\n                }}\n                key=\"term.id\"\n                title=\"Name\"\n                width=\"85%\"\n                render={(term: OntologyTerm, termNode: TermsGraphNode) => {\n                    return <span\n                        style={{ cursor: 'pointer' }}\n                        onClick={() => {\n                            this.selectGraphNode(termNode)\n                        }}>\n                        {term.name}\n                    </span>\n                }}\n            />\n\n            < Table.Column dataIndex=\"term\"\n                sorter={(a: TermsGraphNode, b: TermsGraphNode) => {\n                    return a.term.name.localeCompare(b.term.name);\n                }}\n                title=\"ID\"\n                width=\"15%\"\n\n                render={(term: OntologyTerm) => {\n                    const url = [\n                        '/#review',\n                        'ontology',\n                        ontologyNamespaceToString(term.ref.namespace),\n                        term.ref.id\n                    ].join('/');\n                    return (\n                        <a href={url} target=\"_parent\">{term.ref.id}</a>\n                    )\n                }} />\n\n        </Table>\n    }\n    selectNodeID(nodeID: string) {\n        this.setState({\n            selectedNodeID: nodeID\n        });\n    }\n    render() {\n        const nodes = this.props.graph.terms.map((termNode) => {\n            const isTerm = termNode.id === this.props.term.ref.id;\n            return {\n                id: termNode.id,\n                label: termNode.term.name,\n                isTerm: isTerm,\n                isRoot: termNode.isRoot,\n                isSelected: termNode.term.ref.id === this.state.selectedNodeID\n            }\n        });\n        // Here we add the term of focus to the graph.\n        // TODO: this should be done in the data layer.\n        // nodes.push({\n        //     id: this.props.term.ref.id,\n        //     label: this.props.term.name,\n        //     isTerm: true,\n        //     isRoot: false,\n        //     isSelected: false\n        // })\n        const edges = this.props.graph.relations.map((relation) => {\n            return {\n                from: relation.from,\n                to: relation.to,\n                label: relationToString(relation.relation)\n            }\n        })\n        const data: NetworkData = {\n            nodes,\n            edges\n        }\n        return (\n            <div className=\"AncestorGraph\">\n                <div className=\"AncestorGraph-graph\">\n                    <NetworkGraph\n                        data={data}\n                        height=\"400px\"\n                        selectedNodeID={this.state.selectedNodeID}\n                        selectNodeID={this.selectNodeID.bind(this)} />\n                </div>\n                <div className=\"AncestorGraph-table\">\n                    {this.renderTable()}\n                </div>\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport AncestorGraphDB, { AncestorGraphDBStateLoaded } from './AncestorGraphDB';\nimport { DBStatus, DBStateError } from '../../../lib/DB';\nimport { AppConfig } from '@kbase/ui-components';\nimport View from './view';\nimport { Icon } from 'antd';\nimport ErrorView from '../../../components/ErrorView';\nimport { OntologyReference } from '../../../types/ontology';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    termRef: OntologyReference;\n    // navigateToTermRef: (termRef: OntologyReference) => void;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: AncestorGraphDB;\n    currentlyNavigatedOntologyRef: OntologyReference | null;\n    constructor(props: Props) {\n        super(props);\n        this.db = new AncestorGraphDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n        this.currentlyNavigatedOntologyRef = null;\n    }\n\n    // selectTerm(termRef: OntologyReference) {\n    //     return this.db.getSelectedTerm(termRef);\n    // }\n\n    // navigateToTerm(termRef: OntologyReference) {\n    //     return this.props.navigateToTermRef(termRef);\n    // }\n\n    renderLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderError(db: DBStateError) {\n        // NB this is rendered raw in the container, which is a flex row.\n        return (\n            <div className=\"Col\">\n                <div style={{ width: '50%', margin: '20px auto 0 auto' }}>\n                    <ErrorView error={db.error} />\n                </div>\n            </div>\n        );\n    }\n\n    renderLoaded(db: AncestorGraphDBStateLoaded) {\n        return (\n            <View\n                graph={db.graph} term={db.term}\n            />\n        );\n    }\n\n    componentDidMount() {\n        this.db.getAncestorGraph(this.props.termRef);\n    }\n\n    componentDidUpdate(previousProps: Props) {\n        // if (previousProps.termRef.id !== this.props.termRef.id ||\n        //     previousProps.termRef.timestamp !== this.props.termRef.timestamp) {\n        //     this.db.getTargetTerm(this.props.termRef);\n        // }\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                // this.db.getTargetTaxon(this.props.taxonID);\n                return this.renderLoading();\n            case DBStatus.LOADING:\n                return this.renderLoading();\n            case DBStatus.ERROR:\n                return this.renderError(db);\n            case DBStatus.LOADED:\n                return this.renderLoaded(db);\n            // if (this.props.taxonID !== db.targetTaxon.id) {\n            //     this.db.getTargetTaxon(this.props.taxonID);\n            //     return this.renderLoaded(db);\n            // } else {\n            //     return this.renderLoaded(db);\n            // }\n        }\n    }\n}\n","import { AppConfig, sendTitle } from '@kbase/ui-components';\nimport { StoreState } from '../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { navigate } from '../../../redux/actions';\nimport { OntologyReference } from '../../../types/ontology';\nimport { ontologyNamespaceToString } from '../lib/model';\n\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps {\n    navigate: (ref: OntologyReference) => void;\n    setTitle: (title: string) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, props: OwnProps): DispatchProps {\n    return {\n        navigate: (ref: OntologyReference) => {\n            const relationEngineID = [\n                'ontology',\n                ontologyNamespaceToString(ref.namespace),\n                ref.id,\n                String(ref.timestamp)\n            ].join('/');\n            dispatch(navigate(relationEngineID) as any);\n        },\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import React from 'react';\nimport { FlexTabs } from '@kbase/ui-components';\nimport './style.css';\nimport { OntologyTerm, Synonym } from '../../../types/ontology';\nimport TermLink from '../TermLink';\nimport LinkedObjects from './LinkedObjects';\nimport Children from '../Children';\nimport AncestorGraph from '../AncestorGraph';\n\nexport interface DetailProps {\n    term: OntologyTerm\n}\n\ninterface DetailState {\n}\n\nexport default class Detail extends React.Component<DetailProps, DetailState> {\n    renderSynonyms(synonyms: Array<Synonym>) {\n        if (synonyms.length === 0) {\n            return <i>-</i>;\n        }\n        return synonyms.map((s, index) => {\n            return (\n                <div key={String(index)}>\n                    {s}\n                </div>\n            )\n        });\n    }\n\n    renderComments() {\n        if (this.props.term.comments.length === 0) {\n            return <i>-</i>;\n        }\n\n        return this.props.term.comments.map((comment, index) => {\n            const comments = comment.split('\\n');\n            return comments.map((comment, index2) => {\n                return <p key={String(index) + '-' + String(index2)}>{comment}</p>\n            });\n        });\n    }\n\n    renderDetail() {\n        return (\n            <div className=\"InfoTable DetailTable\">\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        ID\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        <TermLink term={this.props.term} newWindow={true} />\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Name\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.props.term.name}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Definition\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.props.term.definition}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        Comments\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.renderComments()}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        synonyms\n                </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.renderAllSynonyms()}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    renderAllSynonyms() {\n        return (\n            <div className=\"InfoTable DetailTable\">\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        exact\n                        </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.renderSynonyms(this.props.term.synonyms.exact)}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        narrow\n                                </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.renderSynonyms(this.props.term.synonyms.narrow)}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        broad\n                                </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.renderSynonyms(this.props.term.synonyms.broad)}\n                    </div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\">\n                        related\n                                </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.renderSynonyms(this.props.term.synonyms.broad)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    renderGraph() {\n        return (\n            <AncestorGraph termRef={this.props.term.ref} />\n        )\n    }\n    renderLinkedObjects() {\n\n        return (\n            <LinkedObjects termRef={this.props.term.ref} />\n        )\n    }\n    renderMetadata() {\n        return (\n            <div>\n                render metadata here...\n            </div>\n        )\n    }\n    renderChildren() {\n        return <Children\n            termRef={this.props.term.ref}\n        />\n    }\n\n    render() {\n        const tabs = [\n            {\n                tab: 'graph',\n                title: 'Graph',\n                component: this.renderGraph()\n            },\n            {\n                tab: 'detail',\n                title: 'Detail',\n                component: this.renderDetail()\n            },\n            {\n                tab: 'synonyms',\n                title: 'Synonyms',\n                component: this.renderAllSynonyms()\n            },\n            {\n                tab: 'children',\n                title: 'Children',\n                component: this.renderChildren()\n            },\n            {\n                tab: 'linked',\n                title: 'Linked Data',\n                component: this.renderLinkedObjects()\n            },\n            // {\n            //     tab: 'metadata',\n            //     title: 'Metadata',\n            //     component: this.renderMetadata()\n            // }\n        ]\n        return (\n            <FlexTabs tabs={tabs} />\n        )\n    }\n}","import React from 'react';\n\nexport interface Props {\n\n}\n\ninterface State {\n\n}\n\nexport default class SourceInfo extends React.Component<Props, State> {\n    render() {\n        return (\n            <div className=\"Row\">\n                <div className=\"Col-auto\" style={{ justifyContent: 'center' }}>\n                    <img src=\"images/go-logo.png\" style={{ height: '50px' }} alt=\"Gene Ontology Logo\" />\n                </div>\n                <div className=\"Col\">\n                    <div className=\"InfoTable\">\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                                Source\n                            </div>\n                            <div className=\"InfoTable-dataCol\">\n                                <a\n                                    href=\"http://geneontology.org/\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    Gene Ontology (GO)\n                                </a>\n                            </div>\n                        </div>\n                        <div className=\"InfoTable-row\">\n                            <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                                Version\n                            </div>\n                            <div className=\"InfoTable-dataCol\">SOME VERSION</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { OntologyTerm } from '../../../types/ontology';\n\nexport interface Props {\n    term: OntologyTerm\n}\n\ninterface State {\n\n}\n\nexport default class TermSummary extends React.Component<Props, State> {\n    render() {\n        return (\n            <div className=\"InfoTable\">\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                        ID\n                    </div>\n                    <div className=\"InfoTable-dataCol\">{this.props.term.goID}</div>\n                </div>\n                <div className=\"InfoTable-row\">\n                    <div className=\"InfoTable-labelCol\" style={{ width: '5em' }}>\n                        Name\n                    </div>\n                    <div className=\"InfoTable-dataCol\">\n                        {this.props.term.name}\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { OntologyReference, OntologyTerm } from '../../../types/ontology';\nimport './style.css';\nimport Detail from '../Detail';\nimport { Row, Col } from 'antd';\nimport SourceInfo from './SourceInfo';\nimport TermSummary from './TermSummary';\n\nexport interface Props {\n    // termRef: OntologyReference;\n    targetTerm: OntologyTerm;\n    selectedTerm: OntologyTerm;\n    selectTerm: (termRef: OntologyReference) => void;\n    navigate: (termRef: OntologyReference) => void;\n    setTitle: (title: string) => void;\n}\n\ninterface State { }\n\nexport default class OntologyView extends React.Component<Props, State> {\n    componentDidMount() {\n        this.props.setTitle(`Ontology Landing Page for \"${this.props.targetTerm.name}\" (${this.props.targetTerm.goID})`);\n    }\n\n    renderLayout() {\n        return (\n            <div className=\"Col scrollable Taxonomy\">\n                <div className=\"Col-auto Ontology-summary-section\">\n                    <Row>\n                        <Col span={12}>\n                            <TermSummary term={this.props.targetTerm} />\n                        </Col>\n                        <Col span={12}>\n                            <SourceInfo />\n                        </Col>\n                    </Row>\n                </div>\n                <div className=\"Row scrollable\">\n\n                    <div className=\"Col scrollable\" >\n                        <Detail term={this.props.selectedTerm} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        return this.renderLayout();\n    }\n}\n","import React from 'react';\nimport OntologyDB, { OntologyDBStateLoaded } from './OntologyDB';\nimport { DBStatus, DBStateError } from '../../../lib/DB';\nimport { AppConfig } from '@kbase/ui-components';\nimport View from './view';\nimport { Icon } from 'antd';\nimport ErrorView from '../../../components/ErrorView';\nimport { OntologyReference } from '../../../types/ontology';\n\nexport interface Props {\n    token: string;\n    config: AppConfig;\n    termRef: OntologyReference;\n    // taxonID: TaxonID;\n    navigate: (termRef: OntologyReference) => void;\n    setTitle: (title: string) => void;\n}\n\ninterface State { }\n\nexport default class Data extends React.Component<Props, State> {\n    db: OntologyDB;\n    currentlyNavigatedOntologyRef: OntologyReference | null;\n    constructor(props: Props) {\n        super(props);\n        this.db = new OntologyDB({\n            onUpdate: () => {\n                this.forceUpdate();\n            },\n            initialData: {\n                status: DBStatus.NONE\n            },\n            token: props.token,\n            config: props.config\n        });\n        this.currentlyNavigatedOntologyRef = null;\n    }\n\n    selectTerm(termRef: OntologyReference) {\n        return this.db.setSelectedTerm(termRef);\n    }\n\n    navigateToTerm(termRef: OntologyReference) {\n        return this.props.navigate(termRef);\n    }\n\n    renderLoading() {\n        return <Icon type=\"loading\" />;\n    }\n\n    renderError(db: DBStateError) {\n        // NB this is rendered raw in the container, which is a flex row.\n        return (\n            <div className=\"Col\">\n                <div style={{ width: '50%', margin: '20px auto 0 auto' }}>\n                    <ErrorView error={db.error} />\n                </div>\n            </div>\n        );\n    }\n\n    renderLoaded(db: OntologyDBStateLoaded) {\n        return (\n            <View\n                targetTerm={db.targetTerm}\n                selectedTerm={db.selectedTerm}\n                selectTerm={this.selectTerm.bind(this)}\n                navigate={this.navigateToTerm.bind(this)}\n                setTitle={this.props.setTitle}\n            />\n        );\n    }\n\n    componentDidMount() {\n        this.db.getTargetTerm(this.props.termRef);\n    }\n\n    componentDidUpdate(previousProps: Props) {\n        if (previousProps.termRef.id !== this.props.termRef.id ||\n            previousProps.termRef.timestamp !== this.props.termRef.timestamp) {\n            this.db.getTargetTerm(this.props.termRef);\n        }\n    }\n\n    render() {\n        const db = this.db.get();\n        switch (db.status) {\n            case DBStatus.NONE:\n                // this.db.getTargetTaxon(this.props.taxonID);\n                return this.renderLoading();\n            case DBStatus.LOADING:\n                return this.renderLoading();\n            case DBStatus.ERROR:\n                return this.renderError(db);\n            case DBStatus.LOADED:\n                return this.renderLoaded(db);\n            // if (this.props.taxonID !== db.targetTaxon.id) {\n            //     this.db.getTargetTaxon(this.props.taxonID);\n            //     return this.renderLoaded(db);\n            // } else {\n            //     return this.renderLoaded(db);\n            // }\n        }\n    }\n}\n","import { AppConfig, sendTitle } from '@kbase/ui-components';\nimport { StoreState } from '../../../redux/store';\nimport DataComponent from './data';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { navigate } from '../../../redux/actions';\nimport { OntologyReference } from '../../../types/ontology';\nimport { ontologyNamespaceToString } from '../lib/model';\n\n\nexport interface OwnProps { }\n\nexport interface StateProps {\n    token: string;\n    config: AppConfig;\n}\n\nexport interface DispatchProps {\n    navigate: (ref: OntologyReference) => void;\n    setTitle: (title: string) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: { config }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('Invalid state - no user authorization');\n    }\n    return {\n        token: userAuthorization.token,\n        config\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, props: OwnProps): DispatchProps {\n    return {\n        navigate: (ref: OntologyReference) => {\n            const relationEngineID = [\n                'ontology',\n                ontologyNamespaceToString(ref.namespace),\n                ref.id,\n                String(ref.timestamp)\n            ].join('/');\n            dispatch(navigate(relationEngineID) as any);\n        },\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(DataComponent);\n","import { RelationEngineID, StoreState } from '../../redux/store';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { navigate } from '../../redux/actions';\nimport { connect } from 'react-redux';\nimport Main from './Main';\nimport { sendTitle } from '@kbase/ui-components';\n\nexport interface OwnProps {\n}\n\nexport interface StateProps {\n}\n\nexport interface DispatchProps {\n    navigate: (relationEngineID: RelationEngineID) => void;\n    setTitle: (title: string) => void;\n}\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    return {};\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        navigate: (relationEngineId: RelationEngineID) => {\n            dispatch(navigate(relationEngineId) as any);\n        },\n        setTitle: (title: string) => {\n            dispatch(sendTitle(title) as any);\n        }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Main);\n","import React from 'react';\nimport { RootState } from '@kbase/ui-components';\nimport {\n    RelationEngineID,\n    Navigation,\n    NavigationSome\n} from '../../redux/store';\nimport { ViewType } from '../../redux/store/view';\nimport Taxonomy from '../../landingPages/taxonomy';\nimport OntologyView from '../../landingPages/ontology';\n\nexport interface DispatcherProps {\n    token: string | null;\n    rootState: RootState;\n    navigation: Navigation;\n    trigger: number;\n    navigate: (relationEngineID: RelationEngineID) => void;\n}\n\ninterface DispatcherState { }\n\nexport class Dispatcher extends React.Component<DispatcherProps, DispatcherState> {\n    renderUnauthorized() {\n        return <div>Sorry, not authorized. Please log in first.</div>;\n    }\n\n    renderRootState() {\n        switch (this.props.rootState) {\n            case RootState.NONE:\n                return '';\n            case RootState.HOSTED:\n                return '';\n            case RootState.DEVELOP:\n                return '';\n            case RootState.ERROR:\n                return 'error';\n        }\n    }\n\n    renderNavigationNone() {\n        return <div>none</div>;\n    }\n\n    renderNavigationSome(navigation: NavigationSome) {\n        // This is currently how we dispatch to the type-specific\n        // landing page.\n        switch (navigation.type) {\n            case ViewType.TAXONOMY:\n                return <Taxonomy taxonRef={navigation.ref} />;\n            case ViewType.ONTOLOGY:\n                return <OntologyView termRef={navigation.ref} />;\n            default:\n                // TODO: make real error display.\n                console.error('Unhandled navigation', navigation);\n        }\n    }\n\n    renderNavigation() {\n        switch (this.props.navigation.type) {\n            case ViewType.NONE:\n                return this.renderNavigationNone();\n            default:\n                return this.renderNavigationSome(this.props.navigation);\n            // case ViewStatus.LOADING:\n            //     return this.renderNavigationLoading(this.props.view);\n            // case ViewStatus.LOADED:\n            //     return this.renderNavigationLoaded(this.props.view);\n            // case ViewStatus.ERROR:\n            //     return this.renderNavigationError(this.props.view);\n        }\n    }\n\n    parseHash(hash: string): { path: Array<string>; params: { relationEngineID: string } } {\n        const hashRe = /^#(.*?)\\/(.*)$/;\n        const m = hashRe.exec(hash);\n\n        if (!m) {\n            throw new Error('Invalid path');\n        }\n\n        // Just for now...\n        // TODO: for real\n\n        const [, path, relationEngineID] = m;\n\n        return {\n            path: [path],\n            params: { relationEngineID }\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.rootState === RootState.DEVELOP) {\n            // Navigate on change of the hash\n            window.addEventListener('hashchange', (ev: HashChangeEvent) => {\n                const url = new URL(ev.newURL);\n                const hash = url.hash;\n                if (!hash) {\n                    throw new Error('no hash!');\n                }\n                const {\n                    params: { relationEngineID }\n                } = this.parseHash(hash);\n                this.props.navigate(relationEngineID);\n            });\n\n            // First time here, we also want to navigate based on the\n            // hash, or if empty (the default when a dev session starts)\n            // use some default interesting taxon id.\n            const hash = window.location.hash;\n            if (hash) {\n                const {\n                    params: { relationEngineID }\n                } = this.parseHash(hash);\n                this.props.navigate(relationEngineID);\n            } else {\n                // TODO: remove?\n                // #review/ontology/go/GO:0007610\n                // this.props.navigate('taxonomy/ncbi_taxonomy/562');\n                this.props.navigate('ontology/go/GO:0007610');\n            }\n        }\n    }\n\n    render() {\n        if (!this.props.token) {\n            return this.renderUnauthorized();\n        }\n        return (\n            <div className=\"Col scrollable\">\n                <div className=\"Row-auto\">{this.renderRootState()}</div>\n                <div className=\"Row  scrollable\">{this.renderNavigation()}</div>\n            </div>\n        );\n    }\n}\n","import { StoreState, RelationEngineID, Navigation } from '../../redux/store';\nimport { Dispatch } from 'react';\nimport { Action } from 'redux';\nimport { connect } from 'react-redux';\nimport { Dispatcher } from './Dispatcher';\nimport { RootState } from '@kbase/ui-components';\nimport { navigate } from '../../redux/actions';\n\ninterface OwnProps { }\n\ninterface StateProps {\n    token: string | null;\n    rootState: RootState;\n    navigation: Navigation;\n    trigger: number;\n}\n\ninterface DispatchProps {\n    navigate: (relationEngineID: RelationEngineID) => void;\n    // view: (view: View) => void;\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        root: { state: rootState },\n        navigation,\n        trigger\n    } = state;\n\n    // Auth integration.\n    let token;\n    if (!userAuthorization) {\n        token = null;\n    } else {\n        token = userAuthorization.token;\n    }\n\n    return { token, rootState, navigation, trigger };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        navigate: (relationEngineID: RelationEngineID) => {\n            dispatch(navigate(relationEngineID) as any);\n        },\n        // view: (view: View) => {\n        //     dispatch(view(view) as any)\n        // }\n    };\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Dispatcher);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createReduxStore } from './redux/store';\nimport { AppBase, AuthGate } from '@kbase/ui-components';\nimport './App.css';\nimport Dispatcher from './components/dispatcher';\nimport { Unsubscribe } from 'redux';\nimport { navigate } from './redux/actions';\n\nconst store = createReduxStore();\n\ninterface AppProps { }\n\ninterface AppState { }\n\nexport default class App<AppProps, AppState> extends React.Component {\n    storeUnsubscribe: Unsubscribe | null;\n    constructor(props: AppProps) {\n        super(props);\n        this.storeUnsubscribe = null;\n    }\n    componentDidMount() {\n        let last: {\n            view: string | null;\n            params: { [key: string]: string };\n        } = {\n            view: null,\n            params: {}\n        };\n        this.storeUnsubscribe = store.subscribe(() => {\n            const state = store.getState();\n            if (!state) {\n                return;\n            }\n            const {\n                app: {\n                    runtime: { navigation }\n                },\n                auth: { userAuthorization }\n            } = state;\n\n            // This is a bit of a cheat.\n            if (!userAuthorization) {\n                return;\n            }\n\n            const view = navigation.view;\n            const params = navigation.params as { [key: string]: string };\n\n            if (\n                view !== last.view ||\n                last.params === null ||\n                Object.keys(params).some((key) => {\n                    return params[key] !== last.params[key];\n                })\n            ) {\n                last.params = params;\n                last.view = view;\n                // TODO: store may change but there is not navigation yet.\n                if (params['relationEngineID']) {\n                    store.dispatch(navigate(params['relationEngineID']) as any);\n                }\n            }\n        });\n    }\n    componentWillUnmount() {\n        if (this.storeUnsubscribe) {\n            this.storeUnsubscribe();\n        }\n    }\n    render() {\n        return (\n            <Provider store={store}>\n                <AppBase>\n                    <AuthGate required={true}>\n                        <div className=\"App Col scrollable\">\n                            <Dispatcher />\n                        </div>\n                    </AuthGate>\n                </AppBase>\n            </Provider>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}